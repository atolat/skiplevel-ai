Programming

Why Skill Levels Cause Productivity Differences in Software Engineering

Is it because it takes a lot of time to do something good?

I think that's because, in software engineering, there is a real difference in the amount of time it takes to do something. Someone might take over a task that took them a month to complete and then do it in 30 minutes.

In relative terms, that's 320 times more productive. I think that's a job where that kind of thing happens quite often.

I believe this disparity is not limited to engineers but can be said to apply to almost all knowledge industries, and I believe the main reason for this is the huge difference in skill levels.

When a good engineer thinks, "I want to achieve something," they 
can instantly pull out the necessary knowledge from the vast knowledge in their head and put it together. However, an inexperienced engineer does not have that knowledge, so they must acquire it first.

To acquire the necessary knowledge, one often needs to have a huge amount of prerequisite knowledge.

It is rare to acquire this knowledge in the shortest possible time, so I think it is only after going through various twists and turns and spending a lot of time that you are finally able to step onto the same level as good engineers (sometimes).

For example, suppose that to acquire knowledge C, both knowledge A and knowledge B are required, but an inexperienced engineer does not know that "to acquire knowledge C, knowledge A and knowledge B must be acquired."

A good engineer already has knowledge C, but an inexperienced engineer does not know either knowledge A or knowledge B, so they are at a loss because they "don't know what to do."

Imagine that there are countless situations like this. This creates a big difference in the time it takes to achieve a goal or the difference between what is possible and what is impossible to achieve in the first place.

I don't think these are unique to software engineers, but I think one of the reasons why software engineers are said to be so productive is that "it's easy to copy." Since you can copy (duplicate) software created by others, it should be easier to achieve your goal faster than if there were physical constraints on copying.

If you think about sealing off "copy and paste" forever, you can see how scary it is. It's clear that whether you can use simple "copy and paste" or not makes a huge difference in productivity.

However, I think the productivity difference will be reduced even for software engineers if the task is simplified and the bottleneck in work time becomes the human body. Because it is physically impossible to move the human body 100 times faster than other people.

Also, since different people have different areas of expertise, it is natural that one person can be 10,000 times better in one area but only 1/10th the ability in another area.

In my opinion, there are still bottlenecks caused by the human body (such as typing on a keyboard, reading with your eyes, communicating by voice, etc.), so if these were eliminated, there would be a much bigger difference.

In the first place, when there is an absolute "difference" between "can't make" and "can make," a numerical comparison may be nonsense. Even if you gather 10 million people who "can't make it," I don't think they can compete with the productivity of one person who "can make today."

In fact, if you compare the top person in competitive programming with 40 million people who have recently started programming, I think the former will win.