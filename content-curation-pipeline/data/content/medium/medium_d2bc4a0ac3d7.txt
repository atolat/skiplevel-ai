Software Engineering Needs A Hippocratic Oath

Here's the draft. Do you think I missed anything?

Blue screens across the globe. Beeping cockpits, puzzled pilots, grieving relatives at destination airports. Passengers in Nissans across the world cluelessly driving unsafe cars, Volkswagen owners unwittingly becoming environmental offenders. I could go on. It's a long list and these are just some of the particularly famous examples of poorly written software that resulted in the costs being paid in human lives. The more you look, the more you'll find, and the more I think about it, the more apparent it becomes - we have never treated software development with enough care and consideration for human lives. In fact, quite the opposite. We went from "don't be evil" to "move fast and break things", to dark UX patterns, untested code and deliberately malicious software practices. This needs to stop.

One of my engineering managers years ago had a famous motto: "it's just code, not heart-surgery". Years later, I've grown to learn how wrong he was. A botched cardiovascular surgery will likely directly affect the life of just one person. Bad code - be that by deliberate design or not - has the potential to devastate millions of lives.

We're living in the Wild West of software development, where there seem to be fewer and fewer rules, and less and less responsibility and accountability taken for human-centric software solutions.

I used to be very nonchalant about my code, the features I wrote, or the A/B test I ran. It was "just code, not heart-surgery", until it slowly dawned upon me over my career that there was a whole lot more to it.

Let's not even start with the obvious ones like writing software for medical robots, airplanes, cars, trains, etc. Just take accessibility as an example. 95.9% of all webpages out there fail to meet accessibility guidelines. That's deliberate. Deliberate ignorance, carelessness, and lack of empathy. Or maybe another not so obvious one - OpenAI scraping copyrighted content to train its models while caring very little about the consequences.

Because no software engineer is trained to care about any of it. Accessibility is not being proactively taught, nor is it a requirement for front-end development jobs. Dark UX patterns have to be made illegal for businesses to stop resorting to them. We have reached the point where we fear the internet itself, and we ban software products purely based on where they come from.

We have gone from "don't be evil" to full-on "profit at any cost". Including human lives. This needs to stop. Software development needs a Hippocratic Oath.

Which would go like so, while also making sure you have the original for reference and some additional thoughts on each section.

I swear to fulfill, to the best of my ability and judgment, this covenant: I will respect the hard-won scientific gains of those physicians in whose steps I walk, and gladly share such knowledge as is mine with those who are to follow.

I will respect the hard-won technological and engineering gains of those software engineers in whose steps I walk, and gladly share such knowledge as is mine, with those who are to follow.

What comes to mind here are a few things like mentoring, passing on information seasoned with the added knowledge and experience you gained over the years. I have seen engineers create solutions and guard the knowledge to ensure being indispensable. Not a good look for the engineer, and it will introduce a host of issues in an engineering organisation, from poor culture to inflated development costs and a high likelihood of inadequate uses of the solution leading to buggy software that will impact users negatively.

I will apply, for the benefit of the sick, all measures that are required, avoiding those twin traps of overtreatment and therapeutic nihilism.

I will apply, for the benefit of all users, all measures that are required, avoiding those twin traps of over-engineering and corner-cutting.

As engineers, we often fall into the trap of over-engineering. I, for one, am a big promoter of KISS as I think it's the most pragmatic software design principle that doesn't only help code and architecture simple, testable and maintainable, but also prevents cutting corners when the business pushes us to do so. Some corners can be cut, others not so much. If, for instance, you implement lax security or poor accessibility to cut costs, you've cut the wrong corners, and you're not building software that's for the benefit of all users.

I will remember that there is art to medicine as well as science, and that warmth, sympathy, and understanding may outweigh the surgeon's knife or the chemist's drug.

I will remember that there is art to software engineering as well as science, and that good documentation, simple design may outweigh the architect's itch for complexity and the developer's endless pursuit for new and shiny.

It takes a few years as a software engineer to realise that more lines of code, fancy implementations, high-complexity codebases are nothing to be proud of. On the other hand, easily readable and well-documented, robust code, will go far, and even years later you'll be hearing back praise for leaving behind a codebase that others could instantly pick up and work with. And no, going for the new and shiny is rarely the right decision. Be that for the engineering organisation or our users.

I will not be ashamed to say "I know not", nor will I fail to call in my colleagues when the skills of another are needed for a patient's recovery.

I will not be ashamed to say "I know not", nor will I fail to call in my colleagues when the skills of another are needed for a pragmatic, maintainable solution.

That's not to say you need to ask for help for every little thing all the time. But, you must also know when it's time to pull in additional expertise. It's perfectly OK to admit you don't know something. Just the other day, my team and I ran a workshop where we each identified the technologies and product areas we were not comfortable with. Best workshop ever. It will help us tremendously going forward.

I will respect the privacy of my patients, for their problems are not disclosed to me that the world may know. Most especially must I tread with care in matters of life and death. If it is given me to save a life, all thanks. But it may also be within my power to take a life; this awesome responsibility must be faced with great humbleness and awareness of my own frailty. Above all, I must not play at God.

I will respect the privacy of my users, for their data and behaviour patterns are not disclosed to me that the world may know. Most especially must I tread with care in matters of life and death. If it is given me to improve a life with my code, all thanks. But it may also be within my power to take a life, or cause hardship, be that emotional, mental or physical; this awesome responsibility must be faced with great humbleness and awareness of my own limitation as an engineer and the capabilities of the tools I use and the code that I write. Above all, I must not play at God.

This is a very loaded one. As software engineers, we know how much impact our skills have. I remember when I wrote my first lines of code 19 years ago. The sheer fact that I could turn a blank Notepad page into a website within just minutes made me feel like some mythological God. I was walking around like Bruce Almighty to the sound of "I've got the power." We can alter the future with code, and as such with great power comes great responsibility. We may not be Gods, but our work can sure have a very immediate impact on people's lives.

I will remember that I do not treat a fever chart, a cancerous growth, but a sick human being, whose illness may affect the person's family and economic stability. My responsibility includes these related problems, if I am to care adequately for the sick.

I will remember that I do not write code just for fun, for business success, but for humans, users, whose life, wellbeing, life-choices and daily routine may be affected by my engineering decisions. My responsibility includes these related problems, if I am to write truly useful software.

It's so easy to get lost in "the zone". Writing code is fun. So is solving complex problems. That's why it's called software engineering and not code-monkeying - though inevitably we do that too, every so often. But we need to be cognisant that ultimately what we are hired for isn't the great code, quirky implementations or exotic software architectures, but rather to provide value to users, and any code change we make, any feature we build, should improve lives. The opposite is not acceptable.

I will prevent disease whenever I can, for prevention is preferable to cure.

I will prevent outages and bugs whenever I can, for prevention is preferable to debugging and damage control.

Taking responsibility for the code you write and the feature that ends up in production is a value not as many engineers share as you'd think. I have been fortunate to work with teams where we cared more about the team's success rather than individual success, so we helped each other prevent issues as much as possible. When bugs are prevented, everyone wins - the team, the business and also the users.

I will remember that I remain a member of society, with special obligations to all my fellow human beings, those sound of mind and body as well as the infirm.

I will remember that I remain a member of society, with special obligations to all my fellow human beings, those sound of mind and body as well as the infirm.

One word: accessibility. When 95.9% of the web is still not accessible, we clearly have a problem of not writing software for all fellow human beings. Try to browse the web for a day with just a keyboard or a screen-reader. You will give up far sooner than that. Suddenly, the vast internet you knew is shrunken down to just a few websites and apps. Building accessible software is good for everyone, remember that.

If I do not violate this oath, may I enjoy life and art, respected while I live and remembered with affection thereafter. May I always act so as to preserve the finest traditions of my calling and may I long experience the joy of healing those who seek my help.

If I do not violate this oath, may I enjoy life and art, respected while I live and remembered with affection thereafter. May I always act so as to preserve the finest traditions of my calling and may I long experience the joy of writing software that makes the world a better place one line of code at a time.

Need I say more? Following these simple guidelines should result in a happy software engineer and a long successful career. When you get down to it, a lot of it is common sense, but as we all know, common sense is not so common, therefore apparently we need to now consider the Hippocratic Oath for software engineers.

Software is everywhere. Software is an intrinsic part of life in 2025. We need to treat it accordingly. We need a universal guideline, just like medical doctors do.

We're long past the days of silly websites that we'd "build so they would come". Every line of code we deploy has an impact on people's lives. Some of those people are our relatives, friends, and even ourselves. So, let's design and build software responsibly.

And on that note, what would you add or modify in this draft Hippocratic Oath of Software Engineering?

P.S. Coincidentally, I just received this award today, and you know what? It makes me feel good. In a warm and fuzzy way. 🤗 I guess I must be doing something right... 🙂

Later edit

Given the overwhelming positive feedback to this article, the Hippocratic Oath of Software Engineering now has a dedicated website, and the first version is already live.

Attila Vago - Software Engineer improving the world one line of code at a time. Cool nerd since forever, writer of codes, blogs and books. Author. Web accessibility advocate, LEGO fan, vinyl record collector. Loves craft beer! Read my Hello story here! Subscribe for more stories about LEGO, tech, coding and accessibility! For my less regular readers, I also write about random bits and writing.