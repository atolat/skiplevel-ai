# Drunk Post: Things I've learned as a Sr Engineer

I'm drunk and I'll probably regret this, but here's a drunken rank of things I've learned as an engineer for the past 10 years.

* The best way I've advanced my career is by changing companies.
* Technology stacks don't really matter because there are like 15 basic patterns of software engineering in my field that apply.  I work in data so it's not going to be the same as webdev or embedded. But all fields have about 10-20 core principles and the tech stack is just trying to make those things easier, so don't fret overit.
* There's a reason why people recommend job hunting. If I'm unsatisfied at a job, it's probably time to move on.
* I've made some good, lifelong friends at companies I've worked with. I don't need to make that a requirement of every place I work. I've been perfectly happy working at places where I didn't form friendships with my coworkers and I've been unhappy at places where I made some great friends.
* I've learned to be honest with my manager. Not too honest, but honest enough where I can be authentic at work. What's the worse that can happen? He fire me? I'll just pick up a new job in 2 weeks.
* If I'm awaken at 2am from being on-call for more than once per quarter, then something is seriously wrong and I will either fix it or quit.
* pour another glass
* Qualities of a good manager share a lot of qualities of a good engineer.
* When I first started, I was enamored with technology and programming and computer science.  I'm over it.
* Good code is code that can be understood by a junior engineer.  Great code can be understood by a first year CS freshman.  The best code is no code at all.
* The most underrated skill to learn as an engineer is how to document.  Fuck, someone please teach me how to write good documentation.  Seriously, if there's any recommendations, I'd seriously pay for a course (like probably a lot of money, maybe 1k for a course if it guaranteed that I could write good docs.)
* Related to above, writing good proposals for changes is a great skill.
* Almost every holy war out there (vim vs emacs, mac vs linux, whatever) doesn't matter... except one.  See below.
* The older I get, the more I appreciate dynamic languages. Fuck, I said it. Fight me.
* If I ever find myself thinking I'm the smartest person in the room, it's time to leave.
* I don't know why full stack webdevs are paid so poorly. No really, they should be paid like half a mil a year just base salary. Fuck they have to understand both front end AND back end AND how different browsers work AND networking AND databases AND caching AND differences between web and mobile AND omg what the fuck there's another framework out there that companies want to use?  Seriously, why are webdevs paid so little.
* We should hire more interns, they're awesome. Those energetic little fucks with their ideas.  Even better when they can question or criticize something. I love interns.
* *sip*
* Don't meet your heroes. I paid 5k to take a course by one of my heroes.  He's a brilliant man, but at the end of it I realized that he's making it up as he goes along like the rest of us.
* Tech stack matters. OK I just said tech stack doesn't matter, but hear me out. If you hear Python dev vs C++ dev, you think very different things, right? That's because certain tools are really good at certain jobs.  If you're not sure what you want to do, just do Java. It's a shitty programming language that's good at almost everything.
* The greatest programming language ever is lisp.  I should learn lisp.
* For beginners, the most lucrative programming language to learn is SQL. Fuck all other languages. If you know SQL and nothing else, you can make bank.  Payroll specialtist?  Maybe 50k.  Payroll specialist who knows SQL?  90k.  Average joe with organizational skills at big corp?  $40k.  Average joe with organization skills AND sql?  Call yourself a PM and earn $150k.
* Tests are important but TDD is a damn cult.
* Cushy government jobs are not what they are cracked up to be, at least for early to mid-career engineers.  Sure, $120k + bennies + pension sound great, but you'll be selling your soul to work on esoteric proprietary technology. Much respect to government workers but seriously there's a reason why the median age for engineers at those places is 50+.  Advice does not apply to government contractors.
* Third party recruiters are leeches.  However, if you find a good one, seriously develop a good relationship with them. They can help bootstrap your career.  How do you know if you have a good one? If they've been a third party recruiter for more than 3 years, they're probably bad.  The good ones typically become recruiters are large companies.
* Options are worthless or can make you a millionaire.  They're probably worthless unless the headcount of engineering is more than 100.  Then *maybe* they are worth something within this decade.
* Work from home is the tits. But lack of whiteboarding sucks.
* I've never worked at FAANG so I don't know what I'm missing.  But I've hired (and not hired) engineers from FAANGs and they don't know what they're doing either.
* My self worth is not a function of or correlated with my total compensation.  Capitalism is a poor way to determine self-worth.
* Managers have less power than you think.  Way less power.  If you ever thing, why doesn't Manager XYZ fire somebody, it's because they can't.
* Titles mostly don't matter.  Principal Distinguished Staff Lead Engineer from Whatever Company, whatever.  What did you do and what did you accomplish. That's all people care about.
* Speaking of titles: early in your career, title changes up are nice.  Junior to Mid. Mid to Senior. Senior to Lead.  Later in your career, title changes *down* are nice.  That way, you can get the same compensation but then get an increase when you're promoted.  In other words, early in your career (<10 years), title changes UP are good because it lets you grow your skills and responsibilities.  Later, title changes down are nice because it lets you grow your salary.
* Max out our 401ks.
* Be kind to everyone.  Not because it'll help your career (it will), but because being kind is rewarding by itself.
* If I didn't learn something from the junior engineer or intern this past month, I wasn't paying attention.
* Oops I'm out of wine.
* Paying for classes, books, conferences is worth it.  I've done a few conferences, a few 1.5k courses, many books, and a subscription.  Worth it. This way, I can better pretend what I'm doing.
* Seriously, why aren't webdevs paid more? They know everything!!!
* Carpal tunnel and back problems are no joke.  Spend the 1k now on good equipment.
* The smartest man I've every worked for was a Math PhD. I've learned so much from that guy. I hope he's doing well.
* Once, in high school, there was thing girl who was a great friend of mine. I mean we talked and hung out and shared a lot of personal stuff over a few years.  Then there was a rumor that I liked her or that we were going out or whatever.  She didn't take that too well so she started to ignore me.  That didn't feel too good.  I guess this would be the modern equivalent to "ghosting".  I don't wish her any ill will though, and I hope she's doing great. I'm sorry I didn't handle that better.
* I had a girlfriend in 8th grade that I didn't want to break up with even though I didn't like her anymore so I just started to ignore her. That was so fucked up. I'm sorry, Lena.
* You know what the best part of being a software engineer is?  You can meet and talk to people who think like you.  Not necessarily the same interests like sports and TV shows and stuff.  But they think about problems the same way you think of them.  That's pretty cool.
* There's not enough women in technology.  What a fucked up industry.  That needs to change.  I've been trying to be more encouraging and helpful to the women engineers in our org, but I don't know what else to do.
* Same with black engineers.  What the hell?
* I've never really started hating a language or technology until I started becoming intimately familiar with it.  Also, I think a piece of tech is good if I hate it but I simultaneously would recommend it to a client.  Fuck Jenkins but man I don't think I would be commuting software malpractice by recommending it to a new client.
* That being said, git is awful and I have choice but to use it. Also, GUI git tools can go to hell, give me the command line any day.  There's like 7 command lines to memorize, everything else can be googled.
* Since I work in data, I'm going to give a data-specific lessons learned.  Fuck pandas.
* My job is easier because I have semi-technical analysts on my team. Semi-technical because they know programming but not software engineering.  This is a blessing because if something doesn't make sense to them, it means that it was probably badly designed.  I love the analysts on the team; they've helped me grow so much more than the most brilliant engineers.
* Dark mode is great until you're forced to use light mode (webpage or an unsupported app). That's why I use light mode.
* I know enough about security to know that I don't know shit about security.
* Crap I'm out of wine.
* Being a good engineer means knowing best practices.  Being a senior engineer means knowing when to break best practices.
* If people are trying to assign blame to a bug or outage, it's time to move on.
* A lot of progressive companies, especially startups, talk about bringing your "authentic self".  Well what if your authentic self is all about watching porn? Yeah, it's healthy to keep a barrier between your work and personal life.
* I love drinking with my co-workers during happy hour.  I'd rather spend time with kids, family, or friends.
* The best demonstration of great leadership is when my leader took the fall for a mistake that was 100% my fault.  You better believe I would've walked over fire for her.
* On the same token, the best leaders I've been privileged to work under did their best to both advocate for my opinions and also explain to me other opinions 'that conflict with mine.  I'm working hard to be like them.
* Fuck side projects.  If you love doing them, great! Even if I had the time to do side-projects, I'm too damn busy writing drunken posts on reddit
* Algorithms and data strictures are important--to a point.  I don't see pharmacist interviews test trivia about organic chemistry.  There's something fucked with our industry's interview process.
* Damn, those devops guys and gals are f'ing smart.  At least those mofos get paid though.
* It's not important to do what I like.  It's more important to do what I don't hate.
* The closer I am to the product, the closer I am to driving revnue, the more I feel valued regardless of how technical my work is.  This has been true for even the most progressive companies.
* Linux is important even when I was working in all Windows.  Why?  Because I eventually worked in Linux.  So happy for those weekend where I screwed around installing Arch.
* I've learned to be wary for ambiguous buzz words like big data.  WTF is "big" data?  I've dealt with 10k rows streaming every 10 minutes in Spark and Kafka and dealt with 1B rows batched up hourly in Python and MySQL.  Those labels can go fuck themselves.
* Not all great jobs are in Silicon Valley. But a lot are.

Finally, if you really want to hurt me, don't downvote I don't care about that. Just ignore this post. Nothing makes me sadder than when I wrote a long post and then nobody responds.  So if you hate this post, just ignore.

## Comments

### Comment 1 by u/flipstables (1510 points)

Oh shit I found beer: let's keeping going.

On programming languages:

* I once hated a programming language (C#) until I started using it.  Now I hated it but think it's useful.
* Then I started hating a programming language (C#) and left it and came back.  Wow, that programming language has really improved.
* The greatest thing about functional languages is that functions are first class and all other programmers know that.
* No matter how great or superior a language is, it doesn't matter if people don't use it.
* Learning a language isn't hard.  It's learning the ecosystem.

On coworkers

* Pair programming is great, it just takes a lot of time--time that the company usually doesn't want to spend.
* Working with smart engineers has made me a better coder.  Working with smart non-technical co-workers has made me a better engineer.
* Don't spend time outside of the 9-5 working.  Unless you want to because you got a banging project and you're in the groove.  That shit is awesome.
* Happy hours and social hours across teams are 99% just chilling and getting to know coworkers.  That's cool.  Every once in a while, the 1% is about a critical project with a critical piece of code and you're glad you brought up work in a social setting because shit would've hit the fan otherwise. I'm not saying that I should hang out with other teams outside of work because of this.  I just want to bond.  But it sure as hell is a nice perk.

On working from home

* If the company is half remote and half on-site, it's important to determine if the remote people aren't treated as second-class citizens.  If major decisions are made "at the water cooler", then it's better to try to change the company culture (hard) or move on to a different company that treats its remote employees as first class citizens.
* The second worst major downside of working from home is no whiteboard.
* The first major downside of working from home is that it's hard to learn from coworkers.  Unless I'm (a) confident and assertive to ask questions and (b) the company has a culture where remote workers are equivelent to on-site workers, I think it was best that I worked on-side for the first 5 years of my career.


On technology

* Everyone knows that tech changes.  The tech landscape of the past 10 years has changed dramatically.  But fundamentals don't change very much, especially fundamentals that apply to my field.
* Hacker news and /r/programming is only good to get general ideas and keep up-to-date.  The comments are almost worthless.
* There's a lot of vocal amateurs with strong opinions about technology. Even amateurs published on "respectable" journals and blogs. I found it to keep abreast of the rumors but to figure things out for myself.
* I work at a cutting edge startup and we don't use the latest XYZ tech that was present at ABC cutting edge tech company.  And it turn out, what they usually present is only a small percentage of their engineering department and that most of them are using the same tech we are.
* That being said, it's important to read the signs. If you want to work with modern tech and you're company is still doing the majority of it's development in jQuery, might be time to re-evauluate.

On Data Engineering

* Fuck it I'm a data engineer so I might as well give more specific, target advice/experience
* SQL is king.  Databases like MySQL, Postgres, Oracle, SQL Server, SQLite is still supreme.  Even if you work with new tech, most of it transfers anyway.
* Most companies aren't doing streaming.  It's hard and complicated.  If you're 10 years into your career and you don't know how to work with 10k records per second, don't worry about it, there's still jobs out for you.
* Airflow is shit, yes.  There are other products out there, but fuck me if Airflow isn't the most widely used.
* Machine learning projects are highly prone to failure.  They're complicated and hard to implement.  Don't believe me?  How easy is it to write fucking unit test a machine learning model?  Yeah.
* Our field is new.  There's no good book on data engineering, just go and "do it".  Can't learn it through a bootcamp and shit.  This will probably change in 10 years as we all figure out what the fuck we're doing.

On Life

* People die.  Do you want your code to be your legacy?  If yes, then spend a lot of time on it because that's your fucking legacy and you go!  But if you are like me, your legacy is surrounded with family, friends, and people in your life and not the code you write.  So don't get too hung up on it.
* Good people write shitty code.  Smart people write shitty code.  Good coders and good engineers write shitty code.  Don't let code quality be a dependent variable on your self worth.
* I got into tech and coding because tech was my hobby.  Now my hobby is is the same as work and work has ruined my hobby.  So now if I want to enjoy tech I need to quit my hobby.  Or I need to be OK that tech is no longer my hobby and find new hobbies.
* Programming and computer science is like, what, 80 years old?  Compare that with any other engineering discipline.  Yeah, we collectively don't know what the fuck we're doing.
* I'm making pretty good money.  Be grateful and appreciate.  Also, save.

Other shit

* I've built large platforms and libraries that are used by multiple teams and people for many years. Yet for some reason, the most proud I was of the code I wrote was the small script that was used by me.
* The proudest accomplishment of my career has been helping other people be better at their jobs.  That's probably because I'm destined to be a people manager, so this is probably not helpful to other people.
* When I was looking for a job, I created an updated my Linkedin. I got shit replies and deleted it.  Now I use Linkedin to find other candidates to join my company.  Bottom line, Linkedin is a lot of noise.  I only find it valuable because now, part of my job is contributing to that noise.
* Once, I found out in college that a girl liked me. I didn't believe it because I had poor self esteem, but then she asked me out.  I told her I wasn't interested even though she was really cool. That was one of the proudest moments in my life because I as mature enough at 19 to say "no" in a mature way.
* /r/cscareerquestions is such a cesspool of ego and misinformation that I don't know what to do about it.  Like, WTF.  I want to shake all those people and try to explain to them how the world really is, but they wouldn't believe me.

On my general feelings right now

* I'm drunk and I usually don't drink, so I would think that everything I say is probably cringy or terrible
* I feel strongly that people should save and invest money. If you have a 6 figure salary, do your best to max our your 401k please.
* I've become what I've always hated: someone who works in tech in a career but avoid tech in real life.  Maybe that comes with being old.
* /r/ExperiencedDevs is a pretty cool community.  Thank you mods.  You get way less appreciation than you deserve.  Seriously, thank you.
* I probably owe my career, my salary, my life to Reddit.  Reddit gets a lot of shit but the communities here have lifted me out of poverty (working at a gas station earning min wage) to learning Linux, SQL, python, C#, Python, and others to get me where I am.
* Kids are great.  I don't have kids by choice.  Why?  Because I love kids and I'm scared about what kind of father I would be.  Oh shit, is that too personal for a post here?
* Once, someone asked me who I looked up to and I said Conan O'brien, and they laughed at me.  But I was being serous because on [his last show on the Tonight Show](https://www.youtube.com/watch?v=AcF1OoWqXBc), he told his audience to be kind and work hard.  It happend during a difficult period of my life, and when I watched him say that, I said, you know what, I'm going to do just that.  Because what would I have to lose?  And you know what?  I've met some brilliant people who I've learned from over 10+ years because I was kind to them.  And I've grown a lot by working hard and not being afraid to try new things.  And my life is infinitely, infinitely better because of those words.  So yes, it might seem silly and even ridiculous to say that I've achieved a level of fulfillment in my life because of a late night talk show.  But you know what, fuck it, it's my life and I will proudly say that I owe any success I've achieved because a fucking comic on late night television.

I'm highly intoxicated so please disregard anything I say.  Also apologies for ranting.

#### Reply 1 by u/DrMcRobot (332 points)

On kids. Since you've dispensed wisdom, this is the wisdom (I hope) I can offer in return.

I spent most of my 20s and 30s adamant that I would never have kids. I don't remember exactly why - probably that it was simply too much responsibility, too real and too big - too *risky* - a change from what was current and comfortable.

My girlfriend at the time was the same. She knew she never wanted kids. But for her it was a critical component of her self identity. All her friends wanted kids, whereas she almost defined herself by her lack of interest in kids. And so when kids came up, I was indifferent - but she would be *anti* kids to an extent that sometimes made me uncomfortable. She'd express annoyance whereas I'd be like "They're just being kids, albeit I'm glad they're not my problem".

Eventually my girlfriend and I split up. And for a while, I felt like "Finally! Fort the first time in, like, forever I can do what *I* want to do!" And I did. I watched telly. I played *all* the videogames. I had no responsibilities to another human being and for all of a few months it was, indeed, grand.

Then I got the point where I'd cleared the backlog of games, I'd caught up on the telly, and I found myself stuck in a rut. I'd come home after work, and I would just... be bored. I wouldn't know what to do to keep myself occupied until I went to bed. 

I realised that all this stuff, this media that I thought was so important to me... Wasn't. And it was then that I started to really think about what was genuinely important. What I wanted my life to actually be.

10 years later I'm married to an amazing woman, and I have 3 kids (8, 6 and 2). I can't imagine what the me of 10 years ago would think of my life now. Possibly I needed to got that low point to really understand the value of what I have now. My kids are the most amazing shit. They get in the way of me watching telly and playing games... But on the other hand one of them is super into Harry Potter and experiencing it through her is somehow *more* enjoyable than when I experienced it for myself. And the 6-year old can be an Olympic-level asshole, but he's essentially living evidence that predilection for Transformers/Pokémon/videogames/toilet humour is genetic, and all he wants to do is enjoy it with me. And the smallest one, when he's sad, comes for cuddles and it melts my fucking heart. 

And even though looking after them is a *fucking ballache*, it doesn't feel like an insurmountable one, like it did when the fear of having kids was all mixed up with the fear of the unknown. I, like so many fathers before me, have figured it out as I've gone along, and - again, like so many - realised that (luckily for our species) it's not actually as difficult as it might look from the outside. You make it work. And some days you don't, and you feel like shit. And then you remember that your own parents were assholes (i.e. human) sometimes, and they still managed to raise you, right? And your kid still comes to you for a cuddle, and you realise that every time you fuck up, you get a chance to put it right, and that this isn't a one off test but something you can keep working on for - literally - a lifetime. 

I'd never tell someone to have kids. You never know enough about them or their situation. But I would say that sometimes people - like I did - need that little nudge to realise that while "I never want kids" may have been true - and valid - for a long time, that doesn't mean you can't change your mind when you're ready. 

Loved your post.

#### Reply 2 by u/Kaono (146 points)

>Our field is new.  There's no good book on data engineering, just go and "do it". 

Designing Data-Intensive Applications is a pretty damn good book

#### Reply 3 by u/SealClubb3r (260 points)

This is gold. I want more of this on Reddit

#### Reply 4 by u/[deleted] (252 points)

[deleted]

#### Reply 5 by u/TehBeege (52 points)

Hey, this rant is great. Make a blog post out of it. Then send me the link so i can translate it into Korean. Shit is fucked over here at most places. I'm lucky to be at a good place right now, but circulating something like this could go a long way in improving the ecosystem here.

I'll get it translated into Korean anyway, but I'd love to back link to your blog.

#### Reply 6 by u/ToxicPilot (48 points)

Get some more beer. Drunk you just.... just gets me.

#### Reply 7 by u/EuroPolice (23 points)

Dude, I'm a Junior dev really unhappy on my job. You may have been the very thing I need to leave my job and keep studying

#### Reply 8 by u/8EF922136FD98 (37 points)

As a junior dev, I find that's a lot of wisdom. Thank you sir.

#### Reply 9 by u/ApatheticDino (17 points)

Thanks for sharing your thoughts and that Conan clip. I’m glad there’s people out that aim to be better every day

#### Reply 10 by u/AetherAlex (92 points)

It's not illegal to buy a whiteboard for at home. If the advice is invest in good ergonomics, invest in the tools you need at home too. Writing down stuff won't be going out of style. If the other half complains, stick some art to the back of it and flip it around when you're not working.

#### Reply 11 by u/beefz0r (12 points)

Finally someone that can say SQL is king. I came across multiple people that said relational db's are old, slow, have no future and you should use document db's instead. 

They. Mustn't. Be. Compared. They both have their purposes.

Also lol on 'I work in tech but avoid tech' so relatable !!

#### Reply 12 by u/tempo0209 (11 points)

I am going through personal issues myself, here I am just solved some problems on LC(dont hate me please), and wanted to check out Reddit in a break. Boy o boy! loved this post! thank you for your words. I have started becoming kind to others, i started to learn what it means to show compassion, be more empathetic, and still be aggressive in pursuing your goals.Thank you!

#### Reply 13 by u/Hamilton950B (7 points)

On code as legacy: I've been retired several years from a lifetime coding career. Most of the code I've written is gone and no one cares about it. Some of it is still in use inside companies and government agencies but no ones knows about it. A small amount of stuff I wrote is in everyday use, the oldest being from 1982. But half of that has had the authorship scrubbed, or worse mis-attributed. Sometimes I wish I'd been a civil engineer.

#### Reply 14 by u/IppaiPaipaiNonde (3 points)

As a dev whose been doing this for 20 years, this is all that I wanna say but just don’t have the patience to write it all up. My biggest takeaway - I need to drink more 🍺

#### Reply 15 by u/speedfreak31 (3 points)

I can 100% relate to this part (from the follow up comment):

  
*I got into tech and coding because tech was my hobby. Now my hobby is is the same as work and work has ruined my hobby. So now if I want to enjoy tech I need to quit my hobby. Or I need to be OK that tech is no longer my hobby and find new hobbies.*

  
Throughout college I got really into motorcycles. Shortly after, I landed a pretty sweet gig at Ducati. My hobby and passion turned into my work and the line got really blurred. For awhile, that meant that work was fun. But it also made my hobby feel like work.  


Once you get paid for it, it will become a job and some of the fun will disappear. I wonder if prostitutes feel the same way?

#### Reply 16 by u/elus (2 points)

I've found that data engineers/BI developers/ML analysts, and everything in between really need to have a better idea of the underlying systems (file systems, databases, processing frameworks, OS's, CPU, etc.) that their code is running on. 

It's incredible how often we're running into the same problems over and over again and not bothering to figure out how to implement things properly because doing so means taking a peek under the covers. Some people that I've worked with actually revel in their ignorance. There's only so much rebooting or handing issues off to the vendor that one can do before one is seen to be irrelevant. And honestly if we're just spending our day pointing to an ETL workflow to a source on one end and a destination on the other with some light manipulation of the transform in between, how much job security do we really have?

I've found that my competitive advantage against other developers is my willingness to roll up my sleeves and get to the bottom of bugs and other issues we run into in production plus my ability to communicate those root cause pathologies to the rest of my team so that they can learn from our mistakes and managing expectations with other stakeholders. 

Anyways, agree with 99% of what you said above.

#### Reply 17 by u/robberviet (2 points)

I look up to Naruto. Yeah, a fictional manga character.

In that time of my life where it seems nobody pay attention to me, almost like I have no parents: that little boy with a slilly dream and never give up on that dream is really inspiring. 

No shame to say that he was, and still is my idol.

#### Reply 18 by u/83bytes (2 points)

This calms me down for some reason. 

:)

Thank You. 

(a Jr Dev)

#### Reply 19 by u/returnFutureVoid (2 points)

Some of the best advice I’ve ever gotten was from a crack head co-worker. He was crazy but wise.

#### Reply 20 by u/seboll13 (1 points)

Fuck me man. I’ve come here randomly and just lost myself in reading your post. Yeah, I’m quite late but better late than never. Thank you for sharing this, despite being full of beer. Cheers 👊🏻

#### Reply 21 by u/Cemckenna (1 points)

This is all great.

But an addition:

Wear sunscreen.

#### Reply 22 by u/[deleted] (1 points)

Best post ever in this sub, thank you. Drink more often!

#### Reply 23 by u/[deleted] (1 points)

[deleted]

#### Reply 24 by u/soura97 (1 points)

I just want to say that Conan O'Brien has been a huge positive force in my life as well. His words about cynicism and working hard has resonated me and helped me through difficult situations in my life more than once. I just felt like sharing this here although this is not a Conan sub or post.

Thanks a lot for all the career tips as well. Have a great life!

#### Reply 25 by u/shayanzafar (1 points)

You're my hero!

#### Reply 26 by u/vonkrueger (1 points)

Conan also said don't be cynical because it's the worst personality trait on that episode IIRC. That moment stuck out to me as well. Mad respect for the guy.

Also, "anyone" can be an engineer. It takes mad grit (and luck) to be a professional funnyman.

#### Reply 27 by u/1solate (1 points)

You would be a great team lead.

#### Reply 28 by u/flamecrow (1 points)

The kids comment is exactly me.

#### Reply 29 by u/akak1972 (1 points)

You should get drunk more often

#### Reply 30 by u/[deleted] (1 points)

> Our field is new.

Not really. It has existed for over a decade but under different names. Those different names were about something very specific to DE, but just like full stack devs, companies decided to bundle them all together into DE.

> There's no good book on data engineering, just go and "do it".

Kimball's Dimension Modeling, Kimball's ETL stuff, Kimball's other data books

Designing Data Intensive Application

> Can't learn it through a bootcamp and shit.

That might have been true when we were still in school, but recently DE is becoming a hot field and bootcamps are popping out. Still, DE is definitely a field for experienced devs and can't truly become one just by attending bootcamps.

#### Reply 31 by u/sushister (1 points)

I read your posts and I feel I am in a similar place as you are, but something that resonated specially strongly was about being afraid about the kind of father you would be. I had exactly the same feelings, but I took the jump, and now I am the happiest father of the happiest girl in the world. And I've realized that if I try my hardest things will be fine. Obviously just an anecdotal data point, but I believe it's important to share it because it's not something we hear every day.

#### Reply 32 by u/[deleted] (1 points)

These are the sacred texts. Thank you. I hope my career is half as eventful. I'm 2 years in. An exploited full stack web dev.

#### Reply 33 by u/RemusT1 (1 points)

I read everything you wrote. Thank you.

#### Reply 34 by u/80percentofme (1 points)

You’d be an amazing father.

#### Reply 35 by u/Red_Carrot (1 points)

Thank you. This is all solid advice.

#### Reply 36 by u/ClankyBat246 (1 points)

I'm bookmarking this.

Never delete it.  Lots of value here but too much to read at the moment.  
Burgers for dinner tonight.  Priorities.  You know...

#### Reply 37 by u/Raidthefridgeguy (1 points)

I am not at all in your field, but this applies to so much more than software. Thanks for the post. Cheers. I wish I could gift you some Gatorade for tomorrow.

#### Reply 38 by u/JustCallMeFrij (1 points)

Found this comment and post on r/bestof and damn was it deserving.

Also on the point about finding fulfillment of life because of a late night talk show, I think it's more common than you'd think for people to get weird fulfillment from mundane things. When you're down or particularly vulnerable, I think that's when you look for any kind of goodness in the world and latch onto it.

#### Reply 39 by u/Daddysu (1 points)

That was phenomenal.  I think it could help lots of people, even ones not in tech.  

Also, I get the feeling from your post/views that you would probably work out as a pretty good dad man.

#### Reply 40 by u/krista (1 points)

wow! someone else who writes excessively long and interesting posts!


fwiw, i, too, am an old hand at software engineering... started as a girl in 1979 on an apple ii+.


good post.

#### Reply 41 by u/westonc (1 points)

> SQL is king.

Do you have any tips on how to get past beginner/journeyman familiarity with SQL? 

I've been working with half a dozen RDBMSs over a decade and... I feel like I know it OK, but always feel this nagging "maybe I could do better" when it comes to schema/modeling considerations or knowing intermediate-to-advanced query features. And then I check out a new resource and it's "introducing the relational model" and "here's how to do JOINs boy aren't joins tricky right and wait til we introduce you to the mind blower that is fifth normal form" and my eyes glaze over and I start looking for something else.

#### Reply 42 by u/MrVilliam (1 points)

If you haven't already, check out the Conan O'Brien Needs a Friend podcast. I've laughed out loud multiple times while driving because of it. It's a good time and I imagine you'd appreciate it. The recent one with Jake Tapper would be a pretty good one to try out.

#### Reply 43 by u/HerroCorumbia (1 points)

I'm sure you're overwhelmed with responses to this but if you happen to see this, as a business systems analyst (who also does DBA work, ETL work and data analysis), how would you recommend I make the jump to data engineer?

#### Reply 44 by u/TanyIshsar (1 points)

An epic rant full of delightful ideas and insightful opinions. Also pleasurable to read. Thanks for not giving a fuck (or perhaps giving a lot of fucks) and laying it out how you see it. Super valuable. I agree with /u/SealClubb3r, we need more of this on Reddit.

#### Reply 45 by u/DarthNix (1 points)

Awesome, thanks for sharing. As someone who spent way too long chasing a dream(in a theme park environment )  that recently died, how would you suggest getting into the industry (I’m familiar with Linux, sql, and programming basics. I taught myself because of Minecraft but the only certification I have is a Coursera one in data analytics. I’m looking to provide better for my other half and fixing cell phones isn’t going to cut it.

#### Reply 46 by u/glassgost (1 points)

> I've become what I've always hated: someone who works in tech in a career but avoid tech in real life.  Maybe that comes with being old. >

Brother, I'm not a software dev, I work for the phone company. The longer I do it, the more I want to move out so far into the countryside that internet isn't even available.

#### Reply 47 by u/jon98gn (1 points)

As a data engineer/application developer/analyst who stayed way too long at the same company and was recently laid off. Thank you for this. I'm just realizing that I have some true potential, and I really need to leverage my SQL/data engineering ETL skills into not only a better position but also getting paid much more than I was previously.

#### Reply 48 by u/[deleted] (1 points)

You. I like you.

I am pushing 50 and have been in this industry for 25 years and you are bang on. But my experience with Full Stack Developers is the exact opposite of yours. The ones I met only barely understood their tool kit, couldn't design data and didn't understand the execution order of Javascript.

Don't blame them. They came from "We are the greatestests" companies. Always on the hunt for another lib they didn't understand which they got off of Github(last updated September 2018).

Most of the problems you described with management are age-old. When was the Mythical Man Month written?

I got a bullet-point you should add. 

If a company harps on about "excellence", then run. The best people already did. That shit is toxic AF.

You should learn LISP. 

(learn LISP "you should)

#### Reply 49 by u/crazyrich (1 points)

I don’t work in tech but:

Everything you said about changing jobs and managers is true across all fields.

Also the part about being nice. Most of my career has been built on the fact that I’m nice to people, give credit where it’s due, etc. I think the idea that assholes rise to the top is survivor bias for only top level executives, I don’t know how assholes get anything but the bare minimum from anyone.

I don’t know about coding documentation, I work in process management / improvement. What we teach is that SOPs should be as much visual as possible. Write the SOPs as if the person is trying it for the first time. Saying press this button? Snip an inmate of the button and circle it in red.  Fill out this form? Provide a link to said form, a summary of what goes in every field, and an example.

Then go down the hall to your awesome intern and have them walk through it. Since it’s their actual first time, they’ll point out gaps where they got stuck for you to fill out more!

#### Reply 50 by u/RidersofGavony (1 points)

You should write a book, I would buy your book.

#### Reply 51 by u/ghostwhat (1 points)

Manager from devops and dev background here, and most of what I read here is   absolutely true. That quote about good code vs great code vs best code will be used. I want to be your friend.

Edit: that shit about working from with no whiteboard! Man I miss whiteboard sessions.

#### Reply 52 by u/the_geth (1 points)

Hey dude, great posts, also I just wanted to tell you the best fathers I know (including myself) are the ones who were scared to be fathers and/or had shitty fathers.  
My guess is the concern and realization of how important this is (which is why they're somewhat scared) means you just going to do your very best, and make sure you break the cycle of crappy fathers.

#### Reply 53 by u/soobrosa (1 points)

> bootcamp

Totally on point, except there's a bootcamp with graduates we're proud of ;) https://www.dataengineering.academy

#### Reply 54 by u/heharkon (1 points)

Good post, thank you for sharing your guts! Many things I can relate to, some are perhaps pretty location specific, I live in another country so, but yeah good stuff.

On the fatherhood...  Based on your writings (albeit drunk writings) I'd say you'd become an excellent parent. It's clear that you can do self reflection and you are not afraid to learn how to become even a better person in life. There is no such thing as a perfect parent. And also everyone have their own unique ways of being a parent. So at least that question shouldn't limit you from becoming one. Good luck, how ever it plays out!

#### Reply 55 by u/realvikas (1 points)

> I got into tech and coding because tech was my hobby. Now my hobby is is the same as work and work has ruined my hobby. So now if I want to enjoy tech I need to quit my hobby. Or I need to be OK that tech is no longer my hobby and find new hobbies.

This line have feelings.

#### Reply 56 by u/LaochCailiuil (1 points)

"People die" does not imply, you need a legacy. Legacies are for assholes.

#### Reply 57 by u/RUacronym (1 points)

I stumbled on this thread from best of. Happy cake day!

As a fullstack dev myself, this was such an amazing and useful read. So thank you for writing it out. 

FYI regarding the whiteboarding from home problem, have you tried miro.com? My team has switched over to that and while it's not quite as easy as whiteboarding, it's very close. Plus it's persistent and supports multiple people working on the same page simultaneously. Definitely worth checking out imo.

#### Reply 58 by u/thereisnosuch (1 points)

>Airflow is shit, yes. There are other products out there, but fuck me if Airflow isn't the most widely used. 

What other products do you suggest to use?

#### Reply 59 by u/Anluanius (1 points)

Hold up, is jQuery now passé?

#### Reply 60 by u/GapBagger (1 points)

Fantastic post! Thanks for opening up. Highly insightful and honestly encouraging. It's taken me a long time to embrace the fact that I spend most of the week sitting in front of a screen for capitalistic reasons, but after 4~ years in webdev I'm finally starting to appreciate my career choice. Especially with the pandemic. It's a big time sacrifice but the money and skills create a lot of opportunities. Cheers!

#### Reply 61 by u/Big-Clever (1 points)

JAVA NO.1！！！！！

#### Reply 62 by u/redgrammarnazi (1 points)

Highly highly relate to the Conan O'Brien saying!!! It's literally my motto at the workplace and it works like magic!

#### Reply 63 by u/Albert-o-saurus (1 points)

<3  I appreciated reading this so FUCKING much.  Thank you. <3

#### Reply 64 by u/adamk22 (1 points)

This is a gold mine!

#### Reply 65 by u/_ashishmohite (1 points)

u/notionpack

### Comment 2 by u/flipstables (397 points)

Oh man I love the responses.  You all are friggin awesome.  On the whiteboards: yeah it's not the whiteboard per se.  It's the collaboration on a whiteboard.  If it's just about drawing something out, then pen and paper is fine.  It's the collaboration between two people on a shared workspace where you can easily draw out ideas.  It's the "here's my idea but here's the pen what's your idea and shred mine to pieces" workspace.  A shared text editor isn't the same.  And not everyone has a tablet so that a virtual whiteboard works the same way.

Again I'm drunk so maybe I'm just an old fogey.  Anyway, thanks for the replies!  Glad this resonated with a lot of you!  Don't feel so lonely tonight!

#### Reply 1 by u/PsychologicalWorld83 (37 points)

OP, you should try Miro for tech brainstorming! It's a tool for product/business people, but I feel it's the perfect remote whiteboard experience.

#### Reply 2 by u/theclacks (39 points)

Lol, I just posted "I think he means the collaboration" on a whiteboard to someone above, but yeah. As someone who on-boarded remotely during the pandemic and absolutely HATES all the extra barriers to communication, I totally agree.

#### Reply 3 by u/DY_king (11 points)

>You post has been translated to Chinese and is making rounds in the Chinese tech community. I came here to see the original post

#### Reply 4 by u/[deleted] (2 points)

Your post was the best thing I've read on Reddit. Not a developer, just a librarian turned product manager, but this was so fucking informative, thank you.

#### Reply 5 by u/spit-evil-olive-tips (2 points)

best "WFH whiteboard" replacement I've found is [a $20 gooseneck cell phone mount](http://amazon.com/gp/product/B07S9JXQP2/)

clamp it to my desk, then twitst it so my phone is pointing down at my notebook. then I can scribble on the notepad and other people see that on Zoom instead of my face.

still not the same as a true whiteboard where two or more people can pass the marker between them and collaborate on the same diagram, but I like it much much better than any "online" whiteboard I've tried.

#### Reply 6 by u/SaltyBawlz (1 points)

Couldn't you open up paint, share your screen, and allow others to control?

#### Reply 7 by u/MCPtz (1 points)

Laptops are starting to come with touch screens.

The remote screen share white boarding software is there, it's just the hardware hasn't caught up for most developers, unless they use a large tablet just for those types of meetings.

#### Reply 8 by u/egypturnash (1 points)

the stuff I see on my twitter timelines makes me wanna suggest solving the whiteboard problem by getting everyone into vrchat and building a virtual whiteboard there, so you can have the utterly absurd experience of shreddfing each others' ideas to pieces as cartoon characters.

#### Reply 9 by u/nijave (1 points)

I've resorted to pen & paper + phone camera and imo it's worked the best so far. E-whiteboards are just too hard to use (maybe better if you have a tablet or something but mouse/trackpad sucks)

#### Reply 10 by u/Elegant-Interaction6 (1 points)

I'm just happy that there's one person left on the internet who can spell "per se".

### Comment 3 by u/flipstables (247 points)

Update: I'm sober now with a slight red wine hangover. I don't remember writing half of this so it was a trip to read what drunk me wrote. Man, that guy is pretty smart, but he tends to overshare when he rambles.

#### Reply 1 by u/PipMasterFX (26 points)

He’s freaking awesome! Don’t become an alcoholic or anything please but man was drunk you something else.

#### Reply 2 by u/rkeet (11 points)

Was a great read! So many reckognizable things ;-)

About your mixing of wine and beer, we've got a 2-part saying in Dutch: "Wijn na bier, brengt plezier. Bier na wijn, brengt venijn." That loosely translates to: If you drink wine after beer, you'll have a great time. If you drink beer after wine, you'll end up in pain. The latter meaning the day after ;-) 

Thanks for the shares, good stuff!

#### Reply 3 by u/tgsmith489 (2 points)

I think it would be great to get some nice photos and turn this into a little book.

### Comment 4 by u/[deleted] (161 points)

[deleted]

#### Reply 1 by u/ReaderRadish (37 points)

There's also whiteboard paint...

#### Reply 2 by u/professor_jeffjeff (2 points)

A startup that I worked at back in a year that started with "19" had whiteboards for every surface.  Walls had big whiteboards everywhere but every desk and table was also a whiteboard.  It was incredibly useful.  Want to know what's better than a whiteboard?  A piece of plexiglass with just enough space between it and the underlying surface to put a piece of paper or two.  You can throw an actual printed-out diagram or something under the plexiglass and then write over it.

#### Reply 3 by u/[deleted] (3 points)

This is a great idea for a children's play room.

### Comment 5 by u/cstoner (131 points)

> The most underrated skill to learn as an engineer is how to document. Fuck, someone please teach me how to write good documentation. Seriously, if there's any recommendations, I'd seriously pay for a course (like probably a lot of money, maybe 1k for a course if it guaranteed that I could write good docs.)

Someone told me about https://www.plainlanguage.gov/guidelines/ and I honestly think that it's a fantastic resource with regard to writing good documentation.

#### Reply 1 by u/Kinrany (42 points)

Another great link: https://documentation.divio.com/

TL;DR: four kinds of documentation

+ Tutorial: practical steps for learning
+ How-to guide: practical steps for working
+ Explanation: theoretical knowledge for learning
+ Reference: theoretical knowledge for working

#### Reply 2 by u/ccricers (10 points)

There are particular jobs in other fields of engineering that are mostly dedicated to technical writing. Doesn't seem to be enough of that with software, unless it's some big time company that aims to write software for end users (as opposed to software used internally by the company).

### Comment 6 by u/woodland__creature (212 points)

I'm a full stack webdev! I probably don't know what I'm doing most of the time. But I agree I want to be paid more!

#### Reply 1 by u/i-can-sleep-for-days (69 points)

It seems odd that there is a market for full stack. When a projects gets big enough usually people pick back or front and stick to that. It’s great there are people that can jump in and do dB work and next do some html. But why? Even if the person is a god there is a limit to how fast he/she can type. So if you got enough work you need to hire more engineers and at that point instead of hiring full stack you can go 1 front and 1 back and probably get more depth than 2 full stack. Anyone work on teams with only full stacks? What is that like and why did it stay that way?

### Comment 7 by u/pl9870 (246 points)

this is a godly post. I love the authenticity.

#### Reply 1 by u/fried_green_baloney (61 points)

Catches the contradictions in software dev.

Except being decent to the woman and the Black engineers.  Then you're doing God's work.  For realz.

### Comment 8 by u/U235 (133 points)

As an engineer of 6 years I agree with nearly everything you’ve said.

Except the dynamic language appreciation.

Where we throwing down at?

#### Reply 1 by u/flipstables (70 points)

Hahahaha, I knew that would be controversial.  Let's do it!  I'll bring the pistols, you bring the compilers and the extra 20 lines of code that you need to write to get your program to work.  Cheers!

Seriously though, one of my favorite languages is F#/OCaml and I do think it's a fantastic language especially with it's well thought-out type system.  Sometimes I wish Python had a type system like it, but a lot of times I'm glad it didn't.  Doesn't mean strongly typed dynamic programming languages are bad.  I've just come to appreciate dynamic languages a lot more now.

#### Reply 2 by u/metaconcept (30 points)

I spent years in Smalltalk (dynamically typed). It's an amazing language but I got sick of dynamic typing.

What parameters does this method take? Who knows!

Who calls this method? If it has a common name, you'll never know!

What goes here... inside this complicated data structure? Try something and see if it breaks!

What methods can I call on this object? I guess you'll better start reading code, because autocomplete is gimped without typing information.

### Comment 9 by u/revrenlove (178 points)

> It's a shitty programming language that's good at almost everything.

Definitely gonna remember that

#### Reply 1 by u/navatwo (59 points)

Honestly, it's why Kotlin makes so much sense. It's better Java and maintains full absolute cross compatibility (unlike languages like Scala)

#### Reply 2 by u/ProgrammersAreSexy (1 points)

This one is absolute gold

### Comment 10 by u/bentreflection (108 points)

i didn't intend to read all of that but here i am having read it all and enjoyed it. Thanks for the wise words/rambling.

### Comment 11 by u/[deleted] (115 points)

[deleted]

#### Reply 1 by u/VuongP (28 points)

Can someone explain the pandas to me O\_O?

Edit: its just some python library/tool

### Comment 12 by u/renc17 (109 points)

“It’s not important to do what I like. It’s more important to do what I don’t hate.”

Preach my guy preach

#### Reply 1 by u/ViolaSwag (28 points)

Yeah, the counter to "Do what you love and you'll never work a day in your life" is "Do what you love and the thing you love begins to feel like work". Realistically, I think it fluctuates between those extremes on a day to day basis.

If you find something where you feel good about yourself (and aren't exhausted) at the end of every day, and it doesn't feel like it's sucking your soul, that's a pretty good place to be

#### Reply 2 by u/8EF922136FD98 (7 points)

That has been the motto of my life.

### Comment 13 by u/low_burning (49 points)

"those energetic little fucks " 😂😂😂😂. Thanks chief , I am going to be an intern in a month or so.

#### Reply 1 by u/TokenGrowNutes (2 points)

So how’d it go?

#### Reply 2 by u/coolomya (1 points)

Tell us your experience

### Comment 14 by u/Kawaii_Sauce (223 points)

Amazing. Great post.

The shout out to women in tech is nice. We don’t get that enough. I work on a team with 10 dudes and I forget about the gender thing sometimes. A female intern joined this past week and it made me realize how much I miss representation. I hope to be a good role model to her because I wish I had a female mentor.

#### Reply 1 by u/theclacks (53 points)

High five/thumbs up from one female dev to another. <3

#### Reply 2 by u/elus (31 points)

My last team had eight people. Two women, one Chinese and the other Vietnamese. Four males, two Filipino, one Iranian, and one Punjabi. Plus two white males. It was fantastic having such a broad range of talent and diversity of experience.

#### Reply 3 by u/Pineapple-dancer (38 points)

Same! I get so excited on the inside the more women I meet in tech. Yeeeee happy dance!

#### Reply 4 by u/thewallris (46 points)

As a male dev, what’s the best way I can support my female coworkers? My process thus far has been to treat them no different than I would a male coworker, but if you have any ideas I’m all ears!

#### Reply 5 by u/i-can-sleep-for-days (24 points)

In my 10+ years in tech I have ever had one job where my team had a female engineer. And no black engineers. And definitely no black female engineers. 10+ years later it’s the same and actually probably worse. Those woman engineers I think were older and probably grew up during the Cold War and when the country valued science, math, and engineering because that’s how you beat the soviets to the moon, and be a step of them in weapons, etc. back then I don’t think there is such an anti-science and anti intellectualism in the mainstream as what we have now, and hence going into engineering was more accepted than today. I could be totally off but that’s my guess.

#### Reply 6 by u/Lrostro (2 points)

I was lucky enough that my first eng team consisted of four women and two men. I realize how rare that is.

### Comment 15 by u/juli1 (89 points)

"Good code is code that can be understood by a junior engineer. Great code can be understood by a first year CS freshman. The best code is no code at all."  


I approve this message.

#### Reply 1 by u/juiceboxzero (7 points)

And FFS, comment your code.  I don't care how self-explanatory you think it is.  Even if (and this is a **big** if) what it's doing really is self-evident, in 6 months you aren't going to remember **why** it's doing it, and will have to sift through the commit history and pull request notes (if you're lucky) or emails and slack history (more likely) to figure it out.  Meanwhile the new junior engineer doesn't have a prayer.

#### Reply 2 by u/anticlimber (3 points)

My optimization corollary -- not doing something is faster than doing something. Be really sure you need to do something.

### Comment 16 by u/Fabled-Martin (225 points)

This post should be pinned.

#### Reply 1 by u/snowe2010 (52 points)

I am honestly considering it, if not to stop automoderator from pinning two week old "Ask Experienced Devs" threads.

#### Reply 2 by u/similiarintrests (54 points)

Just don’t agree with visual version control .

Why should I spend seconds typing out stuff when I simply press buttons. Software engineers if anyone should know it’s all about efficiency.

### Comment 17 by u/BeastKiller450 (36 points)

What would you get with the $1K for carpal tunnel and your back?

#### Reply 1 by u/ApatheticDino (64 points)

Ergo chair, monitor arms, split keyboard, and a gym membership and physical therapy if you’re already experiencing pain.

Got most of mine off Craigslist from warehouses that bought office equipment from failed startups.

Just like a 401k, you gotta fight to keep yourself healthy in a world that makes it really easy not to.

#### Reply 2 by u/ColdPorridge (13 points)

For a little more: Uplift desk ($700 or so) and Herman Miller Embody ($1300-1500). Some people like the Aeron, but Embody fits much nicer IMO.

#### Reply 3 by u/ReaderRadish (9 points)

Ergo mouse (where your hand is sideways) is great too.

#### Reply 4 by u/AlexCoventry (3 points)

I've been using [Kinesis keyboards](https://en.wikipedia.org/wiki/Kinesis_%28keyboard%29) for a couple of decades. They're good (for me, at least.)

#### Reply 5 by u/[deleted] (5 points)

[deleted]

### Comment 18 by u/[deleted] (67 points)

Awesome post, nodding all the way.

Except for

\> The older I get, the more I appreciate dynamic languages. Fuck, I said it. Fight me.  


Oh... it's **ON.** *\*raises fists\**  


... no but seriously, I've been programming in python for 20 years and the older the get the less I have time for runtime errors that a compiler could trivially catch. It just feels like busy work now. Nothing beats dynamic languages for data exploration and interactive coding, but as soon as I have to put anything into production, give me types please!

#### Reply 1 by u/flipstables (40 points)

Oh dude I hear you!  I **HEAR** you!  The number of times I wished a compile could catch my dumb mistakes that I make... wow!  I love types too (well to a point, I still don't 100% get monads and shit).

Here's the reason I wrote that though. I am constantly frustrated by the runtime errors I get when writing Python that could have been compile time errors.  Even when writing code, man the number of times I wish I knew the return type of a function or the interface of an argument... wow, it's infinite.  But way more times, i've been burned by misreading or misunderstanding a spec or product requirement that types wouldn't have helped.  And there's been a few times where duck typing in Python has made code more readable when working with non-technical analysts writing code, and it's great not having to explain good software engineering practices and it being "obvious" by default.

Again, personal experience.  Doesn't mean yours in invalid, and I think strongly typed static languages are awesome.  I'm a big fan of functional languages myself.  It's probably just a difference in experience, mostly because I have analysts writing pull requests and boy is nice that I don't have to explain which GoF principles they're violating.

### Comment 19 by u/hopets (46 points)

> If they've been a third party recruiter for more than 3 years, they're probably bad.

Recruiters make *significantly* more money if they’re not internal, so I disagree with this.

#### Reply 1 by u/[deleted] (8 points)

Yeah, there's a lot of misunderstanding in that line.
There are some great in-house recruiters of course, but the ones I trust are all 3rd party. Will an in-house recruiter ever tell you why you might not want to work in their company?

#### Reply 2 by u/Sharp-Engineering-74 (2 points)

Float some numbers by me, are we talking 60 vs 120 here?

### Comment 20 by u/null587 (28 points)

You should get drunk more. This is awesome.

### Comment 21 by u/pyrrhicvictorylap (29 points)

> I’ve learned to be honest with my manager

I told my manager yesterday I felt like a human centipede. Not giving a fuck is liberating.

#### Reply 1 by u/[deleted] (4 points)

“We call the new organization chart ‘human centipede’”

### Comment 22 by u/optimal_random (30 points)

If the guy writes like this after pouring a glass, well shit, pour the guy another one, and let's see what other words of wisdom he comes up with! :) 

Nice post, nice post indeed.

#### Reply 1 by u/comfort_bot_1962 (2 points)

:D

### Comment 23 by u/RedbloodJarvey (13 points)

>Fuck, someone please teach me how to write good documentation.

I stumbled on this video which was very eye opening: 
https://www.youtube.com/watch?v=t4vKPhjcMZg

tl;dw:
There are 4 types of documentation. They overlap each other, but if you can keep them separated it will help your users. 

1. Tutorials: learning oriented. Exact step by step instructions to accomplish an exact task.  
2. How-To Guides: Problem oriented. Like a cook book, guides user through steps for common problems.   
3. Discussions: Understanding oriented.  Explain the overall design of the tool, Gives some background and context.  
4. References: Information oriented. Technical description, no need to explain why, just how things work.

#### Reply 1 by u/Monsieur_Pineapple (3 points)

In case someone is still reading this and wants a link to text: https://documentation.divio.com/

### Comment 24 by u/Massless (9 points)

Awww, I really like TDD.

That said: you do you, but PRs should include tests.

#### Reply 1 by u/[deleted] (5 points)

[deleted]

### Comment 25 by u/Scary-Pause-3872 (18 points)

Spunky female intern - that's me!

#### Reply 1 by u/flipstables (20 points)

You go!  Seriously, I'm rooting for you!  It must have been difficult enough to get where you are!  Please please please use any available resource for women in technology.  There's a million ways women in tech are disadvantaged so please use every resource available and don't feel bad about it.

### Comment 26 by u/yodal_ (20 points)

> Titles don't matter.

People care about titles so much because often in our field we don't get any other form of personal recognition. That makes it even funnier that titles don't matter and are often made up. Heck, I can't count the number of times I have gotten a "temporary promotion" for an important call with a client just so my title was at a similar level to the client's technical expert.

#### Reply 1 by u/cswinteriscoming (14 points)

Money is pretty good recognition... you can even buy fancy shit with it so folks outside the company recognize you too, if you're into that

### Comment 27 by u/Sethaman (15 points)

Ah, yes. Developers commiserating.  I'll join that party on an idle Friday.   
\*unlocks filing cabinet, pulls out bottle o' whiskey\* 

Where do we begin...

* We know drinking is bad for us, but there is something to be said for [Ballmer's Peak](https://xkcd.com/323/)
* How many of you have some form of alcohol stored near or your desk? 
* [XKCD is too often painfully accurate](https://xkcd.com/927/), a lot of humor about our profession is 
* It's kind of nice that we can all share in it though 
* I hate programming
* I love programming 
* Programming is amazing... we make the most ridiculous stuff. Seriously it is one of the few professions where "thought becometh thing" feels so close to reality. I mean look at this shit -- someone or some group of gals and guys and non-binary programmers built this thing. Why? Because someone was like "You know what would be rad? If you could be a raindrop and see where you flowed after falling out of the sky". Then someone was like "Huh, I bet I could program that". Does it help society or make money? No idea. It's cool as hell though: [https://river-runner.samlearner.com/](https://river-runner.samlearner.com/)
* A job in coding can absolutely suck -- take a look at this humorous (and mostly hyperbolic) post: [https://gizmodo.com/programming-sucks-why-a-job-in-coding-is-absolute-hell-1570227192](https://gizmodo.com/programming-sucks-why-a-job-in-coding-is-absolute-hell-1570227192)
* But at the same time, there is so much beautiful and mind boggling engineering going on:[https://scienceblogs.com/sciencepunk/2013/03/20/dizzying-but-invisible-depth-jean-baptiste-querus-wonderful-essay-on-the-computers-around-us](https://scienceblogs.com/sciencepunk/2013/03/20/dizzying-but-invisible-depth-jean-baptiste-querus-wonderful-essay-on-the-computers-around-us)
* I should probably stop posting so many hyperlinks
* \*More whiskey\* 
* Seriously, [XKCD is just too accurate sometimes](https://xkcd.com/722/)
* The Command-Line is the shit... I didn't appreciate it in college or the beginning of my career nearly enough
* Same goes for the debuggers built into languages and most IDEs
* Seriously, if you don't know how to use your debugger pour yourself a drink, watch a youtube video, and be blown away at how much more efficiently you can debug. You can run them in the terminal if you prefer and most IDE's let you look at the stack in time with cute little expandable menus for all those variables. BEHOLD THE STATE OF THE UNIVERSE! 
* It is almost like the tool  has been engineered for that very purpose or something 
* But like any tool, they aren't perfect and can't be the only thing we rely on
* I still use print statements (or their equivalent) on occasion when banging out some code
* I still google the simplest "how-to for loop" question sometimes
* Windows pisses me off. At least on Linux, I can usually tell where I broke the computer
* Open source software is so important... yet it is not rewarded nearly enough. Do you know what would happen if OSS just vanished? The world would literally come crashing down. I wish there was some way for private companies using open source software to somehow "reward" it. Micro transactions or some shit like that would be great. 
* Open-source software is so important... yet it is not rewarded nearly enough. Do you know what would happen if OSS just vanished? The world would literally come crashing down. I wish there was some way for private companies using open-source software to somehow "reward" it. Microtransactions or some shit like that would be great. 
* Your code should follow the HBAB (hit-by-a-bus) principle. Like, if on your way to work today you got hit by a bus, your team and buddies should be able to drop into your code,  know how it works, and be able to continue on it without you. Writing code explicitly to be esoteric and hard to understand is b.s. As someone who now hires, I'll fire people for that kind of crap.
* Comments and documentation and docstrings are almost as important as the code and "Self-documenting" code is almost always bullshit. If you can't take the time to write a comment about some function, you shouldn't be writing the function. Fight me. 
* Comments and docstrings and docs are also supremely useful when you need to go back to your own code in 5-months or 8 projects later and fix some screwup you made 
* That being said you can be over-zealous about them. You shouldn't have a comment for a `console.log(...)` line... unless it is weirdly complex or you are referencing poorly named variables
* Please for the love of dog, name your variables well and place them logically in scope. I hate esoteric h@CkeR crap more than I hate managers asking if we can ship the code sooner by adding more resources
* \*finishes glass of whiskey\*
* I should probably get back to work. There are things on the internet to break and build 
* You're good people. Even you windows users, non-documenting code authors (still f.u.)
* Coding/Programming is a craft. It isn't a science. And almost every "Rule" is a rule of thumb or general guideline or agreed-upon state of our current ignorance 
* Please be nice to new coders or people trying to code or learn to code,  the best thing you can do for them and yourself and the industry is to just be human and good to people. That goes for bosses or employees or co-workers or random strangers on the great interwebs. Just be good. These are humans like you afterall. 

Au revoir dear programmers. Keep the code strong

#### Reply 1 by u/dgm42 (3 points)

> Your code should follow the HBAB (hit-by-a-bus) principle.     
I had a developer working once who would give his variables names like MLC (which stood for Main Loop Counter). Of course he wouldn't explain this in the comments as it was perfectly obvious to him. He didn't last long.

### Comment 28 by u/CathieWoods1985 (8 points)

I'm more of a systems / infra guy but do I want to learn webdev so bad

### Comment 29 by u/jimmyco2008 (9 points)

Mine is that a lot of comments in code is a good thing. If you’re doing something complex or frankly worth doing, it’s not going to be “self-documenting”, no matter how good your write it. The difference is in *what* you’re documenting with your comments. I like to comment things like why I did something a certain way, not for OTHERS but for ME when I come back to the code in a month or a year, so I can remember what I was thinking and why things needed to be done a particular way. The kinds of comments you probably should not put are comments that describe what the code is doing, like “// get all users from database” when the line of code is literally “userRepository.GetAll()”. 

I don’t comment for others. I comment for future-me. And I know exactly what future-me is going to be wondering about so that’s what my comments are about. 

Comments don’t make you a bad dev and a lot of comments doesn’t mean your code is bad. It’s not like someone couldn’t figure out what your code is doing but I find the comments make that process easier and faster.

### Comment 30 by u/a_Tick (25 points)

Maybe I just have Stockholm syndrome, but I don't get the git hate. Sure, it's got a crummy UI, but it's got a good model behind it.

#### Reply 1 by u/flipstables (26 points)

Yeah, we devs work with the interface behind it, not the model.  So if the interface is crummy, well that's not nothing.

I'm being overly harsh. I probably couldn't creating something as brilliant as git if I had 150 years to work on it.  So I guess I should be grateful that it exists instead of anything worse, but hell can a dev dream of an intuitive version control system?

#### Reply 2 by u/intermediatetransit (4 points)

Here's what I wish it did a lot better:

* Keep history when splitting files. This is a *frequent* problem that most younger devs don't even realize. A file will grow to a large enough size to warrant a refactor and gets split into multiple files. But now all of the history vanishes.
* Simplify the CLI. I've managed to coach people into using the CLI by showing them the bare bones set of commands one uses 95% of the time. It's so much nicer to use git when one have mastered partial commits and rebases, but that's quite a hurdle to clear for many.

### Comment 31 by u/azzipog (12 points)

What's wrong with pandas?

#### Reply 1 by u/PM_4_DATING_ADVICE (62 points)

They eat tons of bamboo and shit everywhere

#### Reply 2 by u/AetherAlex (24 points)

Numpy, no joke, is 20x faster doing the same work in the same language. Pandas is an exploratory tech that should never be used in a project touched by more than 1 individual customer ever. It scales like matchsticks.

#### Reply 3 by u/ColdPorridge (11 points)

I’ve written about this a lot elsewhere on here when the topic comes up, but it boils down to it being a significant framework that makes absolutely no effort of be pythonic. The zen of Python isn’t fluff, it’s the reason it’s so wildly popular and easy to learn. Pandas basically shits on all of that.

#### Reply 4 by u/flipstables (12 points)

Nothing!  The reason I hate pandas is probably because I don't know it well enough.  Just a drunken post where the author is nothing thinking clearly.

#### Reply 5 by u/sexydorito (8 points)

pandas is overrated imo and the syntax isn't intuitive

#### Reply 6 by u/_intentional_focus (2 points)

Pandas has like 30 ways to do the same thing. The forced indexed nature is non-intuitive. I’ve been burned many many times by null values in integers changing data types (though supposedly this was fixed in 1.0.0). You also write it inside out, compared to something like dplyr.

### Comment 32 by u/CubicleHermit (6 points)

Love it, thanks for the long bunch of thoughts.

> Algorithms and data strictures are important--to a point. I don't see pharmacist interviews test trivia about organic chemistry. There's something fucked with our industry's interview process.

They've got a pre-grad-school test, a licensing exam, and a degree requirement to to do that.  Software engineers, at least in the US, have neither of the former and the last one is so meaningless that basically any bachelors plus a little programming experience will do, and occasionally none.  

> Pair programming is great, it just takes a lot of time--time that the company usually doesn't want to spend.

In my experience, it's the single best way to onboard new people quickly, either to a team's whole tech stack or a new project.  Onboarding via "here's a task, figure it out" is much more expensive.

Speaking as someone who's moved into management these days, telling people to sink or swim in them is much more expensive than actually investing in them.

### Comment 33 by u/bytebux (15 points)

Agree with everything.

One minor call-out: the problem with diversity in the software industry is not the fault of our industry itself. It's the school systems and cultures that exist that don't do a good job supporting and promoting software engineering within it.

The US has done a good job of supporting women in sports, as can be seen by US women's dominance on the global stage.

But for instance, the US men are not the best at soccer because it just isn't as prominent in US culture. There is much more emphasis on NFL football, basketball, and hockey.

Just a sports analogy. 5 cocktails in. Loved the post

#### Reply 1 by u/thekillerdonut (15 points)

One of the female engineers at the school I went to has been making frequent posts about how much of a nightmare it was to just exist at an engineering school full of socially maladjusted dudes. Stalking is such a common thing that it's just understood that if you're a woman at that school, you will have a stalker at some point. Administration does nothing.

It starts even before colleges too, because *something* had to happen to cause that gender disparity in college in the first place. I'm a woman in tech who got started with game modding when I was a kid. The early internet was *incredibly* hostile towards anybody who wasn't cis, straight, white, and male, and (to a lesser extent) still is. The only gaming communities I can effectively exist in are ones I create and run specifically as safe spaces for people like me.

I work at a large, fairly diverse, progressive place, and even then, I am the *only* female programmer I know of. There are others, but they're so few and far between that I have zero interaction with them.

#### Reply 2 by u/MakeLimeade (8 points)

Did you mean to say that the industry itself is blameless? I agree that women/minorities aren't given enough support/encouragement/opportunities to get into the field, but even once they're in, they generally have a shit time.

#### Reply 3 by u/swyx (3 points)

youre saying its a pipeline problem. listen to the women who are experiencing harrassment in our industry and leaving. we have about 40% career attrition by women *after they join the industry*.

#### Reply 4 by u/rejuicekeve (2 points)

i dont think people realize that the lack of diversity is largely due to the fact that kids in these groups are not encouraged to do or love tech or dont have access to it to fall in love with it at an early age

### Comment 34 by u/[deleted] (24 points)

Why no comments on kids in the thread.

  
Have kids. Is the point of having kids that you will be an awesome father?

  
Nope, you'll be a pretty average father who makes some of the mistakes your dad made and invent some new mistakes.

You'll have kids who have hang ups and screw up plenty and drive you crazy, cos they won't be perfect kids.

In other words you'll be a human that gives life and love to other humans. That's it. Nothing else to it.

#### Reply 1 by u/[deleted] (17 points)

[deleted]

#### Reply 2 by u/zvive (6 points)

After 13 years of failure to conceive I was over wanting kids... We were nearly done trying. We were on our 8th round of IVF, and I wasn't even sure I wanted kids anymore...I was just going through the motions cause that's what wife wanted.....

Well rounds 8 and 10 are our two little boys(3 and 2)....

Scares me to think we almost gave up.... I've learned so much, changed so much since becoming a dad.

I'd recommend it all day all night to everyone even if they think they'd suck at it, my kids are everything important in my life.

#### Reply 3 by u/AlexCoventry (10 points)

Everyone else is having kids, and there are plenty of humans.

#### Reply 4 by u/bicyclemom (4 points)

Having kids was some of the best on-the-job training I had for being a people manager.

They cry, they whine, they curse you when they don't get their own way.

My kids did that too.  

As I said, great learning experience.

### Comment 35 by u/Kaizen321 (5 points)

As someone with almost 20yrs in the industry (and still just “developer”, no senior but over 6 figures for over 5yrs...and yes by choice), this is the BEST and MOST real post I’ve read anywhere online.

Anyone with plenty of battle scars was nodding their heads, laughing, sad and probably disgusted cus all of this is mad real. 

Thank you sir for saying everything that’s I’ve been trying to say to others and myself.

OP, I salute you!!

### Comment 36 by u/stefanosd (3 points)

We value static vs / dynamic differently (I will not fight you though). Other than that, I find this post absolutely brilliant.

### Comment 37 by u/Desk1 (3 points)

> Damn, those devops guys and gals are f'ing smart. At least those mofos get paid though.

No we're not.  Nobody knows what they're doing in devops/sre either and we're making it up as we go along just like you.

> Don't meet your heroes. I paid 5k to take a course by one of my heroes. He's a brilliant man, but at the end of it I realized that he's making it up as he goes along like the rest of us.

Everybody has imposter syndrome because everybody is an imposter.  Make peace with that.  Be wary of people without imposter syndrome.

### Comment 38 by u/ejustice (5 points)

On the subject of documentation, here is a fun and friendly technical writing course that you can read and practice the basics. I was the same as you; I knew my documentation sucked but I didn’t realize how bad or knew how to improve. I feel like I leveled up 2 or 3 levels with this very quick course https://developers.google.com/tech-writing

### Comment 39 by u/chinstrap (5 points)

You are not wrong about documentation, which is really hard. There's a chapter about comments in a book from the 90's called "The Practice of Programming" by Pike and Kernighan, An example they had has stayed with me: it was from code for a telephone system, and it had a comment saying that Italy and South Korea get a special value for some flag, and then the code after it does this for like Italy and Brunei. Which is wrong, the comment or the code? A typical scenario is that the code got updated, in response to change, but no one changed the comment. So guess the code is correct. But, they ask, that aside, why are two seemingly unrelated countries given special handling? If it's because they still haven't switched to center-negative enturbulator connections in their phone switches, then the comment should say that.  Just having a comment hanging there with no explanation is almost pointless - you can see from the code that there is a special case, and the comment gave you no information. It's basically an "increment the counter" comment, except that it serves some purpose by calling your attention to there being a special case in the codebase.

### Comment 40 by u/KaleAway (7 points)

This is like Homer’s epic but for programmers.

#### Reply 1 by u/Optimus_Oteptron (3 points)

Laughing so hard at this!

### Comment 41 by u/PnutButrSnickrDoodle (3 points)

I hope Lena reads this. I enjoyed your post flips. Thanks for the insights.

### Comment 42 by u/penuserectus69 (3 points)

This was soul cleaning. Like listening to an awesome song and the lyrics are uniquely applicable.

### Comment 43 by u/mousiechika (4 points)

I love this

### Comment 44 by u/kitahey (5 points)

Incredible post. Love the authenticity and the humility that sparkles through

### Comment 45 by u/[deleted] (6 points)

[deleted]

#### Reply 1 by u/_intentional_focus (2 points)

We phrased this the other day (a bunch of DE and DS people) as pandas is better than nothing, but only slightly.

### Comment 46 by u/austin987 (6 points)

Also 10 years in, also drinking, and damn man, wish I had read this years ago (along with 'The Pragmatic Programmer').  


Cheers!

### Comment 47 by u/knarlygoat (5 points)

As a junior dev who had a fantastic mentor and came from an aerospace engineering background here's my advice on documentation:

* Start it at the beginning. I mean like even before you write your first line you should have a basic flow diagram of how you expect things to look.
* What's that you say? You aren't starting a new project? Yours is 10 years old and there's almost no documentation? Well when's the second best time to plant a tree? Today. Start writing your own documentation and show it off during your merges. Go around and ask the other devs to share their documentation with you. Everybody writes stuff down whether it be for designing or to help them remember, sometimes it just takes someone willing to put it all together.
* Make updating your docs part of your merge process. Yeah you don't need or want to add every change to it, but at least have them read through the relevant portions to make sure they didn't miss anything.
* Just write shit down. Formatting documentation is great for delivery but how many times have you looked at the index of your documentation instead of just doing a Ctrl + f? If you learn something interesting about the code. Write that shit DOWN. Take a minute to see if a relevant section exists, If it doesn't then just make a new section and write it down. You or another dev will thank you later.
* Flow diagrams and block diagrams > words. I have yet to find a paragraph that explained something more clearly than a picture in software. Yes they often go hand-in-hand and more often than not they should. But if you have to choose which one to start with, choose your block diagrams and flow diagrams. Use block diagrams to capture complex objects, if I have a class that has multiple layers of child classes beneath it, I make a giant block and a bunch of smaller blocks within it, then add a brief description of each class, and use arrows to show important dataflows. I haven't found a way to show inheritance clearly though. Block diagrams are also great for visualizing dataflow through a system, and for simple objects that have a unique purpose (as is often found in "clever" or opaque code)
* Use color. When you're making your diagrams take a few extra minutes to color your blocks. It makes it look less scary, more readable and honestly who doesn't love playing around with a digital paint palette?
* Write your documentation for your devs, not your customers. You guys are the ones using it so write it so it makes sense for you.
* Make it easily accessible and searchable. I've been doing everything on confluence. Yeah the version tracking is virtually non-existent, but if the documentation is just designed to show the current state of the code then who cares? If you want to do version tracking, then export it and track it with your repo I guess? I still haven't found a good way to do that with formatted docs.
* Lead from the front. Everyone should be doing documentation and that starts with your lead or architect or whoever everyone on the dev team looks to for guidance. If they see that the lead is documenting then they will too.
* Don't make it mundane. If you aren't delivering the docs then there's no reason it has to be professional. A friend of mine who was a sailboat captain told the crew he was training that they could write anything they wanted in the log as long as they still logged the important stuff. I tell my team a similar thing. You can write whatever you like in it as long as it captures what the code is doing.

I hope that helps. If anyone wants to talk more about it or critique or add to this please do. I just started as a lead on a team of 4 including myself. We were given a side project and I just kinda ran with it. So I'm just taking what I've seen work in the past and trying to use all that to guide my team now.

#### Reply 1 by u/dgm42 (2 points)

To repeat a comment I made above: document the data. The code comments can explain what the code is doing with/to the data but you need a good set of database documentation to understand *why* the code is doing what it is doing.

#### Reply 2 by u/kumarFromIT (1 points)

Verbosity is an issue with jr devs. No matter how good the info, keep it short. We've got 1M things, no time.

### Comment 48 by u/King5lay3r (3 points)

Its morning here and I can already say confidently that this is THE BEST post I will be seeing all day or maybe even a week. Thank you so much

#### Reply 1 by u/kumarFromIT (2 points)

This is going to be top all time post of this sub. Unless we pour OP another glass!

### Comment 49 by u/pizzapplepine (2 points)

I've saved this post, please don't delete it when you are sober.

### Comment 50 by u/PersonBehindAScreen (2 points)

This is my first bit of participation in this sub. I'm a sysadmin who wants to become a dev. I've found myself being on r/cscareerquestions and r/learnprogramming less and less and lurking on this sub more observing more sane conversation based in reality. Thanks for this my dude!

### Comment 51 by u/angorodon (2 points)

> The greatest programming language ever is lisp. I should learn lisp.

Learning Common Lisp over the last 6 months has, without a doubt, been one of the best things I've done for my thinking as an engineer over the course of my 15 years in software. Seriously, it's that great. I started with this [amazing roadmap laid out by Steve Losh](https://stevelosh.com/blog/2018/08/a-road-to-common-lisp/). There's also a great community over in /r/Common_Lisp that is very helpful and filled with extremely knowledgeable and helpful folks.

### Comment 52 by u/ejly (2 points)

Great write up. If you want to help women and other historically underrepresented people in this field, speak out against the things that make it hard for us. If you hear someone say something disparaging, commit a micro aggression or an aggression, a demeaning or disrespectful action of statement - call it out. Ask for clarification of the action or statement from the offender at the least - the act of explaining may cause them to reflect and rephrase, which is cool. In other cases, allies who can support someone making a complaint by acting as witness are priceless. Thanks in advance for your support.

### Comment 53 by u/neophene (2 points)

I think you know you have reached the Sr. Engineer level when you give polymorphic advice at all times.

Simultaneously insightful, serious, suicidally sombre, and gleefully irreverent with a mix of humour and sarcasm as your interface.

### Comment 54 by u/ellequoi (2 points)

Thanks for sharing, that is a helpful perspective to learn from. I’ll try to repay the favour by passing along some documentation tips. I haven’t found a good course on it either, but I do work in support and improve our client-facing doc whenever I have time, often based on user feedback. Sorry if any of these sound too obvious or aren’t applicable for your specific audience, but hopefully they will help someone.

Think Cotton-Eye Joe for the topic being documented:

- where did it come from (input-wise)

- where did it go (output-wise)

A lot of the questions we get are related to the above eg what field in the database was involved, what conditions triggered a calculation/omission. Keeping the requirements and expected behaviour up-front is key, as well as any limitations.

I often get the answers from fumbling through the code (I’m the “great code” target market), but in an ideal situation, I’d pair with devs and have them talk me through each portion of the code in plain wording. So if you can imagine scrolling through what you’re documenting and saying aloud to someone less technical, “This is where we do _______ with _________ because of _________ so that ________,” then that’s a good start.

Remember that someone without your foundational knowledge or experience with your organization may be wandering across your doc years later after you go, so you can’t assume that context that is obvious to you will be so to the future user.

Breaking things down into smaller sections is a great way to build from scratch as well as being more readable. Bullet points, even/especially nesting ones, are also one’s friends when documenting. Long paragraphs will cause folks to skim past more.

Providing examples for things needing the user to input a string, one with the structure and one with an actual instance of input, is great, too. In terms of other examples, I try to consider the scenarios that clients are most likely to use and incorporate that.

Outside of the “feed X in to get Y” type circumstances,  “did you know” factors may be nice to include, eg the file name structure of what will be output.

If something is getting too cumbersome to explain, it may help to reframe, say by setting up a table or diagram.

Screenshot-wise, I often need to see the relevant parts of the program involved, or else the documentation feels somewhat meaningless and unmoored. I shouldn’t need to ask myself, “Where’s that button I’m supposed to press?” It should be described fully *and* shown to me. There’s an art to good screenshots:

- hide unnecessary components, eg the ribbon if it’s not part of what needs to be shown

- provide a big enough screenshot to show context so that it’s clear what part of the program is being used, or use text to explain the source

- manually resize things as needed to cut down on useless white space that might stretch out the screenshot

- fill in options as needed to share as much relevant information with the user as possible. For example, if the doc is about selecting settings, filling that whole dialog box out such that conditional menus will appear or settings you’ll talk about later are present is best.

- focus on features of note when screenshotting, eg by strategically positioning the mouse over a specific button so it stands out, highlighting/selecting a certain line of code, getting a tooltip to appear, or simply annotating after the fact like by drawing a rectangle around the feature

If something like a dev tool is what’s being documented, a description of a specific feature’s options might be more relevant than a screenshot, though. I have to consult our third-party tool dev documentation sometimes, and it’s not always clear to me what a certain option means until I try it.

So basically, anticipate any follow-up questions when you write, break things down into smaller components, add relevant examples and descriptions (more than you might think you need), pick different methods of presentation if one isn’t working, and include illuminating screenshots.

### Comment 55 by u/SploogeLoogie (2 points)

> There's not enough women in technology. What a fucked up industry.\

news flash: it's not "the industry's" fault. There is no emotion or social bonding in tech, **That's why** there's no women. Don't believe me yet, "drunk guy"? Why are there so few MEN in bridal salons, day care centers, nursing, etc? Those are either "fucked up" industries or my explanation is true (or maybe women are just as sexist as we are accused of being?)

### Comment 56 by u/MrFibuli (2 points)

Ffs, write a book and take my money

### Comment 57 by u/konhaybay (2 points)

Awesome post. I like your honesty.

### Comment 58 by u/fean9r (2 points)

>Technology stacks don't really matter because there are like 15 basic patterns of software engineering in my field that apply. I work in data so it's not going to be the same as webdev or embedded. But all fields have about 10-20 core principles and the tech stack is just trying to make those things easier, so don't fret overit.

I would love to have a list of the basic patterns!

### Comment 59 by u/Small-Zucchini1610 (2 points)

Justice for Lena

### Comment 60 by u/pinkfluffymochi (2 points)

We gotta get OP more wine to keep such phenomenal posts coming

### Comment 61 by u/fzammetti (6 points)

Man, I could have written all but one of two of them myself.  Damn near perfect, sir!

And 100% agree, fuck Git.  I too have no choice but to use it at work, but I HATE it and I don't care who gets offended.  Someday, as an industry, we're going to look back on the mass migration to Git and wonder what in the blue hell we were all smoking.

Although, that said, gimme TortoiseGit over CLI any day of the week (or the client built into IntelliJ IDEA... typing ain't all it's cracked up to be).

#### Reply 1 by u/Addicted_to_chips (11 points)

What’s wrong with git? I’ve never use anything else but it seems fine to me.

### Comment 62 by u/[deleted] (3 points)

[deleted]

#### Reply 1 by u/flipstables (16 points)

He was a math PhD who used to work at a hedge firm but then worked for a casino.  The reason he was my hero was not because he was damn smart (he was), but it was his ability to translate or communicate complex ideas to people with perhaps a high school education.  No seriously, a lot of casino general mangers did not have a good formal education.  Though they were smart people, they didn't have an appreciate for, say, machine learning or artificial intelligence.  Yet this person was able to not only communicate those ideas but also convince them that those ideas are best.  Watching it seemed like magic.

### Comment 63 by u/siqniz (3 points)

Great post, I read the whole thing. I can def identify with a lot of what you said and the others I'll be on the look out for.  
The women not in dev/engineering, Its always seemed to me they don't want to. I've noticed that to. I'm a black dev, it's fun when I can bring my un-fettered style to a team, it catches them off guard and it's a lot of fun  
Cheers Mate

### Comment 64 by u/FishermanNo9597 (4 points)

Awesome post!!!  Hope your glass is forever full!

### Comment 65 by u/[deleted] (4 points)

agree most of them except the dyanmic lang and full stack one. imo for dynamic language you need documentation to be very good otherwise things can messy easily. and i have worked with atleast 30 full stack engs from faang to regular one and most of them are basically front-end end dev with doing minor tweaking in the backend.

### Comment 66 by u/mindbane (1 points)

Senior dev here checking in (nearly 15 years I'm the byte mines) /u/flipstables makes solid points. Particularly ones about learning soft skills, and avoiding trend hopping.

### Comment 67 by u/TotesMessenger (1 points)

I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/theprimeagenreact] [The most upvoted post on \`r\/ExperiencedDevs\` subreddit (Drunk Post: Things I've learned as a Sr Engineer)](https://www.reddit.com/r/ThePrimeagenReact/comments/1bmi7y1/the_most_upvoted_post_on_rexperienceddevs/)

&nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*

### Comment 68 by u/Any_Agency_6237 (1 points)

>I had a girlfriend in 8th grade that I didn't want to break up with even though I didn't like her anymore so I just started to ignore her. That was so fucked up. I'm sorry, Lena.

  
god i read it as i have a girlfriend in 8th grade

### Comment 69 by u/Kitchen_Moment_6289 (1 points)

Still good 3 years later. Thank you.

### Comment 70 by u/LAGameStudio (1 points)

What's funny 4 years later is, now no one can find a job and AI is going to do all of our work for us, and absolutely no one is allowed to work from home, salaries have been cut in half after doubling, as has staff, and there is no end in sight except a melt up future of hyperinflation.  The number of frameworks you need to know is a unicorn-value of 20 per job now, and what was once apps and databases morphed into data analysis and is now ML and LLMs (AI).  Oh, and the advice to learn SQL is dated.  NoSQL has taken over and GraphQL just blew your mom.

### Comment 71 by u/ussliberty66 (1 points)

I don’t know how I landed here, but it was a joy to read it!

### Comment 72 by u/rsx0806 (1 points)

how much I wish I read this 4 years ago .. love it. thank you sir

### Comment 73 by u/Onceahippie21 (1 points)

I’m not an engineer and I don’t even remember what I was reading that brought me to your “Drunk Post“. It took several days to read the whole thing because I spent a lot of time going to Google to find out what you were talking about. You may not be good at writing documentation or proposals for changes, but you should write more, even when you’re drunk. You provided some serious food for though, not just for newbie engineers but also for life in general. Don’t have any regrets about posting the above. You wrote truthfully and showed your critical thinking skills, as well as a good amount of humor. I wish someone had given me your advice when I was just starting my career. Thank you!

### Comment 74 by u/Fee_Accurate (1 points)

Folks, many ppl have no idea how GOAT this post is, esp when we flash back the road we passed.

### Comment 75 by u/Mental_Forever_3714 (1 points)

[https://voidforums.net/](https://voidforums.net/)

### Comment 76 by u/Alive_Tax_2242 (1 points)

Wow.

### Comment 77 by u/maritocracy_lage (0 points)

Also drunk. Also about a decade in. I prefer beer, and I work in storage.

Mostly good advice, modulo the following:

Qualities of a good manager share a lot of qualities of a good engineer.

What? No.

.  If you're not sure what you want to do, just do Java. It's a shitty programming language that's good at almost everything.

Java is awful. It's actually decently designed, but it's shitty at everything. If you don't know what to use, use python or javascript (or Typescript). Java shops turn prodigies into putzes. Java people do things like "Dependency Injection" and "Calling dictionaries with dots in their keys 'trees.'" Java is class-oriented. Python it object-oriented, they're very different. Javascript is python with a worse standard library and a faster runtime. Their data models are the same. Fite me.  Solid python/JS programmers are as common as java ones, and solid python/JS takes 1/3 as long to write and 1/10th as long to pivot. Different styles of usage synergize a lot better, so two python/JS devs who disagree on an implementation detail can work together much more easily. You said yourself dynamic languages are awesome (they are, this is why), why are you recommending a static one?

\>The greatest programming language ever is lisp.  I should learn lisp.

Lisp is cool, but it's overrated and unpragmatic. It's good idea taken too far, and it's only pragmatically useful in that learning to deal with its minimalism will sapir-whorf you into being a better programmer. If that's what you want, learn APL. It's the best mindfuck there is.

\>I know enough about security to know that I don't know shit about security.  
Yes. This. So much this. Nobody knows

That being said, git is awful and I have choice but to use it. 

At least it's not mercurial, or perforce, or TFS. Git is awesome because there's \_no\_ \_way\_ to get yourself into a corner of "Oh shit, how do I get back to where I was". \`git reflog\` has saved my ass \_so\_ many times and I would trade my left nut to have it back.\*

\>Fuck side projects.  If you love doing them, great! Even if I had the   
 time to do side-projects, I'm too damn busy writing drunken posts on   
reddit

Sounds like a side project. 

\>Not all great jobs are in Silicon Valley. But a lot are.

Not all overpriced apartments in a monoculture of people like us are in Silicon Valley, but a lot are.

\>I don't know why full stack webdevs are paid so poorly.

They're common.

&#x200B;

\*This is not actually an open offer. I've already got it with some shell aliases and running \`git init\` in an HG repo. Coloring outside of the lines rules, just don't be proud of it.

### Comment 78 by u/permanentlytemporary (1 points)

chief shocking mountainous subsequent society dependent adjoining important plate imagine

 *This post was mass deleted and anonymized with [Redact](https://redact.dev/home)*

#### Reply 1 by u/Nexuist (12 points)

Not OP but I’m guessing OP meant whiteboarding with coworkers not just drawing diagrams alone. Having the ability to lock yourself in a room with a bunch of dudes and stare at shitty marker drawings for several hours is a euphoric experience.

### Comment 79 by u/[deleted] (1 points)

Fucking preach it brother, love this post.

### Comment 80 by u/[deleted] (1 points)

This is exactly what I needed right now so thank you for this incredible post!

### Comment 81 by u/[deleted] (1 points)

yes

### Comment 82 by u/3irj198hj98iuwqhua09 (1 points)

I love this. Thank you.

### Comment 83 by u/GordanFr33man (1 points)

Well said. Agreed with a lot of it.

### Comment 84 by u/anishredd (1 points)

Lots of great advice, thanks!

### Comment 85 by u/LegendaryCoder1101 (1 points)

Wow, thank you for this. I would get you a beer if i could

### Comment 86 by u/[deleted] (1 points)

You’re the cream of the crop my guy. Great post. Being a webdev/full-stack, I appreciate the call outs 😂

### Comment 87 by u/Pineapple-dancer (1 points)

Love this post! Read every word. Thanks for being real and giving good advice!

### Comment 88 by u/Effective_Youth777 (1 points)

OP, I'd like to buy you a drink

### Comment 89 by u/[deleted] (1 points)

This post should be made into a book.

### Comment 90 by u/immor7al (1 points)

I enjoyed this post a lot, cheers.

### Comment 91 by u/MrTrainman (1 points)

\+1 to fuck pandas. love/hate that fucking library.

### Comment 92 by u/csthrowaway009 (1 points)

I’m only a couple years into my career, so thank you for writing this! It seems you have a lot of really great advice/life lessons I could learn from.

### Comment 93 by u/redsoxVT (1 points)

Fullstack web dev, agree with your statement there. Just switched jobs from Sql/java/jsp to nosql/go/angular... opposites in nearly every way. My head aches all week and all weekend I try not to think at all. 3 day weekend... brain happy!

### Comment 94 by u/Preact5 (1 points)

Dude fucking awesome post!!! Saved.

### Comment 95 by u/midasgoldentouch (1 points)

Yes, I would like to subscribe

### Comment 96 by u/brunoliveira1 (1 points)

This already made my subscription to this specific sub absolutely worthy!!!! Awesome content!

### Comment 97 by u/L0rdB_ (1 points)

Love the DevOps shout out!

### Comment 98 by u/comeiclapforyou (0 points)

yes, fuck pandas. SQL forever

Edit: at this point, pandas is basically a red flag for me for jobs — it means the data isn’t big enough to need a proper DWH and ETL pipelines 

And if I needed to extract features for training and test sets I would also do it in SQL / Airflow

#### Reply 1 by u/menckenjr (2 points)

Especially shops that insist you do everything in PySpark and don't want you to use Hive SQL...

### Comment 99 by u/[deleted] (0 points)

[removed]

#### Reply 1 by u/MaxwellzDaemon (1 points)

I was going to reply to give kudos to the original post but must chime in to call BS on this crap.

I've probably been coding longer than any of you - approaching 50 years more or less - so I have a long perspective.  For instance, on the first piece of BS above, 

> Have you never looked into sex differences in psychology?

when I started in the field, it was probably 30 or 40% female.  That was back when there was almost no one with a CS degree working in the field.  I suspect the long, discriminatory pipeline one now goes through has a cumulative effect.

As for the 2nd steaming pile of BS, this racist crap is exactly what we need to push back against.

</rant>

On less important matters, just to chime in on dynamic languages, with which I have worked much of my career, I'm still wondering what is taking the rest of you so long to figure this out.  Some have mentioned how young the field is as an explanation for how little we know but it's much worse than that since most people ignore much of what we have learned in favor of the new shiny thing which changes every few years.

For instance, related to the dynamic languages theme, there are studies from the 70s and 80s showing clear productivity benefits of intrepreted, interactive environments.  This sort of environment has always been part of the dynamic languages with which I've worked (APL and J).

To make money, I have had to work in the clumsy static language + compiled environment where many of you still live.  It sucks.  When I have had to do this in recent years, I'll size up a small task that would take me 15 minutes in my preferred environment and hope I can finish it in only a few hours.  Sometimes I'll even write the J code first in order to help me verify the results I will (eventually) get in the compiled world.  I only learned of the term "REPL" in the past 10 years or so even though that's what I've used almost from the start because it's so clearly superior I didn't know we needed a word for it.

One of the good comments exhorted you to learn how to use your debugger.  Yay!  But why does someone have to bring this up?  You mean your debugger is not simply another aspect of your interactive programming environment as it has been part of mine since the 1970s?

I could go on and on but I'm stone-cold sober and that's enough for now.

#### Reply 2 by u/snowe2010 (1 points)

Thank you _I_H8_R3DD1T_ for your submission to /r/ExperiencedDevs, but it's been removed due to one or more reason(s):

---

# Rule 5: Disrespectful Language or Conduct

Do not be a jerk. Act maturely and respect others the way you wish to be respected. (That's a cheesy saying, but it does have meaning).

_Racism, unnecessarily foul language, ad hominem charges, etc. are not tolerated here._

Do not submit posts or comments that break, or promote breaking the Reddit [Terms and Conditions](https://www.redditinc.com/policies/user-agreement) or [Content Policy](https://www.redditinc.com/policies/content-policy) or [any other Reddit policy](https://www.redditinc.com/policies/).

Violators will receive a warning, then a 7 day ban, then a permanent ban.




Please feel free to [send a modmail](https://www.reddit.com/message/compose?to=%2Fr%2FExperiencedDevs) if you feel this was in error.

### Comment 100 by u/freework (-5 points)

> The most underrated skill to learn as an engineer is how to document. Fuck, someone please teach me how to write good documentation. Seriously, if there's any recommendations, I'd seriously pay for a course (like probably a lot of money, maybe 1k for a course if it guaranteed that I could write good docs.)

I disagree. Documentation is overrated. If you know how to read code very well, then you'll never need documentation ever again.

> I don't know why full stack webdevs are paid so poorly. No really, they should be paid like half a mil a year just base salary. Fuck they have to understand both front end AND back end AND how different browsers work AND networking AND databases AND caching AND differences between web and mobile AND omg what the fuck there's another framework out there that companies want to use? Seriously, why are webdevs paid so little.

"front end" and "back end" are arbitrary distictions anyways. Programming is programming. I'm a full stack developer myself, and I don't think what I do is any special than what any other developer does.

> Tests are important but TDD is a damn cult.

The TDD cult peaked in 2010, when I was first starting my career. These days it's not a prevalent as it was before. I agree that TDD is overkill. There is nothing more annoying than TDD fundamentalists.

> Managers have less power than you think.

Power comes from personal relationships. If your manager is an old high school friend of your CEO, then your manager has ALL the power. If your manager is golfing buddies with the CEO, then he has all the power. If your manager was hired off Indeed.com just like you were, then he has no more power than you have.

> If I ever find myself thinking I'm the smartest person in the room, it's time to leave.

The problem with this is that the smarter you get, the dumber the rest world gets by comparison. The smarter you get, the harder it becomes to find another person smarter than you. I've resigned to the fact that I'll never have another co-worker that is smarter than me, and I'm OK with that.

> I know enough about security to know that I don't know shit about security.

This pisses me off. I don't believe security is a distinctive skill separate from programming itself. If you're good enough of a programmer to understand what a SQL-injection attack is, and you know how to mitigate it, then you're good enough to call yourself a security expert. All security vulnerabilities are in the form of sending invalidated arbitrary input into some form of an `exec` function. The problem is that the security industry has done a very good job of convincing the masses that computer security is a massively complicated topic that only mega geniuses that spend 8 hours a day reading whitepapers can begin to understand. It's sad to see that so many people fall for this propaganda.

#### Reply 1 by u/[deleted] (2 points)

>I disagree. Documentation is overrated. If you know how to read code very well, then you'll never need documentation ever again.

Then you'll always know what the code does, but not why it does it.

#### Reply 2 by u/decawrite (0 points)

Documentation is important. Even if you "know" how to "read code very well". Or maybe especially so - you're not going to be the only person who ever reads that code.

### Comment 101 by u/maulikjs (1 points)

You sir are awesome. As an early career engineer still trying to figure life out, I gotta admit this was gold and it resonated with some of the things I have been thinking. Thank you and cheers.

### Comment 102 by u/nutrecht (1 points)

I think this is an amazing post and I agree with it (as well as your follow up) pretty much 100%. Just this bit alone:

> The best code is no code at all.

Sets you apart from the vast majority of developers.

### Comment 103 by u/Quadraxas (1 points)

10+ years dev & startup founder here, agree with most of it.

### Comment 104 by u/letsgetrandy (1 points)

You're speaking every thought in my mind.

I want to be your friend.

### Comment 105 by u/[deleted] (1 points)

This is gold.

Please, please, PLEASE, write more when you're drunk.

Thanks for sharing!

### Comment 106 by u/yolower (1 points)

Thankyou good sir!!!!

### Comment 107 by u/[deleted] (1 points)

Thank you for this write up, somehow reading it made me feel better and feels like some weight has been lifted off.

### Comment 108 by u/phantaso0s (1 points)

Coding for 20 years, 10 years professionally.  

I agree with everything.

Even the dynamically typed language preferences.

### Comment 109 by u/diamondketo (1 points)

Junior data eng here, mostly work in Python. Thank you for the rant.

Lol Pandas, it's not bad but boy do I have a love-hate relationship with it.

### Comment 110 by u/leo9g (1 points)

Yo, loved the post, curious stuff :). It is sad though, I feel like all them salaries are more of an USA thing. Here in Europe salaries aren't quite that high.

#### Reply 1 by u/comfort_bot_1962 (1 points)

Don't be sad. Here's a [hug!](https://media.giphy.com/media/3M4NpbLCTxBqU/giphy.gif)

#### Reply 2 by u/kraalar (1 points)

Except in Eastern Europe. There a programmer's salary is like 5-10 times the average one.

### Comment 111 by u/Netmould (1 points)

Fuck Airflow, Spark Streaming, Flink, Kafka Streams (at least part of it about stream processing).

Get me basic Kafka, Hbase, decent team, 6 months, and I’ll build my own thing with blackjack and beaches. 

Sadly everyone in enterprise wants to use proven products (there is so much bullshit in ‘proven’ word regarding data streaming…).

### Comment 112 by u/[deleted] (1 points)

[deleted]

#### Reply 1 by u/elus (2 points)

Apply and then either get the job or don't. If it's the latter ask what skill sets you're missing.

It's just like any other specialisation in software engineering. There'll be frameworks and processes to learn and the scale which the organization you're applying to operates in will determine the tools used but many of those skills are transferable so you probably have a good chunk of it already.

### Comment 113 by u/Dallaluce (1 points)

Hey man, this post was so helpful to me as a relatively young person breaking into the data engineering world. Even your very personal tidbits were so insightful. You should get drunk more often 😊

### Comment 114 by u/akmjolnir (1 points)

I'm not in a field remotely close to anyone in this sub, but I read the entire post, and there's a few universal nuggets of wisdom that I enjoyed thinking about. Thanks for taking the time to post. 

Make sure you drink enough water; wine is great but it gives the worst hangovers.

### Comment 115 by u/drinketha (1 points)

For your cushy gov't job you described the contractor job.  Govies will not hire you at a competitive salary.

### Comment 116 by u/GraduallyHotDog (1 points)

` Fuck pandas ` I feel that in my soul

### Comment 117 by u/bentinata (1 points)

I don't drink, I'm not as experienced, and I don't usually comment here. But this is really nice and thoughtful.

### Comment 118 by u/spon000 (1 points)

You've just written my Holy Grail sir. I salute you!

### Comment 119 by u/TheStuporUser (1 points)

As a full stack developer, I really appreciate that you think I should be paid half a million a year.

### Comment 120 by u/ravepeacefully (1 points)

Dude this is the best post I’ve ever read I think. I’ve been using Reddit for a long time too..

### Comment 121 by u/FredMcCree (1 points)

Man thank you for sharing. You speak the True True.

### Comment 122 by u/SWPhysics (1 points)

SQL as a high schooler? Possible?

### Comment 123 by u/[deleted] (1 points)

Huh.  No mention of [Stevey's Drunken Blog Rants](http://steve-yegge.blogspot.com/2006/09/good-agile-bad-agile_27.html)?

### Comment 124 by u/Vox_Carnifex (1 points)

Laughed out loud on Jenkins. Propably the biggest piece of shit ever but damn if it doesn't get the job done. The typical "fuck you and I will see you tomorrow" relationship. Same for me with clarify and  soapUI.

I am wondering though: I am currently young in the field of software testing. Technical, E2E, automation, I can branch out. However, what are fields you would reckon you can transition to from testing?

### Comment 125 by u/easyEggplant (1 points)

> That being said, git is awful and I have choice but to use it.

Magit, is a wonderful tool.

### Comment 126 by u/StaticMaine (1 points)

There’s some really good shit here

### Comment 127 by u/[deleted] (1 points)

If only my drunken college essays were this organized

### Comment 128 by u/sizzlinbeefdogz (1 points)

This’ll guide me throughout the rest of my CS career. Thanks dad

### Comment 129 by u/katt3985 (1 points)

Thanks for this. It's good. I still think I've ruined my life going into this field though.

### Comment 130 by u/maneinblack (1 points)

This is probably my favorite post on this or r/CSCareerQuestions ever.  Appreciate the insight, you seem like a very well balanced mind!

### Comment 131 by u/[deleted] (1 points)

Thank you kind soul for your insight, much appreciated <3

### Comment 132 by u/gonnabuss (1 points)

Your TC may not determine your self worth but it sure does determine your net worth. 

Learning what are sometimes called “soft skills” will be of greater benefit than learning more programming shit. 

“I dodged a bullet by getting rejected after a long and difficult round of interviews” is cope. I would never dispute that hiring is utterly broken in our industry, but there isn’t much truth in the idea that the hiring process reflects much about your day to day working life. Companies that get lots of interest have ridiculously difficult interviews... AND it’s worth it to pass them, which is why people do it. 

The more seniority you get the more attention you pay to (largely written) communication. You can’t just write code, you have to convince people what code should be written and why. Then code. This is not enjoyable, and you’ll wish you could just go back to crushing tickets if you’re like me. “Organizational impact” is for extroverts. 

I’d rather have code that works, that looks like it was written by an idiot because it’s so simple to understand, than “clean code”. 

Dynamic languages are great, but typed variants are better. 

Smart people can be shockingly dumb.

### Comment 133 by u/Undaunted01 (1 points)

Thank you OP for the rather insightful rant. As a junior dev on his first internship, there were many key takeaways.

### Comment 134 by u/mekkeron (1 points)

OMG! 100% this! I swear... sometimes it takes me less time to write a program, than a README file for it.

### Comment 135 by u/heyuitsamemario (1 points)

I don't know why, but I needed this. Thank you OP

### Comment 136 by u/Ok-Will-2118 (1 points)

Love this post! 

Data Scientist here and wanted to shout out the unit test comment in case anyone is wondering: learning/training is typically nondeterministic, so to do unit tests, you have to make it deterministic. You can do this by setting seeds and static datasets (I’ve been known to load in the sepal length or MNIST datasets for debugging or testing). Note, this does not apply to integration tests.

And yes, fuck pandas. The amount times someone tries to update it and the whole build breaks because they won’t make it backwards compatible is too damn high. Or just run out of memory. Just awful. Use numpy or a dict.

### Comment 137 by u/mothzilla (1 points)

Lena says hi.

### Comment 138 by u/VinceMidLifeCrisis (1 points)

To all of the "No whiteboard when WFH" people: a peel-and-stick vinyl whiteboard is 10$ on Amazon. I have it and use it often, sometimes by myself sometimes when explaining things over zoom

### Comment 139 by u/wasabiBro (1 points)

What's a great chair to get for working at home?

### Comment 140 by u/LaplaceMonster (1 points)

What is wrong with pandas? As a person using pandas to strictly do data analysis of my experiments from my PhD, I’d like to know if I should stop learning pandas now before I invest time into it when I could be putting that time into something else.

### Comment 141 by u/[deleted] (1 points)

Why fuck pandas?

### Comment 142 by u/khendron (1 points)

> If people are trying to assign blame to a bug or outage, it's time to move on.

This one hits it out of the park.

Another thing touched on but not stated explicitly: If you value your free time, don't join a company where the company recruiters or anybody else reach out to you outside of work hours.

### Comment 143 by u/underthehedgewego (1 points)

Loved reading your post. 
I've often told young people getting going that "if you want to move up, move on. Raises and advancements come with new jobs".

### Comment 144 by u/a14man (1 points)

There's a lot I agree with here. Thanks for sharing.

### Comment 145 by u/Hinermad (1 points)

> Seriously, if there's any recommendations, I'd seriously pay for a course (like probably a lot of money, maybe 1k for a course if it guaranteed that I could write good docs.)

If you find that course, let us know. I'll take it, and I'll pay for a handful of co-workers to take it too!

### Comment 146 by u/FF7_Expert (1 points)

"TDD is a cult"

....aaaaand we're fighting 

but seriously, this is a good list

### Comment 147 by u/seanprefect (1 points)

I'm a senior security architect for a major multinational and I know shit about security :)

### Comment 148 by u/Jerror (1 points)

Practically I think "big data" is just the point where you actually have to worry about the size of the data, ie., when machine memory size starts to matter. If you're forced to go distributed or out-of-core to compute a thing, the data is big. Really only matters in the context of tech that doesn't easily scale to clusters and computations that don't trivially parallelize. If you suddenly have to homebrew a distributed memory parallel solution with OpenMPI, then you have crossed the line and probably tripped.

### Comment 149 by u/Mixairian (1 points)

MVP call outs in regards to being kind and savings/401k.

You'll many people are needlessly dick's and don't save.

### Comment 150 by u/tiredbike (1 points)

Just graduated biomed engineer here. I needed to hear a lot of this even though we're so far apart field-wise. Have a glass for me.

### Comment 151 by u/kitchen_clinton (1 points)

TLDRAOI

### Comment 152 by u/usually_just_lurking (1 points)

I love 99% of this. But as much as LinkedIn has issues, every single job I’ve had in my longish career has involved some sort of connection. Even if the connection is tenuous. 
So focus on building your network on LI, not on specifically finding a job. Connect with people you like and respect. Stay in touch once in a while. You never know when you can help someone or they can help you.

### Comment 153 by u/bicyclemom (1 points)

Great post.    I'm 37+ years in the business and I agree with pretty much all of this.  

A couple of last bullets

- Knowing how regular expressions work and how to use them in editors and other tools can save you so much tedious work.   So can [jq](https://stedolan.github.io/jq/tutorial/).

- In addition to sql, learn bash.   Yeah, it's a squirrelly language but it does the job on that Linux platform that was in your bulleted list.  Plus, it's handy for use with  ~~Satan's build tools~~ Jenkins, Rundeck, and Docker. 

- Work for managers that have a life outside of work.   They tend to make the best managers.   People who have zero responsibilities outside of work have zero concept of life outside of work and zero compassion for those who are responsible for children, elderly parents or pets larger than a parakeet.

- Age discrimination in IT is real.    Be prepared for it by continuing to learn and update your skills, especially soft skills like writing, presenting and mentoring.   Also, see those devops comments above.  And, cloud skills are pretty hot now.   If you are 40 and your only real skill is understanding how a LEFT JOIN works, you're asking for trouble.
 
- getting to the "Not giving a fuck about your career aspirations anymore" part of your IT career is awesome.   

....and yeah, I wish there were more of us women in the biz.

### Comment 154 by u/GinnyMastrani (1 points)

Female junior web dev here. I miss my senior dev mentor and you sound amazing. Saving this post for all my rainy days.

### Comment 155 by u/Heartkine (1 points)

Oh crap, I’m out of free awards. Every now and then I learn something from Reddit, not an engineer, sometimes don’t understand geekdom, but every now and then it’s saved me. And then this post comes along. Thanks.

### Comment 156 by u/muskratio (1 points)

> The greatest programming language ever is lisp. I should learn lisp.

Lisp is pretty damn cool, there's no two ways about it.

### Comment 157 by u/demonarchist (1 points)

> Average joe with organizational skills at big corp? $40k. Average joe with organization skills AND sql? Call yourself a PM and earn $150k.

I am a PM and this is accurate.

### Comment 158 by u/black_brotha (1 points)

nice

### Comment 159 by u/johnson_alleycat (1 points)

What’s wrong with pandas? If it’s shit, what should a Python user be using for EDA or anything else related to data? Calling something shit without expounding on that doesn’t help much sadly

### Comment 160 by u/cutdownthere (1 points)

whats your problem with git? You old git.

### Comment 161 by u/BruteSentiment (1 points)

I don’t have anything to say since I’m not an engineer, but I’ve moonlit on the product marketing/management side, and these things feel true after listening to engineers in meetings.

Thanks for the post!

### Comment 162 by u/psaux_grep (1 points)

I’m only 7 years in to my career (and sober), but I feel you and hear you. Agree on mostly everything, but I honestly think MySQL is crap. 

I honestly think we should all be paid more. Seriously. Let’s go on strike! Come Monday we delete all the tables in production and walk out. 

Don’t come back until they double our salary.

### Comment 163 by u/I_creampied_Jesus (1 points)

You’re off on the recruiter thing. The best recruiters have worked in the industry themselves and *then* became recruiters. You can make serious bank as a recruiter, if you know the industry you are recruiting for. Making 100k first year isn’t that hard. A good friend is on track for 200k in his second year. 

Other than that, I have no idea what anything else you said means.

### Comment 164 by u/klousGT (1 points)

> Almost every holy war out there (vim vs emacs, mac vs linux, whatever) doesn't matter... except one. 

Tabs vs spaces?

### Comment 165 by u/ApocalypseMao (1 points)

Damn can anyone do this for SaaS sales please ?

### Comment 166 by u/bboycire (1 points)

Well said, I hate git. The fast forward is the weirdest thing I've seen among all the other conflict resolution functions from other source control programs

### Comment 167 by u/Ky1arStern (1 points)

I see entry level job applications that want you to already be familiar with SQL, java, python, R, C# and have worked with Hadoop, Alteryx, and Mosaic. At the same time, every data scientist or analyst I've spoken too has basically backed into their position and learned it all on the job. Is it still possible to get into the field without having experience? Or at this point is topical formal education a pre-req?

Source: mechanical engineer who wants to get into data analytics.

### Comment 168 by u/cmutt_55038 (1 points)

I’ll add to this a little (30 years experience, 22 years with 5 different Fortune 500 companies)
- No matter what you do, at the end of the day IT is always viewed as an expense.  
- You have to constantly keep re-training yourself on new technologies if you want to stay employed.  Don’t expect companies to keep your skills up to date.  It’s your responsibility.
- HR is not your friend.  Unless it’s something serious like sexual harassment, don’t talk to them.
- Socialize with your coworkers.  Share salary details.  Understand your companies salary structure.  Know your worth.  If they don’t want to pay you, someone else will.
- You are selling minutes of your life for a paycheck.  Don’t work more than you have too or need to.
- Good bosses are damn near impossible to find.
- Switching jobs because you have to work with incompetent people isn’t a good idea.  Every company has incompetent people, when you switch jobs it just takes 4-6 weeks to figure out who they are.
- Switching jobs isn’t frowned upon.  HR and managers want you to believe this to fool you into staying longer than you should.  Switch jobs every 5-7 years.  It’s a great way to grab more cash and learn something new.  When you join a new company a lot of time it’s because managers want to pick your brain on best practices you’ve picked up in your prior experience.
- Certifications and advanced degrees will help you stand out and help you advance your career.  Take advantage of your companies tuition reimbursement program.  Get your MBA.
- Always keep your resume up to date
- Companies are always monitoring you.  They log your phone calls, text messages, emails, and browser sessions.  They see what you post on social media, they see what files you send via webmail.  They randomly take screen shots of your screen and log them.  Managers don’t have enough time to read through all the info that they have on you.  As long as you do your job well, they will never go look through that stuff.  Screw up, and they will dig through that material looking for rationale to fire you.

### Comment 169 by u/tacotrader83 (1 points)

I actually had fun when I was learning LISP in college. Everything else I hated and dropped out.

### Comment 170 by u/Jduhbuhya (1 points)

Someone get Stephen King to whip up a review for this brilliance and sell the rights to a publisher, give me 1‰ and everyone's happy.

### Comment 171 by u/[deleted] (1 points)

Wow. That was fucking awesome!! Thank you for your drunken constructive rant. So much wisdom!

### Comment 172 by u/[deleted] (1 points)

If y’all don’t get anything else out of this, take away to learn SQL, even if you’re not in tech.  Probably *especially* if you’re not in tech, actually. 

I work in manufacturing, am nowhere near as knowledgeable/experienced as this guy, and picked up SQL and VBScript.  I’m not really great at either (just enough to be dangerous), and it’s helped me advance my career to the point that it’s pretty ridiculous. 

Our ERP lets me write queries on the fly, and the VBScript lets me write quick reports that export and format an Excel workbook. I’ve got a standard ‘report shell’ script that I can basically copy/paste queries into and get what I need out of it. It also allows for some basic user-input. 

You could do the same with VB & Macros in Excel. Excel will also let you run queries on opening the workbook if you know the database connection info. I’ve also found Power BI to be a pretty great tool. 

I’ve learned that there are lots and lots of places that you can work in tech successfully without needing to be a tech expert. 

Lots of places need a ‘niche-tech’ guy that can be well-rounded and resourceful in a lot of areas without needing to be an expert in any of them.

### Comment 173 by u/[deleted] (1 points)

This post... it can be such an eye opener..  not just for cs related jobs but for every single career out there.

I work two jobs (field service and retail) and have a pinch of cs knowledge (so I understood just very little of the tech related stuff here) but many things that were said in these two posts apply to my two jobs. 
 
**Especially** the rants on interpersonal relationships at work.

### Comment 174 by u/elkazz (1 points)

I've been in the biz for 15 years and I'm still enamored with technology.

Also this course is great to learn how to write better documentation:

https://developers.google.com/tech-writing

### Comment 175 by u/overmeerkat (1 points)

> * Almost every holy war out there (vim vs emacs, mac vs linux, whatever) doesn't matter... except one.  See below.

Out of curiosity, which one does matter? I'm not sure you have mentioned that, unless you meant dark mode vs light mode, then I don't get what you meant (as in why it matters)?

PS I'd understand if you are sober now and have forgotten what you intended to say.

### Comment 176 by u/trekitch (1 points)

What would you recommend to someone that is not so confident in there closing abitues.

### Comment 177 by u/felderosa (1 points)

Thanks, this is awesome

### Comment 178 by u/monkkbfr (1 points)

Wow.

Fucking brilliant. I've managed large software groups in fortune 50 companies and founded startups and this is something I would pass on to everyone I've worked with in those past lives.

Well done.

### Comment 179 by u/TheRealAsil (1 points)

How does one become an Analyst?

### Comment 180 by u/Chikusho (1 points)

Commenting for bookmarking.

### Comment 181 by u/dangerousbrian (1 points)

Fucking A drunk Dev legend. Out of your many good points and valid advice heed the first one. Every single career advancement and decent pay raise has come from moving companies. 

Devs are in a unique position in employment, it's not hard to find new work and expensive for companies to replace you. I thought for many years that they were doing me this huge favour and I must impress them. Now I am the hiring end and know we are constantly shitting ourselves about recruitment.

### Comment 182 by u/Rhadiak (1 points)

I start my first software engineering job on Tuesday and I'm nervous as hell. This was a lovely read so thank you. Makes me feel slightly less nervous.

### Comment 183 by u/Jamil622 (1 points)

What kind of hero do you have that you feel the need to pay him 5k

### Comment 184 by u/[deleted] (1 points)

I'm learning SQL now. Taking a full stack crash course next month and job hunting. Glad I read this!

### Comment 185 by u/[deleted] (1 points)

> Carpal tunnel and back problems are no joke. Spend the 1k now on good equipment.

This is the one I was waiting for. Exercise, people. Get a strong back or your neck will become a rock to overcompensate and mess up the nerves in your arms and hands. Walking that back is no fun.

### Comment 186 by u/HeartOfDavid (1 points)

This whole post is amazing, so much wisdom. Thank you for this!

### Comment 187 by u/dSolver (1 points)

12 YoE senior engineer chiming in: this is all very accurate. Also, I'm a full stack dev but looking at data engineers and thinking they are so amazingly smart. They have to understand software engineering, but also hard math. Their work have much larger blast radius compared to what I build. Something doesn't work on my website, user switch browser or something. Blast radius is 1 person. My service goes down, maybe one feature is affected but we can also direct the user to another instance that is working, or roll back. If the data persistence layer fails, that's not just my application, that's a whole family of applications that is impacted. Potentially millions of users. Even worse, data gets corrupted, then not only productivity is blocked but persisted data must also be verified. In terms of impact, it is super important that data engineers are top notch, that's why we pay them so well!

### Comment 188 by u/mayan_havoc (1 points)

Best drunk rant ever, I think I’m in love.

### Comment 189 by u/rjim86 (1 points)

This is gold.. drunk wisdom.

### Comment 190 by u/Jyaif (1 points)

> The older I get, the more I appreciate dynamic languages. Fuck, I said it. Fight me.

Translation: The older I get, the simpler the codebases I work with are.

### Comment 191 by u/Wootery (1 points)

> The most underrated skill to learn as an engineer is how to document. Fuck, someone please teach me how to write good documentation. Seriously, if there's any recommendations, I'd seriously pay for a course (like probably a lot of money, maybe 1k for a course if it guaranteed that I could write good docs.)

I highly recommend **The documentation system**, an insightful taxonomy of what kind of documentation belongs in what form.

* https://documentation.divio.com/
* Talk: https://youtu.be/t4vKPhjcMZg?t=325

### Comment 192 by u/lifeisbollocks (1 points)

Yay to drinking while blogging! Sir, I'm gonna have to ask you to step away from the keyboard... LOL

### Comment 193 by u/[deleted] (1 points)

Drinking doesn't make you into someone else - it brings out what you are inside. And kudos to you on this post, it should be part of orientation for new hires (of any level of seniority) at a company that uses technology.

Note for changing companies that doesn't have to be to another business - internal transfers can be just as good for that as departing the company. Get a reputation as a fixer or someone who makes things happen across your overall organization and you will never lack for interesting (often hard, but interesting) work.

### Comment 194 by u/Kindinos88 (1 points)

> Tests are important but TDD is a damn cult.

Functional programming is awesome but functional programmers are a damn cult.

### Comment 195 by u/ReggieKilledTheKing (1 points)

https://documentation.divio.com/

### Comment 196 by u/thismyone (1 points)

Fucking love this post. What books / courses did you take that you recommend??

### Comment 197 by u/HamsterMode (1 points)

I got one advice for you — don't drink too much alcohol.

### Comment 198 by u/[deleted] (1 points)

> Don't meet your heroes. I paid 5k to take a course by one of my heroes. He's a brilliant man, but at the end of it I realized that he's making it up as he goes along like the rest of us.

Sounds like Martin Fowler

### Comment 199 by u/valbaca (1 points)

Holy. Crap. This feels like I wrote this in a blackedout haze. You're so spot-on. 1000% agree with nearly every point you made. Some comments:

>  Fuck, someone please teach me how to write good documentation

I hear good things about this course: https://developers.google.com/tech-writing/overview

> Java. It's a shitty programming language that's good at almost everything.

Yup

>  I should learn lisp.

If you know Java, checkout Clojure. It'll hurt your brain at first, but worth it IMO. There's also a dialect (ClojureScript) that compiles to Javascript, so theoretically it's the only language you should ever need to build a full lisp stack. It's sad it's not more popular, but that's Lisp in a nutshell: it should be taking over the world and did everything first, but somehow parens were too scary

> I don't know why full stack webdevs are paid so poorly.

They are if they call themselves "webdevs" It's dumb but I'm basically a webdev but with the title "Software Engineer" rather than "Front-end Engineer" I get paid like 50% more. Sure, I do a helluva lot more than just frontend, but most devs are some sort of front/back/devops hybrid anyway.

> Cushy government jobs are not what they are cracked up to be

Hell yeah. Worked for a military contractor and it was crap. Paid way below average, mediocre benefits, and all kinds of Office Space nonsense like reply-all emails fighting over food in the fridge ugh.

> I've never worked at FAANG so I don't know what I'm missing. But I've hired (and not hired) engineers from FAANGs and they don't know what they're doing either

You're right. The main benefit is getting to use frameworks that the company provides that lets us not reinvent the wheel. Shoulders of giants, learning from history, and whatnot. On the other hand, it's frustrating as hell to see the exact same mistakes be made over and over. 

> if something doesn't make sense to them, it means that it was probably badly designed. 

what a nugget of wisdom

> There's something fucked with our industry's interview process.

absolutely, it's so hard to change now b/c everyone's just mimicking everyone else

>  So happy for those weekend where I screwed around installing Arch.

haha same! distro-hopping in college really paid off somehow

> Those labels can go fuck themselves.

So many labels like "big" "micro" "super" are just non-words at this point. Little mental hack is to just pretend they're not there. Add them for appearances because as dumb as it is, appearances matter.

### Comment 200 by u/cratermoon (1 points)

[how to write good documentation](https://documentation.divio.com/introduction/#the-problem-and-the-solution)

### Comment 201 by u/TracerBulletX (1 points)

I wish I knew how to fix the industry so that so many people don't come out the end burnt out and just over tech. :/ It's kind of a bummer. Do other industries have this problem? If not why not?

### Comment 202 by u/CheesusCheesus (1 points)

Choices you make can depend greatly at your station in life.  Choices I made when single can  be much harder to make when you are the sole income and benefits source for your family.

With that said, I feel this will still be controversial:

Working nearly 30 years in software development, my primary metric is: did the last paycheck clear?  If yes, then I'm up for whatever cockamamie idea management has.

### Comment 203 by u/EEtoday (1 points)

> Good code is code that can be understood by a junior engineer. Great code can be understood by a first year CS freshman. The best code is no code at all.

No software department on the planet will ever replace more code with less code.

### Comment 204 by u/3dot (1 points)

- Why the hell is there no "Rails for node.js"!? Wait, there is. I really hope https://adonisjs.com/ takes off

### Comment 205 by u/kuil09 (1 points)

It is real advice, great.

### Comment 206 by u/kuil09 (1 points)

Is so good, Can I translate and share my people?

### Comment 207 by u/thatsnoobtastic (1 points)

Might

### Comment 208 by u/znpy (1 points)

Are you a mallard? So many good advices...

### Comment 209 by u/[deleted] (1 points)

Web developer here. I know the full stack, from C# to Python, do flat-file databases to SQL, from servers and CI/CD and many things in between, to the frontend including CSS and modern browser APIs.

Salary-wise, yeah. Most of us are too nice to get better pay. Agreeable types, most of us. We value "loyalty" for some reason (I stopped doing that many years ago) and as a result, our salaries--on average--increase by about 3% per year.

If you switch jobs, and schedule it, every 3 years, you'll see that you can get that up to 8% per year, on average.

Let's say you start out at $2500/month, in a small town, working for a small to medium-sized company, and stay with that same company for 10 years, you'll end up with a nice $4500/month or $54k/year and in many places, you'd be a happy camper.

Now switch it up every 3 years and average out at +8% per year. Start at $2500/month. Suddenly you find yourself making almost $12k/month or $144k/year. 

I'm the latter (slightly higher, though) and many of my former colleagues got stuck at their first or second or third jobs. They might average out at +4% per year, some even at +5%, but those figures are still leagues away from what I'm making.

Tip of a lifetime: Loyalty does not pay... unless you own the company and pay your employees. Then loyalty pays you... by having cheap and experienced employees.

That said, if you're stuck at the same job for 10+ years it's likely (in my experience anyway) that you've grown stuck in your ways and a switch would brighten your path forward as a web developer.

My point: Switching jobs is a lot of fun. You get to know new companies, new people, new technologies, new ways of "how to not do it" and you'll get to know all those big shots who turn out to be nothing special; myself included.

Do I work harder than those guys making $60k? Nah. I just have some big names and kick-ass tasks and brilliant references on my impressive resume. That, apparently, makes me worth double what those guys get paid.

### Comment 210 by u/Psynixx (1 points)

>Algorithms and data strictures are important--to a point. I don't see pharmacist interviews test trivia about organic chemistry. There's something fucked with our industry's interview process.  

Every time I've needed to look for a job, I've had this though: "Fuck it, I'll just take all my money and throw it a pilot school or open a bar or move to the middle of bumfuck nowhere..."  

The worst is the "interview loops", 6 hours of coding on whiteboards and talking about yourself non-stop is exhausting as all hell, I've seriously considered having a prerecorded "Tell me about yourself" speech just so that I can give my jaw a rest!  
  
And take-home projects can go fuck themselves too... _it should only take 4-6 hour!_, even if that was true, which it is not, multiplying that by the 2-3 companies you've applied to give youself an unpaid part time job!   
   
You need to conciser the hiring process as a "selection pressure" (in the Darwinian sense) on the company culture as a whole. Having whiteboard heavy FAANG-style interviews definitely adds a selection pressure and it's up to you whether you like what that gets you, just don't expect to see me resume anytime soon.  
  
I'd rather sort all the people that apply onto a graph that has skill on one axis and trust on the other and choose trustworthy, good people even if they are a bit lacking skills wise. I can teach technical skills, no problem at all. Trying to teach the "code ninja hacker god" to not be a total cunt is a much more daunting task...

### Comment 211 by u/NameGiver0 (1 points)

>When I first started, I was enamored with technology and programming and computer science. I'm over it.

I'm in this picture and I don't like it.

>Good code is code that can be understood by a junior engineer. Great code can be understood by a first year CS freshman. The best code is no code at all.

So true. Write code for fresh eyes first and the compiler second.

>I had a girlfriend in 8th grade that I didn't want to break up with even though I didn't like her anymore so I just started to ignore her. That was so fucked up. I'm sorry, Lena.

I now believe you really are drunk. I get maudlin too.

>Algorithms and data strictures are important--to a point. I don't see pharmacist interviews test trivia about organic chemistry. There's something fucked with our industry's interview process.

This one hits close to home. I've been job hunting for over a year and keep getting interviews, often failing the technical one, or the one the company calls technical, because I fail to perform under utterly artificial conditions with fake solved problems, or trick questions. It should be more like art. Submit a code sample, or portfolio you're proud of (via github or whatever), and then talk to the person. As an industry we're absolute shit at hiring. The team getting along with the person is more important than what they can code on hacker rank in 60 minutes by a long shot. Can they learn? Do they know practices and can write decent code under sane conditions? Hire them. I've 20 years of experience, code running at multiple fortune 200 companies, and other smaller ones and I can't get a job because we as an industry are absolute shit at hiring.

### Comment 212 by u/lazyant (1 points)

I've been in the field for some ~25 years and I agree with pretty much all of this; I'd happily written this myself.

### Comment 213 by u/[deleted] (1 points)

"Dark mode is great until you're forced to use light mode (webpage or an unsupported app). That's why I use light mode."

Guessing you use Snowflake?

### Comment 214 by u/[deleted] (1 points)

From one Data Engineer to another, cheers. This spoke to my soul. And 100% agreed on SQL.

### Comment 215 by u/olionajudah (1 points)

I can't believe how much I love this.

I also can't understand how poorly we full-stack devs are paid. It makes no sense. They'll hire 2 more managers to think of things for me to do, but not hire another me.. 

This post has inspired me to look for a new job.  It's honestly the only way I'm going to progress in my career at this point. 

Thank you

### Comment 216 by u/[deleted] (1 points)

> Capitalism is a poor way to determine self-worth.

lol

### Comment 217 by u/oldphonewhowasthat (1 points)

>  The best code is no code at all.

That's the kind of thinking that leads to yaml, and things like NIFI that just mean you end up using underpowered config combined with real code when you find your needs haven't been predicted.

### Comment 218 by u/mikekchar (1 points)

> Nothing makes me sadder than when I wrote a long post and then nobody responds.

The thing I relate to the most in this post.  I read your post.  I enjoyed it.  Thank you.

Also, if you ever want to join the cult of TDD, give me a shout :-)  My cult is a little different than some other people's cult.  I mean, you gotta be different, otherwise what's the point?  I know you have hundreds and hundreds of replies so the chance that you see this is basically zero, but just in case.  The reason people join cults is because they are fun.

Elevator pitch: A "test" documents a piece of behaviour.  Behaviours are neither right nor wrong.  They just are. They are only loosely related to requirements.  When you change the behaviour of the code, a test should clearly show you that the behaviour changed.  When you change (or add) a test, it should clearly show you if the behaviour exists or not.  Tests are written to help you reason about the code.  They are the programmers equivalent of double entry accounting.  TDD done in this fashion forces you to expose state.  This has an impact on your design.  You may or may not like this impact.  Test First is a good way to first start learning TDD.  Sticking to Test First is like refusing to take your training wheels off.

### Comment 219 by u/[deleted] (1 points)

Not ignored

### Comment 220 by u/TechnoEmpress (1 points)

> The most underrated skill to learn as an engineer is how to document. Fuck, someone please teach me how to write good documentation. Seriously, if there's any recommendations, I'd seriously pay for a course (like probably a lot of money, maybe 1k for a course if it guaranteed that I could write good docs.)

https://documentation.divio.com/

### Comment 221 by u/SegmentationSalty (1 points)

I'm going to print out this post for much anticipated future reference.

### Comment 222 by u/cxfxcxb (1 points)

Sounds like you worked in Europe!

### Comment 223 by u/thepunkfool (1 points)

This is the most densely-packed correctness I’ve read in a long time. Good job.

### Comment 224 by u/Spare-Wrangler-6848 (1 points)

Man.. i love it :D

### Comment 225 by u/froztbyte (1 points)

Regarding your documentation note

Divio had an excellent post up, you can still see it in Wayback Machine: https://web.archive.org/web/20190829063352/https://www.divio.com/blog/documentation/

The old URL seems to have been updated to a whole documentation system, now at https://documentation.divio.com/.

### Comment 226 by u/jack281291 (1 points)

So much truth in this post, I would pay to have you as a mentor/boss

### Comment 227 by u/[deleted] (1 points)

So about that drink we're going to share... I'd like to hear more.

### Comment 228 by u/[deleted] (1 points)

Please get drunk again soon.

### Comment 229 by u/SandraBollox (1 points)

Surely this is one of the best posts on Reddit, like, ever. Thanks! :D

### Comment 230 by u/EndUsersarePITA (1 points)

OK extremely hung over sysadmin here. I know I'm really late to this party but I'd like to touch on documentation.

Ive been a sysadmin for almost 15 years now. In a previous life I went to law school. I learnt how to write clear and concise instructions from there. I know I know, its completely unintuitive that you'd learn how to be clear from a profession thats notorious for being completely oblique. But hey do you think those guys learnt to write like that by being unclear? No you gotta learn to be clear before you can be really really really twisted.

That said the basic lesson from there was

1. Setup goals in your documentation. What is it that you are trying to convey? Each section has its own goal

2. Setup a starting point for each goal. The idea here is that there is an expectation that the reader has a minimum set of skills established already. Of course when writing documentation for end users the expectation is that they don't know Internet explorer from file explorer

3. Plan out the steps to reach the goal from the starting point. Put this in numbered points just like what I'm doing right now.

4. Use small words/short sentences. The longer your sentences are the harder it is for people to digest. Difficult words just make people space out. See I just used the word oblique earlier and I'm already thinking I should not have used it

5. Pictures help. Some people process things better with pictures. I don't know why but they do

6. Documentation is hard to write. It takes days to write good documentation for a single goal. And nobody will appreciate how hard it is to write

7. There is no end to documentation. Whatever you think is the final draft, its not. You will have missed something. Its OK. That's why you have version control like git (even though you hate it)

8. Drinking impedes your documentation. Unfortunately its true. But don't believe me, try it. After you are done writing you will need more drinks though 

That's about it for me. Oh and your documentation is very important to me as a sysadmin. So thank you for all the hard work you did in building the system and writing out good documentation

### Comment 231 by u/rajid_ibn_hanna (1 points)

I’ve been  Software Engineer for 30+ years and a senior one for more than 10. My best advice which I tell everyone is to always make sure you can successfully test the software while drunk. Usually, the programmer knows too much about the system and the easiest way to remove that knowledge, so they can see it the way others would, is to interact with it while impaired.

My other big piece of advice is that documentation and comments in the code are more important than the code itself. Any time you stop writing and start thinking, “how do I want to do this”, you should be writing a comment.  But, you covered that one already.

Great list! I enjoyed reading it!

### Comment 232 by u/Throwaway312343334 (1 points)

TL;DR read the whole damn thing.

Thank you for this my man!

### Comment 233 by u/[deleted] (1 points)

I can't upvote this enough.

### Comment 234 by u/p431i7o (1 points)

*"I don't know why full stack webdevs are paid so poorly"*

nobody knows..

### Comment 235 by u/viewtreeobserver (1 points)

> Good people write shitty code. Smart people write shitty code. Good coders and good engineers write shitty code. Don't let code quality be a dependent variable on your self worth.
  
In my early carrier, when I've become Mid + Developer and even leading a project I've become obsessed with clean code. But I started to work on a terrible project, which was done super badly. Global Static variables changing state in random ways, you know the gist... 

So I've been checking Git Blame and only one name was popping up. 
I was so pissed and angry at the guy who wrote this, used to curse him for making me work this his shite. 
I also thought that we has a terrible person, because no good human being could write that. 

Now that few years have passed, I've grown up and matured. And this line from you also helped me to realized that he might have been a nice good guy. Just living his life and trying to make some living out of it. 

So I'm trying to remind this myself on and on (especially on code reviews)
Writing bad code does not really make anybody a bad person. The contrary is also true. 

So thanks for sharing it. 
Kind of helped me to reevaluate this again. 
Cheers!
(This is a first time I wrote comment this big, lol :D)

### Comment 236 by u/hiibabufrik (1 points)

What are the main technology principles that you've mentioned?

### Comment 237 by u/zsh2v1 (1 points)

>There's not enough women in technology. What a fucked up industry. That needs to change. I've been trying to be more encouraging and helpful to the women engineers in our org, but I don't know what else to do.

literally just don't be an asshole, provide empathetic support, call out abuse and toxicity when you see it, and mention them and their wins in your 1-1s with your manager.

### Comment 238 by u/ScamWatchReporter (1 points)

this post completes me

### Comment 239 by u/mozillalives (1 points)

lol, I agree with so many of these, so true.

On kids. As you said, even good engineers write shitty code. Even good parents make mistakes. Every parent does, and some of them are going to make you feel fucking awful because you know that you should have known better. But just like code, you don’t give up, you don’t run away, you stay there and try your best to fix it. 

And regarding kids, they’re gross, dirty, smelly, disgusting, annoying and I’d literally give everything I have, including my life, for mine. There’s just something that I can’t describe that happens when one of them looks at you and says something, or just runs up and gives you a hug for no reason, that leaves you unable to describe what you feel. Because you’ve felt happiness before, but this is so much more than that that you feel like those other times were just imitations. 

Thanks for sharing your thoughts. I’m sending this to other junior engineers.

### Comment 240 by u/rollsicy (1 points)

Can I just say that this is gold !? Honestly, I’ve been on Reddit for quite awhile; and damn... this is the first time I’ve seen such a solid piece of advice.

### Comment 241 by u/Opposite-Bus6520 (1 points)

Loved yours. And the Faang one is actually kinda true, buzzwords like scale, 5 9s make us believe they are Greek gods, which a lot are not. The thing I absolutely hate is over simplification/over engineering, like yea, we understand you are scared how another engineer will break your code, but then it wasn't great to begin with if it can be that easily broken. Also, more lines written equals more chances of code to break. DS/Algo are great to get your thinking aligned in terms of resource constraints and absolutely must haves for any engineer, but if their thinking is straight on, actually solving(or not solving) a prob in an hour long interview doesn't really prove anything except that what happened happened. Same for anything, a system design interview should test you for thoughts, ad to what problems you have in mind you are trying to solve, not some random assumptions that get thrown at you, by a panel of few who wouldn't know what to do if they got interviewed on the same.

At most times, your code really illustrates how clear your thoughts/knowledge on your product are, if they ain't, you will have a great ball of misunderstanding being passed as code. Being senior is the difference between a working piece, which takes days to understand and a piece you can gloss with a little idea of the domain.

At no point, faster release equals bad code quality, the newbies to the team will have far worse experience understanding your piece and you will eventually pay with lesser throughput. Again, less the code anyone has to write, the better it is, someone will have to write more beforehand to bring this equilibrium, but let's assume they atleast knew more about the product than anyone joining later.

### Comment 242 by u/ln_of_e (1 points)

This has got to be my favourite software engineering post on Reddit.

### Comment 243 by u/sombrastudios (1 points)

Hey man, I just wanted to say that this is gold for me.
I recommended this this post dearly to some of my close friends. Can't beliebe just how much reading this means to me.
I think it's really authentic

### Comment 244 by u/arturski (1 points)

What a fantastic post youve made my day haha now i have been in discussions with my colleagues about your origins :D and we are between UK/Australia based on the humor and word use :D will you disclose?

### Comment 245 by u/whateverathrowaway00 (1 points)

This post is amazing and really what I needed to hear as I’m pushing for a big shift / title-jump right now.

### Comment 246 by u/commodo28 (1 points)

So, I’m fortunate that I managed to find 2 open-source communities that I hang around with.


I’m not in a super-close-level relationship with them (yet), but I’ve stuck around long enough to be a presence, and I did manage to contribute a fair share of patches/changes.

And I’ve changed a few jobs since being involved.
And that feels great; i.e. interacting with this relatively constant group of very smart, very dedicated people that care about the same project.

I always recommend to other devs to try to find their own communities, because that really helps later on.

For me (as well), programming in itself is no longer as fun as it used to be.

But doing things for the community is great.

And I use that on my resume.

Interviews are still shit in most companies.
If a company still wants to make me jump through some shit interview process/algorithm (despite me giving them a list of contributions), I kindly refuse to continue the interview.


Maybe I’m getting old as well.
But I don’t feel like dancing on everyone’s tunes all that much these days.

### Comment 247 by u/CaptainBitnerd (1 points)

Good documentation: If I see one more comment on getFoo() that amounts to "Gets a Foo instance", I will scream.  

Tell me why I would want a Foo rather than a Bar.  Tell me in what cases getting a Foo is expensive, or if it's not.  Are there any side effects to the instance or to global state?  

Don't tell me what the function is doing; I can read code.  Tell me how this function fits into the local and broader ecosystem.

### Comment 248 by u/judasthetoxic (1 points)

Dude ure the best drunk ive ever pay attention LOL.

### Comment 249 by u/yurifrl (1 points)

I love functional programming. I wish people were more willing to give it a try. Great post OP

### Comment 250 by u/dcsln (1 points)

This is great stuff. I've been in IT for 25 years, mostly network operations, always at places that build their own software, and this all rings true. 
Definitely be nice to people FFS. If you're the guy yelling at meetings (almost always guys) - please re-assess your communication strategy. Learn to regulate your emotions. You are not helping yourself or anybody else. Yelling is not being strong or decisive or leading.
Thanks for posting this.

### Comment 251 by u/windub (1 points)

Just writing a comment so you know I didn't ignore this post.  Thanks for sharing!

### Comment 252 by u/toolboks (1 points)

Whiteboarding.
Invision ftw

### Comment 253 by u/[deleted] (1 points)

AMEN!

I don't know who you are or where you be, but if we ever run into each other, the first round of whatever is on me.

### Comment 254 by u/bobtreehouse (1 points)

great post.

### Comment 255 by u/bobtreehouse (1 points)

and yes, WFH is the best part...and I am near 50, maybe I need a gov't job.

### Comment 256 by u/espi_68 (1 points)

I needed to hear a lot of this. Maybe not because it was new information, but because I identify with a lot of what you're saying in for where I'm at in my software development career and it's great to feel the solidarity. Thanks for being vulnerable 🙏

### Comment 257 by u/lowz_ (1 points)

This post is gold. Thank you for getting drunk and writing this.

### Comment 258 by u/ArturJNT (1 points)

Thank you OP
I wanna be friends

### Comment 259 by u/nemoDreamer (1 points)

So wait: which holy war *does* matter?! I need to know!!!

### Comment 260 by u/Freddylucas (1 points)

I literally just created an account to leave you a comment: this post is more enlightening than some super hyped conferences I've attended before hahaha :D

### Comment 261 by u/emailscrewed (1 points)

RemindMe! in 7 days

#### Reply 1 by u/RemindMeBot (1 points)

I will be messaging you in 7 days on [**2021-06-10 04:52:31 UTC**](http://www.wolframalpha.com/input/?i=2021-06-10%2004:52:31%20UTC%20To%20Local%20Time) to remind you of [**this link**](https://www.reddit.com/r/ExperiencedDevs/comments/nmodyl/drunk_post_things_ive_learned_as_a_sr_engineer/h0ek7g1/?context=3)

[**CLICK THIS LINK**](https://www.reddit.com/message/compose/?to=RemindMeBot&subject=Reminder&message=%5Bhttps%3A%2F%2Fwww.reddit.com%2Fr%2FExperiencedDevs%2Fcomments%2Fnmodyl%2Fdrunk_post_things_ive_learned_as_a_sr_engineer%2Fh0ek7g1%2F%5D%0A%0ARemindMe%21%202021-06-10%2004%3A52%3A31%20UTC) to send a PM to also be reminded and to reduce spam.

^(Parent commenter can ) [^(delete this message to hide from others.)](https://www.reddit.com/message/compose/?to=RemindMeBot&subject=Delete%20Comment&message=Delete%21%20nmodyl)

*****

|[^(Info)](https://www.reddit.com/r/RemindMeBot/comments/e1bko7/remindmebot_info_v21/)|[^(Custom)](https://www.reddit.com/message/compose/?to=RemindMeBot&subject=Reminder&message=%5BLink%20or%20message%20inside%20square%20brackets%5D%0A%0ARemindMe%21%20Time%20period%20here)|[^(Your Reminders)](https://www.reddit.com/message/compose/?to=RemindMeBot&subject=List%20Of%20Reminders&message=MyReminders%21)|[^(Feedback)](https://www.reddit.com/message/compose/?to=Watchful1&subject=RemindMeBot%20Feedback)|
|-|-|-|-|

#### Reply 2 by u/emailscrewed (1 points)

RemindMe! in 7 days

### Comment 262 by u/mailed (1 points)

Thanks for posting this. I'm a dev of some 15 years who's fallen into business intelligence and data engineering. Your tips are re-assuring.

### Comment 263 by u/mayckxavier (1 points)

I should have read it drunk. I liked it anyway, but I would be agreeing out loud.

### Comment 264 by u/[deleted] (1 points)

https://developers.google.com/tech-writing

### Comment 265 by u/Crypto-Wise (1 points)

Ok

### Comment 266 by u/matthewadams12 (1 points)

Great post, really.  Especially the life stuff.  It's good to know that there's other humans out there who just so happen to work on the cold, hard, unfeeling steel of computers.

### Comment 267 by u/__hayate__ (1 points)

respect

### Comment 268 by u/Koekwoes (1 points)

I'm high af reading this on friday evening... Like it!

### Comment 269 by u/tatravels (1 points)

A single drop from this webdev's underpaid tear duct

### Comment 270 by u/KKalibur (1 points)

>Same with black engineers. What the hell?

I'm 17 and currently in high school, black, and I want to pursue a path to be a neural engineer but I've been told you can only get into and move up in engineering if you know certain people. I don't know anyone to get started or even the steps to take as those around me had limited ambitions. Do you have any tips as to how I can get to where I want to be and succeed?

### Comment 271 by u/AcceptableJacket7421 (1 points)

@flipstables Love your #1

"The best way I've advanced my career is by changing companies."

Amen!

And #2

"Technology stacks don't really matter because there are like 15 basic patterns of software engineering in my field that apply. I work in data so it's not going to be the same as webdev or embedded. But all fields have about 10-20 core principles..."

Mind to ramble about what those 15/20 principles are in data engineering?
:-p

### Comment 272 by u/thereisnosuch (1 points)

I love how in the middle, you started talking about a girl ghosting you in highschool and then you ghosted your own girlfriend. lmao. Truly you are drunk hahahahah

### Comment 273 by u/cloroxic (1 points)

What a stellar post. I’m so encouraged by your wisdom and authenticity. As a newer dev, this is like a manifesto!

### Comment 274 by u/Inna-Zozulia (1 points)

Lol thanks 👏🏽👏🏽👏🏽

### Comment 275 by u/darkwoodframe (1 points)

Hey.  I'm a project lead at a fortune 500.  I "lead" a small team that works on member information exports in one of their divisions.  I am proficient enough in SQL where I can look up information and locate and read code if a problem is identified.  I'm making like $60K.  I can elaborate by PM more if you like.  I feel like I'm being taken advantage of because I started as data entry.

### Comment 276 by u/Turbo-Teaching (1 points)

I also work with data and honestly don't understand why Airflow is a crap. 🧐

### Comment 277 by u/grubberr (1 points)

You said you paid 5k for course to one of your heroes. Was this hero David M. Beazley? :)

### Comment 278 by u/Achcauhtli (1 points)

Speaking truths, I appreciate this post and appreciate another drunk dev.

### Comment 279 by u/throwaway1_x (1 points)

GUI git is quite nice, especially for staging specific line(s)

### Comment 280 by u/Sveitsilainen (1 points)

Damn I tried the random subreddit once and fall down here, saw that top rated post and it's so good/relatable.

### Comment 281 by u/otarampinelli (1 points)

This opened my eyes

### Comment 282 by u/Mr-Donut (1 points)

Just saw this post and it's really helped me. Got my first Senior Software Engineering roll starting in a couple weeks and I've been looking for words of wisdom from other senior devs. 

Thank you. You're appreciated.

### Comment 283 by u/ohvoh89 (1 points)

Black Front End Dev here and I agree. Been doing development in an official capacity for coming up on 3 1/2 years and there are times I wish I could see others like me in the field. I try to push anyone I can towards IT because it’s amazing field and truly does need more diversity.

### Comment 284 by u/BasuraCulo (1 points)

This post was amazing, seriously, and I LOVE THE FACT that you've mentioned my people and how there aren't enough of us in the tech field. I'm black, a woman, and I'm pursuing a CS degree. When I graduate, I'll be in the 3%ers group. That's fucking sad.

### Comment 285 by u/char-az (1 points)

This is wholesome content. Mad props!

### Comment 286 by u/BetterCallGaucho (1 points)

great post dude. Thanks! Please drink more 😂

### Comment 287 by u/chuck_qu (1 points)

good

### Comment 288 by u/lucky13820 (1 points)

I’m not engineer, but as a product designer reworking in tech, many of those things applied as well.

### Comment 289 by u/Professional-Copy-46 (1 points)

like you！！！！Values ​​are fucking correct！！！！

### Comment 290 by u/thehackercat (1 points)

lol

### Comment 291 by u/Apprehensive_Two_279 (1 points)

The best document is a simple flow chart showing all the logic.

### Comment 292 by u/pguan_cn (1 points)

1st min: i like this guy i agree with all the points he make
2nd min: this guy is really drunk i’ll skip on the first point that I don’t agree
Ended up read all, just skipped the one about his high school thingy

### Comment 293 by u/Sad_Possibility5116 (1 points)

Thank you, friend. You're telling what I have learned from my 10 years career as engineer.

### Comment 294 by u/No-BUG-8027GAGA (1 points)

With technology in hand, you can eat without worries. In the future, full-stack developers will be the most popular

### Comment 295 by u/loorene (1 points)

I read your post in Chinese https://www.ruanyifeng.com/blog/2021/06/drunk-post-of-a-programmer.html

Thanks for your post, I'm agree all of them.

### Comment 296 by u/hngling (1 points)

Awesome tips! Thanks.

### Comment 297 by u/OtherAd6004 (1 points)

what are 15 basic patterns of software engineering and 10-20 core principles ?

### Comment 298 by u/techArtScienceBro (1 points)

How old are you my good sir, if you don’t mind me asking?

### Comment 299 by u/Electrical-Loss-6776 (1 points)

I didn’t know you can type properly when drunk.

### Comment 300 by u/12raglandbrandi (1 points)

Man I’d love to be the Dorothy to your Jerry 🤣 this made my day. Was looking around for tips on which fields are beneficial to get into as someone with 0 experience in this area. This is by far the most helpful. 
All the positive vibes I can possibly give to you. Thank you!!

### Comment 301 by u/OtherAd6004 (1 points)

what are 15 basic patterns of software engineering and 10-20 core principles ?

### Comment 302 by u/elecdog1604 (1 points)

If words in this post are not gems, why are they sparkling wisdoms?    
I changed my job 3 months ago. It took me 1 month to realize the team cannot go any furhter. Tech debts were too huge to grant any advancement. Poor management just made things worse. I felt exploited in amending faults, setting best practices and coaching tech consensus in team. That's totally different from what I was promised. Nevertheless it took me another month to accept the fact that I've made a wrong career movement. I've spent recent weeks questioning if I should start looking for new jobs. Your post is a great relief. Thanks!

### Comment 303 by u/[deleted] (1 points)

Starting a career in CS field, this post is gold.

### Comment 304 by u/ajax27webdev (1 points)

Great post, love it :)

### Comment 305 by u/[deleted] (1 points)

No wonder he’s drunk. He’s trying to deal with the pain of light mode burning his eyes out of his skull

### Comment 306 by u/vpygmalion (1 points)

it is so true bro

### Comment 307 by u/PaulMurrayCbr (1 points)

The reason Pharmacists dont do trivia is that medical degrees mean something, ans the world isnt full of people trying to get into pharmacy who are unsuited for it.

#### Reply 1 by u/cashaveli (1 points)

What did you mean by this?

### Comment 308 by u/FullOfStarStuff (1 points)

The random insertion about the gfs🤣🤣

### Comment 309 by u/_ThinkStrategy_ (1 points)

This is such a good post, great job OP! One of the best ones I stumbled upon on Reddit!

### Comment 310 by u/laralog_ (1 points)

The intern point tho… I agree 10000%

### Comment 311 by u/rep_movsd (1 points)

Technologies that I used one time or the other for paid projects - ACE, QT, wxWidgets, PortAudio, Directshow, COM, Quicktime, OpenGL, django, React, Win32, MFC, ATL and numerous small libraries I've even forgotten about.

Languages - C, C++, Delphi, C#, Java, python, Golang, JS, perl, coffeescript, PHP, SKILL, X86 Assembler, VBA


I really love some stuff a lot - like Delphi, Directshow, COM, C++ and QT, and lately React, but I really never developed a great distaste for anything else (except coffeescript). Technology is like food, it depends on your taste, but you can acquire taste for anything.

The greatest reward for programming is the process of building something.

### Comment 312 by u/62656e7a6f6e (1 points)

As a new grad and landing my first job as a jr dev, I’m bookmarking this. Thank you for sharing

### Comment 313 by u/ConfidentialUsername (1 points)

I don’t think I have read a more informative and advice giving post on Reddit ever. As an engineer, this feels like talking to a mentor and them giving me all their insights and life lessons.

### Comment 314 by u/Professional_Falcon5 (1 points)

Thanks for the advice! 
Kind of stuff you can read about in several books along with some strange thoughts about forcing job choices on people. Here's a tip, people will choose whatever career they desire, it's not up to you or anyone to pick their carreer for them. You should be respectful and encouraging to everyone, regardless of what field they go into.

### Comment 315 by u/Reasonable_Force_512 (1 points)

前来瞻仰大佬

### Comment 316 by u/WesleyWillisFan (1 points)

Damn.  This is some of the best reddit posts I have ever read.  Balanced, clear, intelligent and real.  You must be fully self actualized.

### Comment 317 by u/may_yoga (1 points)

So many points I needed at this exact moment lol. I am leaving my company and most people are pissed about it. They are talking about values, morals and how to support the decisions of our managers. And I am here thinking like the only reason I went looking for another job is because those same managers took decisions that didn’t support me. 

In all honesty though, I think they are pissed I am getting a huge pay increase. Or maybe they are right, maybe my values aren’t that great. I am still leaving and I know this is the best decision for me at the moment.

### Comment 318 by u/altmoonjunkie (1 points)

As someone who is coming out of a bootcamp, I really appreciated this post.  I have a lot of fear about the technical interviews that I'm about to be walking into, so thank you for mentioning that.

Any recommendations for someone with full stack in the bootcamp name but can't make Javascript do anything right (asking for a friend).  I've got a decent handle on Java, Spring, SQL, and Postgres.

### Comment 319 by u/EquivalentPop6199 (1 points)

Just love it

### Comment 320 by u/praise-the-smth (1 points)

One of bests reddit posts connected with dev work. Im full of regret that our paths never crossed. All the best for you!

### Comment 321 by u/[deleted] (1 points)

I agree with many of the points, but as you are a so-called Sr Engineer, you may want to discover that SQL is not really a programming language.

### Comment 322 by u/bicheouss (1 points)

Just wanted to downvote for Java and then upvote for Git via cli...
Fuck that, i'm going to drink with you, cheers

### Comment 323 by u/youngmcdonald85 (1 points)

I just used pandas this week , made a dataframe from Json ,  thought I could just easily manipulate like sql.  No dice still tracking down all the commands to try to modify a time series to show the correct indexed value...

### Comment 324 by u/TSLAStarlinkALGO (1 points)

Just because you're scared about raising kids, you should have kids.

### Comment 325 by u/dhsksndjdks (1 points)

Good

### Comment 326 by u/Suspicious-Ad-52 (1 points)

Does anyone else feel like we are building shit on top of rivers of shit.

Because we are?

Go take a look at https://nvd.nist.gov/.  

It depresses the hell out of me.

### Comment 327 by u/Zealousideal-Wear532 (1 points)

I am a full stack web developer. alms?

### Comment 328 by u/pizzystrizzy (1 points)

So much wisdom here. I'm not even an engineer, I don't know why exactly this post was recommended to me -- I'm a social scientist who spends maybe 2 weeks of every year writing code at the absolute most. I've got tenure but am basically locked into my academic job (and I've only had one job since grad school). So almost none of this is directly relevant to me, but I still enjoyed the heck out of it.

My advice as a professional teacher and technical writer (in a manner of speaking) is that you should just drink several glasses of wine while documenting stuff. I won't even charge $1k for that.

### Comment 329 by u/pratyush997 (1 points)

This thread is a goldmine.

### Comment 330 by u/Snoo95569 (1 points)

Thank you for putting down how I feel pretty much every damn day. Someone who has been an se for about 23 years.

### Comment 331 by u/zinboo (1 points)

Damn that drunkard has more insight than a whole bunch of though leaders in our industry. Keep it up with the drunken shitposts!

### Comment 332 by u/thehomelessmexican (1 points)

Web dev here. Is it not normal to have to know all that?

### Comment 333 by u/ReddsRead (1 points)

No words seem to add up but I’ll attempt addition anyways and try to be brief….fingers crossed 🤞!! This post is a movie/manual for consumption, just the honesty that everyone needs!! Here’s what the universe showed me today…..one…I just signed up to this thread today!! Two….this was the first thing I read….yup lol 😂!! Three I just joined a web dev boot camp two weeks ago….(irony times a million!!) Last but surely not the least….not quite an engineer but I am black and very much into tech!!! So I’ll stop there because it’s impossible to cover everything but…your post is pure energy alignment for me so sending major love ❤️ vibes to you for the jewels 💎 you’ve put here!! That’s some kind of wine 🍷 and I’d love to pick your brain for more nuggets sir you’re loaded!! Peace ✌️ to you I’ve now got to go study this JavaScript that I’m drowning in currently….what a delicious detour this has been!!

### Comment 334 by u/Learicist (1 points)

This is awesome.

### Comment 335 by u/nomadProgrammer (1 points)

> When I first started, I was enamored with technology and programming and computer science. I'm over it.

    ++;

### Comment 336 by u/stevengonsalvez (1 points)

tressel.xyz save

### Comment 337 by u/Professional_Task951 (1 points)

Will comment here after 10 years in industry...

### Comment 338 by u/gilfoyle222 (1 points)

this is literally the best thing i read this year.  but am  the only one who read/ heard this in rick's voice (from rick and morty)

someone please convert this rant to a monologue in rick's voice or just make a episode out of it coz this shit is so good

### Comment 339 by u/beren-111 (1 points)

Bookmarking this absolute goldmine!

### Comment 340 by u/supThread (1 points)

Still saner advice than lots I've found on Reddit - thanks for this!

### Comment 341 by u/theoppositeofsmart (1 points)

This post is fucking awesome! I can relate to lot of stuff said here. I agree that people die and I want good memories to be my legacy. Friends and family are what matter the most to me. I loved tech but a job in tech has ruined it a bit for me. Chasing deadlines and collaborating with some people who do not want to listen at all made me loose interest. I hope I get it back. 

Have a great fucking life man. Cheers!

### Comment 342 by u/pmz (1 points)

"Paying for classes, books, conferences is worth it"

what do you think works best.Self paced classes, like Udemy,Plurasight or instructor led face to face classes and workshops?

### Comment 343 by u/OkMacaron493 (1 points)

The techiest thing you can do is detox from technology when you aren’t working.
“That was life and I lived it” - Brad Pitt, tree of life.

### Comment 344 by u/TotalRude (1 points)

hey op, what's your view about stoicism? and do you use it on everyday routine?

### Comment 345 by u/geekgeek2019 (1 points)

3 years old post but does gpa matter after all this?

### Comment 346 by u/lousuan (1 points)

This is the best post i have ever seen in software engineering.

