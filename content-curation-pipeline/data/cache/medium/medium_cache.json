{
  "article_d2bc4a0ac3d7": {
    "timestamp": 1746588568.386035,
    "data": {
      "id": "d2bc4a0ac3d7",
      "title": "Software Engineering Needs A Hippocratic Oath",
      "subtitle": "Here\u2019s the draft. Do you think I missed anything?",
      "author": "2053aaf853f5",
      "publication_id": "5517fd7b58a6",
      "published_at": "2025-02-06 18:48:38",
      "last_modified_at": "2025-02-21 17:16:55",
      "boosted_at": "2025-02-06 20:18:39",
      "tags": [
        "software-development",
        "coding",
        "ethics",
        "ux",
        "technology"
      ],
      "topics": [
        "programming"
      ],
      "claps": 3961,
      "voters": 309,
      "word_count": 2143,
      "responses_count": 129,
      "reading_time": 8.470125786163521,
      "url": "https://levelup.gitconnected.com/software-engineering-needs-a-hippocratic-oath-d2bc4a0ac3d7",
      "unique_slug": "software-engineering-needs-a-hippocratic-oath-d2bc4a0ac3d7",
      "image_url": "https://miro.medium.com/1*H8YBvZrYebvHnz92Oat34w.jpeg",
      "lang": "en",
      "is_series": false,
      "is_locked": true,
      "is_shortform": false,
      "top_highlight": "Let's not even start with the obvious ones like writing software for medical robots, airplanes, cars, trains, etc. Just take accessibility as an example. 95.9% of all webpages out there fail to meet accessibility guidelines. That's deliberate. Deliberate ignorance, carelessness, and lack of empathy. Or maybe another not so obvious one - OpenAI scraping copyrighted content to train its models while caring very little about the consequences.",
      "content": "Software Engineering Needs A Hippocratic Oath\n\nHere's the draft. Do you think I missed anything?\n\nBlue screens across the globe. Beeping cockpits, puzzled pilots, grieving relatives at destination airports. Passengers in Nissans across the world cluelessly driving unsafe cars, Volkswagen owners unwittingly becoming environmental offenders. I could go on. It's a long list and these are just some of the particularly famous examples of poorly written software that resulted in the costs being paid in human lives. The more you look, the more you'll find, and the more I think about it, the more apparent it becomes - we have never treated software development with enough care and consideration for human lives. In fact, quite the opposite. We went from \"don't be evil\" to \"move fast and break things\", to dark UX patterns, untested code and deliberately malicious software practices. This needs to stop.\n\nOne of my engineering managers years ago had a famous motto: \"it's just code, not heart-surgery\". Years later, I've grown to learn how wrong he was. A botched cardiovascular surgery will likely directly affect the life of just one person. Bad code - be that by deliberate design or not - has the potential to devastate millions of lives.\n\nWe're living in the Wild West of software development, where there seem to be fewer and fewer rules, and less and less responsibility and accountability taken for human-centric software solutions.\n\nI used to be very nonchalant about my code, the features I wrote, or the A/B test I ran. It was \"just code, not heart-surgery\", until it slowly dawned upon me over my career that there was a whole lot more to it.\n\nLet's not even start with the obvious ones like writing software for medical robots, airplanes, cars, trains, etc. Just take accessibility as an example. 95.9% of all webpages out there fail to meet accessibility guidelines. That's deliberate. Deliberate ignorance, carelessness, and lack of empathy. Or maybe another not so obvious one - OpenAI scraping copyrighted content to train its models while caring very little about the consequences.\n\nBecause no software engineer is trained to care about any of it. Accessibility is not being proactively taught, nor is it a requirement for front-end development jobs. Dark UX patterns have to be made illegal for businesses to stop resorting to them. We have reached the point where we fear the internet itself, and we ban software products purely based on where they come from.\n\nWe have gone from \"don't be evil\" to full-on \"profit at any cost\". Including human lives. This needs to stop. Software development needs a Hippocratic Oath.\n\nWhich would go like so, while also making sure you have the original for reference and some additional thoughts on each section.\n\nI swear to fulfill, to the best of my ability and judgment, this covenant: I will respect the hard-won scientific gains of those physicians in whose steps I walk, and gladly share such knowledge as is mine with those who are to follow.\n\nI will respect the hard-won technological and engineering gains of those software engineers in whose steps I walk, and gladly share such knowledge as is mine, with those who are to follow.\n\nWhat comes to mind here are a few things like mentoring, passing on information seasoned with the added knowledge and experience you gained over the years. I have seen engineers create solutions and guard the knowledge to ensure being indispensable. Not a good look for the engineer, and it will introduce a host of issues in an engineering organisation, from poor culture to inflated development costs and a high likelihood of inadequate uses of the solution leading to buggy software that will impact users negatively.\n\nI will apply, for the benefit of the sick, all measures that are required, avoiding those twin traps of overtreatment and therapeutic nihilism.\n\nI will apply, for the benefit of all users, all measures that are required, avoiding those twin traps of over-engineering and corner-cutting.\n\nAs engineers, we often fall into the trap of over-engineering. I, for one, am a big promoter of KISS as I think it's the most pragmatic software design principle that doesn't only help code and architecture simple, testable and maintainable, but also prevents cutting corners when the business pushes us to do so. Some corners can be cut, others not so much. If, for instance, you implement lax security or poor accessibility to cut costs, you've cut the wrong corners, and you're not building software that's for the benefit of all users.\n\nI will remember that there is art to medicine as well as science, and that warmth, sympathy, and understanding may outweigh the surgeon's knife or the chemist's drug.\n\nI will remember that there is art to software engineering as well as science, and that good documentation, simple design may outweigh the architect's itch for complexity and the developer's endless pursuit for new and shiny.\n\nIt takes a few years as a software engineer to realise that more lines of code, fancy implementations, high-complexity codebases are nothing to be proud of. On the other hand, easily readable and well-documented, robust code, will go far, and even years later you'll be hearing back praise for leaving behind a codebase that others could instantly pick up and work with. And no, going for the new and shiny is rarely the right decision. Be that for the engineering organisation or our users.\n\nI will not be ashamed to say \"I know not\", nor will I fail to call in my colleagues when the skills of another are needed for a patient's recovery.\n\nI will not be ashamed to say \"I know not\", nor will I fail to call in my colleagues when the skills of another are needed for a pragmatic, maintainable solution.\n\nThat's not to say you need to ask for help for every little thing all the time. But, you must also know when it's time to pull in additional expertise. It's perfectly OK to admit you don't know something. Just the other day, my team and I ran a workshop where we each identified the technologies and product areas we were not comfortable with. Best workshop ever. It will help us tremendously going forward.\n\nI will respect the privacy of my patients, for their problems are not disclosed to me that the world may know. Most especially must I tread with care in matters of life and death. If it is given me to save a life, all thanks. But it may also be within my power to take a life; this awesome responsibility must be faced with great humbleness and awareness of my own frailty. Above all, I must not play at God.\n\nI will respect the privacy of my users, for their data and behaviour patterns are not disclosed to me that the world may know. Most especially must I tread with care in matters of life and death. If it is given me to improve a life with my code, all thanks. But it may also be within my power to take a life, or cause hardship, be that emotional, mental or physical; this awesome responsibility must be faced with great humbleness and awareness of my own limitation as an engineer and the capabilities of the tools I use and the code that I write. Above all, I must not play at God.\n\nThis is a very loaded one. As software engineers, we know how much impact our skills have. I remember when I wrote my first lines of code 19 years ago. The sheer fact that I could turn a blank Notepad page into a website within just minutes made me feel like some mythological God. I was walking around like Bruce Almighty to the sound of \"I've got the power.\" We can alter the future with code, and as such with great power comes great responsibility. We may not be Gods, but our work can sure have a very immediate impact on people's lives.\n\nI will remember that I do not treat a fever chart, a cancerous growth, but a sick human being, whose illness may affect the person's family and economic stability. My responsibility includes these related problems, if I am to care adequately for the sick.\n\nI will remember that I do not write code just for fun, for business success, but for humans, users, whose life, wellbeing, life-choices and daily routine may be affected by my engineering decisions. My responsibility includes these related problems, if I am to write truly useful software.\n\nIt's so easy to get lost in \"the zone\". Writing code is fun. So is solving complex problems. That's why it's called software engineering and not code-monkeying - though inevitably we do that too, every so often. But we need to be cognisant that ultimately what we are hired for isn't the great code, quirky implementations or exotic software architectures, but rather to provide value to users, and any code change we make, any feature we build, should improve lives. The opposite is not acceptable.\n\nI will prevent disease whenever I can, for prevention is preferable to cure.\n\nI will prevent outages and bugs whenever I can, for prevention is preferable to debugging and damage control.\n\nTaking responsibility for the code you write and the feature that ends up in production is a value not as many engineers share as you'd think. I have been fortunate to work with teams where we cared more about the team's success rather than individual success, so we helped each other prevent issues as much as possible. When bugs are prevented, everyone wins - the team, the business and also the users.\n\nI will remember that I remain a member of society, with special obligations to all my fellow human beings, those sound of mind and body as well as the infirm.\n\nI will remember that I remain a member of society, with special obligations to all my fellow human beings, those sound of mind and body as well as the infirm.\n\nOne word: accessibility. When 95.9% of the web is still not accessible, we clearly have a problem of not writing software for all fellow human beings. Try to browse the web for a day with just a keyboard or a screen-reader. You will give up far sooner than that. Suddenly, the vast internet you knew is shrunken down to just a few websites and apps. Building accessible software is good for everyone, remember that.\n\nIf I do not violate this oath, may I enjoy life and art, respected while I live and remembered with affection thereafter. May I always act so as to preserve the finest traditions of my calling and may I long experience the joy of healing those who seek my help.\n\nIf I do not violate this oath, may I enjoy life and art, respected while I live and remembered with affection thereafter. May I always act so as to preserve the finest traditions of my calling and may I long experience the joy of writing software that makes the world a better place one line of code at a time.\n\nNeed I say more? Following these simple guidelines should result in a happy software engineer and a long successful career. When you get down to it, a lot of it is common sense, but as we all know, common sense is not so common, therefore apparently we need to now consider the Hippocratic Oath for software engineers.\n\nSoftware is everywhere. Software is an intrinsic part of life in 2025. We need to treat it accordingly. We need a universal guideline, just like medical doctors do.\n\nWe're long past the days of silly websites that we'd \"build so they would come\". Every line of code we deploy has an impact on people's lives. Some of those people are our relatives, friends, and even ourselves. So, let's design and build software responsibly.\n\nAnd on that note, what would you add or modify in this draft Hippocratic Oath of Software Engineering?\n\nP.S. Coincidentally, I just received this award today, and you know what? It makes me feel good. In a warm and fuzzy way. \ud83e\udd17 I guess I must be doing something right... \ud83d\ude42\n\nLater edit\n\nGiven the overwhelming positive feedback to this article, the Hippocratic Oath of Software Engineering now has a dedicated website, and the first version is already live.\n\nAttila Vago - Software Engineer improving the world one line of code at a time. Cool nerd since forever, writer of codes, blogs and books. Author. Web accessibility advocate, LEGO fan, vinyl record collector. Loves craft beer! Read my Hello story here! Subscribe for more stories about LEGO, tech, coding and accessibility! For my less regular readers, I also write about random bits and writing."
    }
  },
  "content_d2bc4a0ac3d7": {
    "timestamp": 1746588568.869217,
    "data": "Software Engineering Needs A Hippocratic Oath\n\nHere's the draft. Do you think I missed anything?\n\nBlue screens across the globe. Beeping cockpits, puzzled pilots, grieving relatives at destination airports. Passengers in Nissans across the world cluelessly driving unsafe cars, Volkswagen owners unwittingly becoming environmental offenders. I could go on. It's a long list and these are just some of the particularly famous examples of poorly written software that resulted in the costs being paid in human lives. The more you look, the more you'll find, and the more I think about it, the more apparent it becomes - we have never treated software development with enough care and consideration for human lives. In fact, quite the opposite. We went from \"don't be evil\" to \"move fast and break things\", to dark UX patterns, untested code and deliberately malicious software practices. This needs to stop.\n\nOne of my engineering managers years ago had a famous motto: \"it's just code, not heart-surgery\". Years later, I've grown to learn how wrong he was. A botched cardiovascular surgery will likely directly affect the life of just one person. Bad code - be that by deliberate design or not - has the potential to devastate millions of lives.\n\nWe're living in the Wild West of software development, where there seem to be fewer and fewer rules, and less and less responsibility and accountability taken for human-centric software solutions.\n\nI used to be very nonchalant about my code, the features I wrote, or the A/B test I ran. It was \"just code, not heart-surgery\", until it slowly dawned upon me over my career that there was a whole lot more to it.\n\nLet's not even start with the obvious ones like writing software for medical robots, airplanes, cars, trains, etc. Just take accessibility as an example. 95.9% of all webpages out there fail to meet accessibility guidelines. That's deliberate. Deliberate ignorance, carelessness, and lack of empathy. Or maybe another not so obvious one - OpenAI scraping copyrighted content to train its models while caring very little about the consequences.\n\nBecause no software engineer is trained to care about any of it. Accessibility is not being proactively taught, nor is it a requirement for front-end development jobs. Dark UX patterns have to be made illegal for businesses to stop resorting to them. We have reached the point where we fear the internet itself, and we ban software products purely based on where they come from.\n\nWe have gone from \"don't be evil\" to full-on \"profit at any cost\". Including human lives. This needs to stop. Software development needs a Hippocratic Oath.\n\nWhich would go like so, while also making sure you have the original for reference and some additional thoughts on each section.\n\nI swear to fulfill, to the best of my ability and judgment, this covenant: I will respect the hard-won scientific gains of those physicians in whose steps I walk, and gladly share such knowledge as is mine with those who are to follow.\n\nI will respect the hard-won technological and engineering gains of those software engineers in whose steps I walk, and gladly share such knowledge as is mine, with those who are to follow.\n\nWhat comes to mind here are a few things like mentoring, passing on information seasoned with the added knowledge and experience you gained over the years. I have seen engineers create solutions and guard the knowledge to ensure being indispensable. Not a good look for the engineer, and it will introduce a host of issues in an engineering organisation, from poor culture to inflated development costs and a high likelihood of inadequate uses of the solution leading to buggy software that will impact users negatively.\n\nI will apply, for the benefit of the sick, all measures that are required, avoiding those twin traps of overtreatment and therapeutic nihilism.\n\nI will apply, for the benefit of all users, all measures that are required, avoiding those twin traps of over-engineering and corner-cutting.\n\nAs engineers, we often fall into the trap of over-engineering. I, for one, am a big promoter of KISS as I think it's the most pragmatic software design principle that doesn't only help code and architecture simple, testable and maintainable, but also prevents cutting corners when the business pushes us to do so. Some corners can be cut, others not so much. If, for instance, you implement lax security or poor accessibility to cut costs, you've cut the wrong corners, and you're not building software that's for the benefit of all users.\n\nI will remember that there is art to medicine as well as science, and that warmth, sympathy, and understanding may outweigh the surgeon's knife or the chemist's drug.\n\nI will remember that there is art to software engineering as well as science, and that good documentation, simple design may outweigh the architect's itch for complexity and the developer's endless pursuit for new and shiny.\n\nIt takes a few years as a software engineer to realise that more lines of code, fancy implementations, high-complexity codebases are nothing to be proud of. On the other hand, easily readable and well-documented, robust code, will go far, and even years later you'll be hearing back praise for leaving behind a codebase that others could instantly pick up and work with. And no, going for the new and shiny is rarely the right decision. Be that for the engineering organisation or our users.\n\nI will not be ashamed to say \"I know not\", nor will I fail to call in my colleagues when the skills of another are needed for a patient's recovery.\n\nI will not be ashamed to say \"I know not\", nor will I fail to call in my colleagues when the skills of another are needed for a pragmatic, maintainable solution.\n\nThat's not to say you need to ask for help for every little thing all the time. But, you must also know when it's time to pull in additional expertise. It's perfectly OK to admit you don't know something. Just the other day, my team and I ran a workshop where we each identified the technologies and product areas we were not comfortable with. Best workshop ever. It will help us tremendously going forward.\n\nI will respect the privacy of my patients, for their problems are not disclosed to me that the world may know. Most especially must I tread with care in matters of life and death. If it is given me to save a life, all thanks. But it may also be within my power to take a life; this awesome responsibility must be faced with great humbleness and awareness of my own frailty. Above all, I must not play at God.\n\nI will respect the privacy of my users, for their data and behaviour patterns are not disclosed to me that the world may know. Most especially must I tread with care in matters of life and death. If it is given me to improve a life with my code, all thanks. But it may also be within my power to take a life, or cause hardship, be that emotional, mental or physical; this awesome responsibility must be faced with great humbleness and awareness of my own limitation as an engineer and the capabilities of the tools I use and the code that I write. Above all, I must not play at God.\n\nThis is a very loaded one. As software engineers, we know how much impact our skills have. I remember when I wrote my first lines of code 19 years ago. The sheer fact that I could turn a blank Notepad page into a website within just minutes made me feel like some mythological God. I was walking around like Bruce Almighty to the sound of \"I've got the power.\" We can alter the future with code, and as such with great power comes great responsibility. We may not be Gods, but our work can sure have a very immediate impact on people's lives.\n\nI will remember that I do not treat a fever chart, a cancerous growth, but a sick human being, whose illness may affect the person's family and economic stability. My responsibility includes these related problems, if I am to care adequately for the sick.\n\nI will remember that I do not write code just for fun, for business success, but for humans, users, whose life, wellbeing, life-choices and daily routine may be affected by my engineering decisions. My responsibility includes these related problems, if I am to write truly useful software.\n\nIt's so easy to get lost in \"the zone\". Writing code is fun. So is solving complex problems. That's why it's called software engineering and not code-monkeying - though inevitably we do that too, every so often. But we need to be cognisant that ultimately what we are hired for isn't the great code, quirky implementations or exotic software architectures, but rather to provide value to users, and any code change we make, any feature we build, should improve lives. The opposite is not acceptable.\n\nI will prevent disease whenever I can, for prevention is preferable to cure.\n\nI will prevent outages and bugs whenever I can, for prevention is preferable to debugging and damage control.\n\nTaking responsibility for the code you write and the feature that ends up in production is a value not as many engineers share as you'd think. I have been fortunate to work with teams where we cared more about the team's success rather than individual success, so we helped each other prevent issues as much as possible. When bugs are prevented, everyone wins - the team, the business and also the users.\n\nI will remember that I remain a member of society, with special obligations to all my fellow human beings, those sound of mind and body as well as the infirm.\n\nI will remember that I remain a member of society, with special obligations to all my fellow human beings, those sound of mind and body as well as the infirm.\n\nOne word: accessibility. When 95.9% of the web is still not accessible, we clearly have a problem of not writing software for all fellow human beings. Try to browse the web for a day with just a keyboard or a screen-reader. You will give up far sooner than that. Suddenly, the vast internet you knew is shrunken down to just a few websites and apps. Building accessible software is good for everyone, remember that.\n\nIf I do not violate this oath, may I enjoy life and art, respected while I live and remembered with affection thereafter. May I always act so as to preserve the finest traditions of my calling and may I long experience the joy of healing those who seek my help.\n\nIf I do not violate this oath, may I enjoy life and art, respected while I live and remembered with affection thereafter. May I always act so as to preserve the finest traditions of my calling and may I long experience the joy of writing software that makes the world a better place one line of code at a time.\n\nNeed I say more? Following these simple guidelines should result in a happy software engineer and a long successful career. When you get down to it, a lot of it is common sense, but as we all know, common sense is not so common, therefore apparently we need to now consider the Hippocratic Oath for software engineers.\n\nSoftware is everywhere. Software is an intrinsic part of life in 2025. We need to treat it accordingly. We need a universal guideline, just like medical doctors do.\n\nWe're long past the days of silly websites that we'd \"build so they would come\". Every line of code we deploy has an impact on people's lives. Some of those people are our relatives, friends, and even ourselves. So, let's design and build software responsibly.\n\nAnd on that note, what would you add or modify in this draft Hippocratic Oath of Software Engineering?\n\nP.S. Coincidentally, I just received this award today, and you know what? It makes me feel good. In a warm and fuzzy way. \ud83e\udd17 I guess I must be doing something right... \ud83d\ude42\n\nLater edit\n\nGiven the overwhelming positive feedback to this article, the Hippocratic Oath of Software Engineering now has a dedicated website, and the first version is already live.\n\nAttila Vago - Software Engineer improving the world one line of code at a time. Cool nerd since forever, writer of codes, blogs and books. Author. Web accessibility advocate, LEGO fan, vinyl record collector. Loves craft beer! Read my Hello story here! Subscribe for more stories about LEGO, tech, coding and accessibility! For my less regular readers, I also write about random bits and writing."
  },
  "article_655477dabf3a": {
    "timestamp": 1746588569.6141891,
    "data": {
      "id": "655477dabf3a",
      "title": "I Wrote Your Software Engineering Goals For 2025, So You Don\u2019t Have To",
      "subtitle": "Regardless of the level you\u2019re at, there is always something you can do to grow, so what will it be this year?",
      "author": "2053aaf853f5",
      "publication_id": "5517fd7b58a6",
      "published_at": "2025-01-02 18:28:10",
      "last_modified_at": "2025-01-03 18:50:27",
      "boosted_at": "2025-01-03 13:16:10",
      "tags": [
        "coding",
        "software-development",
        "artificial-intelligence",
        "programming",
        "technology"
      ],
      "topics": [
        "work",
        "programming"
      ],
      "claps": 2247,
      "voters": 392,
      "word_count": 2483,
      "responses_count": 60,
      "reading_time": 9.569811320754717,
      "url": "https://levelup.gitconnected.com/i-wrote-your-software-engineering-goals-for-2025-so-you-dont-have-to-655477dabf3a",
      "unique_slug": "i-wrote-your-software-engineering-goals-for-2025-so-you-dont-have-to-655477dabf3a",
      "image_url": "https://miro.medium.com/1*RY2uWooHo8L5H_oDeqBrTQ.jpeg",
      "lang": "en",
      "is_series": false,
      "is_locked": true,
      "is_shortform": false,
      "top_highlight": "The best engineer you can compare yourself to for healthy growth, is yourself.",
      "content": "I Wrote Your Software Engineering Goals For 2025, So You Don't Have To\n\nRegardless of the level you're at, there is always something you can do to grow, so what will it be this year?\n\nYou know that yearly goal-setting exercise at work most of us loathe? If you do, maybe you shouldn't. Loathe it, that is. Any goal you set for the quarter, half-year, or the entire upcoming year should help you advance your career. Yes, it's usually coupled with company goals, but that doesn't mean you can't be smart - pun intended - about it. I'm not even going to preach about setting acronymic SMART goals, but rather just using opportunities to your advantage. Conventional wisdom may suggest that goals should be measurable, while I think the outcome of your goals should make you feel happy. Does that make me a hippie software engineer? Fine, so be it. But we spend a 3rd of our days working, we may as well make the most of that time.\n\nDefine YOUR next level\n\nTo grow, you need to understand where you're at. Often, engineers make the mistake of comparing themselves to other engineers. In fairness, this is not just a software engineering tendency. This is a human tendency. But I'd argue it's the wrong one. You tend to compare yourself to another engineer, either because you admire them or you are jealous of their success.\n\nWhile the former is largely a positive sentiment, it typically sets people up for failure. I might very well admire President Obama, but I will never be able to become the next president of the USA. I'm neither American nor do I possess many of the qualities a president like Obama was, requires. Admiration has the tendency to breed unrealistic expectations of ourselves.\n\nThe latter - jealousy - is inherently a negative sentiment, and thus the wrong incentive or drive to reach a new level in your career or your skills. It can be powerful, and I won't deny that it can work, but again, like with admiration, you're running the risk of setting yourself up for failure and ending the year disappointed. Often when we're jealous of someone else's success, and we try to replicate it, we do so without knowing their journey. And journeys vary from person to person.\n\nThe best engineer you can compare yourself to for healthy growth, is yourself.\n\nThis is not rocket science. As soon as you're honest with yourself about where you're at in your career, you have every chance of defining quite successfully your growth path for the future, be that short or longer term.\n\nThere are no soft skills\n\nLast year I have reached the conclusion that all the skills we've been calling \"soft skills\" in software engineering are frankly just as hard - and at times even harder - than the so-called \"hard skills\". You can be the best at systems design if you're difficult to work with, struggle with passing your knowledge on, documenting your ideas, delivering in a timely manner, people will prefer to turn to engineers who possess not just the knowledge but also the skills that make that knowledge have the most impact.\n\nThe assumption is often that the soft skills are easy to hone, but I find that a surprising number of engineers are actually much quicker at learning a new programming language than mentorship, communication, documentation, empathy, patience, adaptation, time management and the likes. None of this is easy and most of these don't necessarily come naturally to most engineers, so it's a learnt skill, and it takes time. Years. Prepare yourself for that and every year focus on just one, or maybe two. Last year, for instance, I spent polishing up my communication skills, and it did me good, but more on that later.\n\nAssume that picking up soft skills will be at least as tough and time-consuming as getting proficient in a new development stack.\n\nNo matter what level you're at, working on your soft skills is incredibly important. Ask your team-mates for feedback, talk to your manager, or go as high as the CTO if you can. They'll all give you ideas on which soft skill they see you needing to work on the most, then do the work. Patiently. This is not a sprint-sized task, not even an epic or a saga. Or a deliverable. You don't just learn time management and check it off the list. You continuously become better at it because even when you think you're great at it, there'll be a project that will make you improve on that, or you'll meet engineers who have an even more efficient workflow.\n\nAbout that code\n\nThink less about the code, more about the problem you're solving. Far too often I see engineers fixating on the code rather than the issue they're solving. This tendency is natural up to a point, but as you move on from being a junior software developer, you need to develop the ability of zooming in and out of the code and understand where certain approaches make more sense than others.\n\nThink of it like a LEGO set. You need to understand what you're building for the building blocks to make sense.\n\nRemember that code is merely the machine-readable representation of the solution for the business you work for, the most valuable artefact is the solution, not the code; therefore you should try to get to the solution as efficiently as possible.\n\nThat's not to say that code quality doesn't matter. Quite the opposite. The way I tend to look at keeping the code I write at a quality-level that both myself and the teams I work are happy with, is by keeping in mind just one software design principle: KISS. Always keep simplicity in mind. The business will thank you, you'll thank yourself, and so will everyone working on that code later.\n\nThe fine art of communication\n\nThis is not something you'll pick up in a single year, maybe not even ten. It's going to be an ongoing learning experience, and you need to accept that. As you grow in your career, your communication skills will also be tested in contexts you have not yet been in. It's one thing to have a chat with a peer, and quite another having to defend a migration that costs the business 3-months worth of your effort, a complete refactor of your frontend from monolith to microfrontends to engineering managers, product owners, VPs, and even CTOs.\n\nEach of these conversations comes with a different set of challenges. Boring the VP of engineering with nitty-gritty details is not only pointless but quite likely a waste of their time. On the other hand, your peer will likely need precisely that level of minute detail to properly grasp what you're trying to achieve.\n\nIt's no wonder every tool out there, from Slack to Jira, is trying to solve one core challenge: communication. Because it's hard. Damn hard.\n\nThe tone, the content, and the delivery of the message all matter a great deal. Often a debate is best had in person or a Zoom meeting with video on, while text-based communication often works well for asynchronous communication or information meant to be referenced later. Never forget that effective communication can move mountains in an engineering organisation. Two people can present the exact same solution, and the one who will be listened to and recognised for it will be the one with better communications skills.\n\nNotes to graduates and juniors\n\nFolks, please learn the damn languages you claim to know. Over the last few years, I keep seeing an increasingly degraded graduate and junior candidate pool. I haven't yet looked into what might be causing this - one suspect is AI - but rocking up to a web developer interview not knowing the basics of HTML is simply unacceptable.\n\nSkipping the basics to appear more experienced is not going to help anyone. I'd rather work with a junior who just knows HTML, CSS, and JS than a \"React expert\" Googling \"how to create a React input\".\n\nTo be perfectly honest, I actually don't consider any library or framework to be a skill, but rather the application or the intersection of a technology stack. A good Python engineer will pick up both Django or Flask as they go. A Good JS engineer will tackle anything from Next.js to Vue, Angular or whatever else there is, in no-time and without any real negative impact on the team. A \"React engineer\" trowing Tailwind at everything, however, will quickly become a burden on their team.\n\nIf you want a one-liner advice, this is it: just learn to program. Everything else will inevitably follow, and believe it or not, you will be much more proficient and efficient in solving real-world challenges while learning how to zoom in and out of the code and keeping it simple.\n\nDear seniors and above\n\nWhen exactly did we become coding micromanagers? This is so not what we're paid for. Whether our team-mates decided to use a switch instead of what perhaps could have easily been a simple if statement, or didn't put a few constants into a separate file, is far too trivial to police. In fact, what senior, staff and principal engineers should do, is quite the opposite.\n\nSenior engineers exist to solve the high-level problems, and come up with solutions to prevent the low-level issues occurring. Focus on having a multiplier effect.\n\nInstead of just looking at a problem, be that infrastructural, business-logic level or architectural, and trying to solve that specific problem, think about why the problem occurred in the first place, is there a chance of it happening again, and devise a solution to prevent it once and for all. It can be as \"simple\" as writing easy to parse documentation, or as complex as migrating an entire codebase. My rule of thumb is if you get asked the same question more than once, it's a preventable issue, and likely yours to solve.\n\nSometimes, less, really is more\n\nDo less. Over 2024 I tried doing just that. I realised not everything had to be solved by me. There were people ready to lend a hand. Tasks didn't have to be finished early, and sometimes being late wasn't my fault - we just underestimated the work's complexity.\n\nJust like you would do on an airplane in a decompression event. You first place the oxygen mask on your own face, then anyone else needing support next to you. When you're well rested, in a happy place you're a much better engineer and your problem-solving skills work far better than when you're burnt out, stressed out and sleep-deprived.\n\nYou cannot be a good software engineer if you're not in a good place emotionally. Take care of yourself first.\n\nDon't do the bare minimum, that's not what this is about, but only do the maximum of what you can within the time you have and for the money you're paid. A business agreement between employer and employee goes both ways. It has to be worth to both you and the company you work for. Overworking yourself and then complaining you're not being appreciated enough is not the right strategy and I have learnt that very early on in my career when my manager told me \"If I ever catch you again working until 1AM, I will fire you.\" The moral of the story is: don't work harder, learn to estimate the work better.\n\nAI isn't here to take your job\n\nBut you also cannot stay oblivious to it. If you're using it like a tool, be very vigilant, not to shoot yourself in the foot with it. The last thing you want is realising a year from now that you've forgotten the basics or that you've ended up with a codebase so bloated and entangled that nobody can make sense of it anymore. Efficient code that maximises business value will forever remain a key consideration.\n\nYou don't have to be impressed by AI to know how to use it wisely or integrate it. Dismissing it outright is the irresponsible thing to do.\n\nAI integration is also something I would encourage developers to look into. You don't have to like or care about AI to be tasked with an AI integration. Think of it like any ol' API. Like it or not, machine learning and generative AI is becoming one of the many capabilities a software can have, and some old features even migrate to using AI. You can't ignore that if you want to maximise your potential as a software engineer.\n\nIt was never meant to be easy\n\nEight years ago, I wrote an article that went viral. I still stand by it. Coding has become pop culture, but programming has not. Software engineering is not easy, and it's not meant to be easy. Moreover, it's a volatile profession, and while it pays well, you can also find yourself without a job for many months, no matter how experienced you are.\n\nThe best software engineers stay because they love software engineering. Solving problems is what makes them tick.\n\nIt takes a special kind of \"crazy\" to enjoy solving tough problems and do that for decades. Coding is and will remain a relatively small part of the job and, in some ways, increasingly the easier part, while everything else seems to get tougher and tougher. We're not in 1999 anymore, and as much I question the need of increasingly abstract levels in modern software development, it is the reality we have to work with every day.\n\nWith software becoming increasingly popular, it also means we inevitably end up in business contexts that we never thought of before and learning how to build products we couldn't even imagine a decade or two ago with people we never had to interact with before. We can only do that by continuously growing not just our programming skills, but our soft skills as well. It's the key to staying visible, staying relevant in our industry.\n\nSo, what other goals are you looking at this year, or which one of the above are you looking to focus on in 2025?\n\nP.S. A year later this 2024 recommendation of how to become a better software engineer, still applies, so you might want to give that a read as well. \ud83d\ude09\n\nAttila Vago - Software Engineer improving the world one line of code at a time. Cool nerd since forever, writer of codes, blogs and books. Author. Web accessibility advocate, LEGO fan, vinyl record collector. Loves craft beer! Read my Hello story here! Subscribe for more stories about LEGO, tech, coding and accessibility! For my less regular readers, I also write about random bits and writing."
    }
  },
  "content_655477dabf3a": {
    "timestamp": 1746588570.4474912,
    "data": "I Wrote Your Software Engineering Goals For 2025, So You Don't Have To\n\nRegardless of the level you're at, there is always something you can do to grow, so what will it be this year?\n\nYou know that yearly goal-setting exercise at work most of us loathe? If you do, maybe you shouldn't. Loathe it, that is. Any goal you set for the quarter, half-year, or the entire upcoming year should help you advance your career. Yes, it's usually coupled with company goals, but that doesn't mean you can't be smart - pun intended - about it. I'm not even going to preach about setting acronymic SMART goals, but rather just using opportunities to your advantage. Conventional wisdom may suggest that goals should be measurable, while I think the outcome of your goals should make you feel happy. Does that make me a hippie software engineer? Fine, so be it. But we spend a 3rd of our days working, we may as well make the most of that time.\n\nDefine YOUR next level\n\nTo grow, you need to understand where you're at. Often, engineers make the mistake of comparing themselves to other engineers. In fairness, this is not just a software engineering tendency. This is a human tendency. But I'd argue it's the wrong one. You tend to compare yourself to another engineer, either because you admire them or you are jealous of their success.\n\nWhile the former is largely a positive sentiment, it typically sets people up for failure. I might very well admire President Obama, but I will never be able to become the next president of the USA. I'm neither American nor do I possess many of the qualities a president like Obama was, requires. Admiration has the tendency to breed unrealistic expectations of ourselves.\n\nThe latter - jealousy - is inherently a negative sentiment, and thus the wrong incentive or drive to reach a new level in your career or your skills. It can be powerful, and I won't deny that it can work, but again, like with admiration, you're running the risk of setting yourself up for failure and ending the year disappointed. Often when we're jealous of someone else's success, and we try to replicate it, we do so without knowing their journey. And journeys vary from person to person.\n\nThe best engineer you can compare yourself to for healthy growth, is yourself.\n\nThis is not rocket science. As soon as you're honest with yourself about where you're at in your career, you have every chance of defining quite successfully your growth path for the future, be that short or longer term.\n\nThere are no soft skills\n\nLast year I have reached the conclusion that all the skills we've been calling \"soft skills\" in software engineering are frankly just as hard - and at times even harder - than the so-called \"hard skills\". You can be the best at systems design if you're difficult to work with, struggle with passing your knowledge on, documenting your ideas, delivering in a timely manner, people will prefer to turn to engineers who possess not just the knowledge but also the skills that make that knowledge have the most impact.\n\nThe assumption is often that the soft skills are easy to hone, but I find that a surprising number of engineers are actually much quicker at learning a new programming language than mentorship, communication, documentation, empathy, patience, adaptation, time management and the likes. None of this is easy and most of these don't necessarily come naturally to most engineers, so it's a learnt skill, and it takes time. Years. Prepare yourself for that and every year focus on just one, or maybe two. Last year, for instance, I spent polishing up my communication skills, and it did me good, but more on that later.\n\nAssume that picking up soft skills will be at least as tough and time-consuming as getting proficient in a new development stack.\n\nNo matter what level you're at, working on your soft skills is incredibly important. Ask your team-mates for feedback, talk to your manager, or go as high as the CTO if you can. They'll all give you ideas on which soft skill they see you needing to work on the most, then do the work. Patiently. This is not a sprint-sized task, not even an epic or a saga. Or a deliverable. You don't just learn time management and check it off the list. You continuously become better at it because even when you think you're great at it, there'll be a project that will make you improve on that, or you'll meet engineers who have an even more efficient workflow.\n\nAbout that code\n\nThink less about the code, more about the problem you're solving. Far too often I see engineers fixating on the code rather than the issue they're solving. This tendency is natural up to a point, but as you move on from being a junior software developer, you need to develop the ability of zooming in and out of the code and understand where certain approaches make more sense than others.\n\nThink of it like a LEGO set. You need to understand what you're building for the building blocks to make sense.\n\nRemember that code is merely the machine-readable representation of the solution for the business you work for, the most valuable artefact is the solution, not the code; therefore you should try to get to the solution as efficiently as possible.\n\nThat's not to say that code quality doesn't matter. Quite the opposite. The way I tend to look at keeping the code I write at a quality-level that both myself and the teams I work are happy with, is by keeping in mind just one software design principle: KISS. Always keep simplicity in mind. The business will thank you, you'll thank yourself, and so will everyone working on that code later.\n\nThe fine art of communication\n\nThis is not something you'll pick up in a single year, maybe not even ten. It's going to be an ongoing learning experience, and you need to accept that. As you grow in your career, your communication skills will also be tested in contexts you have not yet been in. It's one thing to have a chat with a peer, and quite another having to defend a migration that costs the business 3-months worth of your effort, a complete refactor of your frontend from monolith to microfrontends to engineering managers, product owners, VPs, and even CTOs.\n\nEach of these conversations comes with a different set of challenges. Boring the VP of engineering with nitty-gritty details is not only pointless but quite likely a waste of their time. On the other hand, your peer will likely need precisely that level of minute detail to properly grasp what you're trying to achieve.\n\nIt's no wonder every tool out there, from Slack to Jira, is trying to solve one core challenge: communication. Because it's hard. Damn hard.\n\nThe tone, the content, and the delivery of the message all matter a great deal. Often a debate is best had in person or a Zoom meeting with video on, while text-based communication often works well for asynchronous communication or information meant to be referenced later. Never forget that effective communication can move mountains in an engineering organisation. Two people can present the exact same solution, and the one who will be listened to and recognised for it will be the one with better communications skills.\n\nNotes to graduates and juniors\n\nFolks, please learn the damn languages you claim to know. Over the last few years, I keep seeing an increasingly degraded graduate and junior candidate pool. I haven't yet looked into what might be causing this - one suspect is AI - but rocking up to a web developer interview not knowing the basics of HTML is simply unacceptable.\n\nSkipping the basics to appear more experienced is not going to help anyone. I'd rather work with a junior who just knows HTML, CSS, and JS than a \"React expert\" Googling \"how to create a React input\".\n\nTo be perfectly honest, I actually don't consider any library or framework to be a skill, but rather the application or the intersection of a technology stack. A good Python engineer will pick up both Django or Flask as they go. A Good JS engineer will tackle anything from Next.js to Vue, Angular or whatever else there is, in no-time and without any real negative impact on the team. A \"React engineer\" trowing Tailwind at everything, however, will quickly become a burden on their team.\n\nIf you want a one-liner advice, this is it: just learn to program. Everything else will inevitably follow, and believe it or not, you will be much more proficient and efficient in solving real-world challenges while learning how to zoom in and out of the code and keeping it simple.\n\nDear seniors and above\n\nWhen exactly did we become coding micromanagers? This is so not what we're paid for. Whether our team-mates decided to use a switch instead of what perhaps could have easily been a simple if statement, or didn't put a few constants into a separate file, is far too trivial to police. In fact, what senior, staff and principal engineers should do, is quite the opposite.\n\nSenior engineers exist to solve the high-level problems, and come up with solutions to prevent the low-level issues occurring. Focus on having a multiplier effect.\n\nInstead of just looking at a problem, be that infrastructural, business-logic level or architectural, and trying to solve that specific problem, think about why the problem occurred in the first place, is there a chance of it happening again, and devise a solution to prevent it once and for all. It can be as \"simple\" as writing easy to parse documentation, or as complex as migrating an entire codebase. My rule of thumb is if you get asked the same question more than once, it's a preventable issue, and likely yours to solve.\n\nSometimes, less, really is more\n\nDo less. Over 2024 I tried doing just that. I realised not everything had to be solved by me. There were people ready to lend a hand. Tasks didn't have to be finished early, and sometimes being late wasn't my fault - we just underestimated the work's complexity.\n\nJust like you would do on an airplane in a decompression event. You first place the oxygen mask on your own face, then anyone else needing support next to you. When you're well rested, in a happy place you're a much better engineer and your problem-solving skills work far better than when you're burnt out, stressed out and sleep-deprived.\n\nYou cannot be a good software engineer if you're not in a good place emotionally. Take care of yourself first.\n\nDon't do the bare minimum, that's not what this is about, but only do the maximum of what you can within the time you have and for the money you're paid. A business agreement between employer and employee goes both ways. It has to be worth to both you and the company you work for. Overworking yourself and then complaining you're not being appreciated enough is not the right strategy and I have learnt that very early on in my career when my manager told me \"If I ever catch you again working until 1AM, I will fire you.\" The moral of the story is: don't work harder, learn to estimate the work better.\n\nAI isn't here to take your job\n\nBut you also cannot stay oblivious to it. If you're using it like a tool, be very vigilant, not to shoot yourself in the foot with it. The last thing you want is realising a year from now that you've forgotten the basics or that you've ended up with a codebase so bloated and entangled that nobody can make sense of it anymore. Efficient code that maximises business value will forever remain a key consideration.\n\nYou don't have to be impressed by AI to know how to use it wisely or integrate it. Dismissing it outright is the irresponsible thing to do.\n\nAI integration is also something I would encourage developers to look into. You don't have to like or care about AI to be tasked with an AI integration. Think of it like any ol' API. Like it or not, machine learning and generative AI is becoming one of the many capabilities a software can have, and some old features even migrate to using AI. You can't ignore that if you want to maximise your potential as a software engineer.\n\nIt was never meant to be easy\n\nEight years ago, I wrote an article that went viral. I still stand by it. Coding has become pop culture, but programming has not. Software engineering is not easy, and it's not meant to be easy. Moreover, it's a volatile profession, and while it pays well, you can also find yourself without a job for many months, no matter how experienced you are.\n\nThe best software engineers stay because they love software engineering. Solving problems is what makes them tick.\n\nIt takes a special kind of \"crazy\" to enjoy solving tough problems and do that for decades. Coding is and will remain a relatively small part of the job and, in some ways, increasingly the easier part, while everything else seems to get tougher and tougher. We're not in 1999 anymore, and as much I question the need of increasingly abstract levels in modern software development, it is the reality we have to work with every day.\n\nWith software becoming increasingly popular, it also means we inevitably end up in business contexts that we never thought of before and learning how to build products we couldn't even imagine a decade or two ago with people we never had to interact with before. We can only do that by continuously growing not just our programming skills, but our soft skills as well. It's the key to staying visible, staying relevant in our industry.\n\nSo, what other goals are you looking at this year, or which one of the above are you looking to focus on in 2025?\n\nP.S. A year later this 2024 recommendation of how to become a better software engineer, still applies, so you might want to give that a read as well. \ud83d\ude09\n\nAttila Vago - Software Engineer improving the world one line of code at a time. Cool nerd since forever, writer of codes, blogs and books. Author. Web accessibility advocate, LEGO fan, vinyl record collector. Loves craft beer! Read my Hello story here! Subscribe for more stories about LEGO, tech, coding and accessibility! For my less regular readers, I also write about random bits and writing."
  },
  "article_e3a77153ff1a": {
    "timestamp": 1746588571.252196,
    "data": {
      "id": "e3a77153ff1a",
      "title": "\ud83d\udea97 Red Flags During  A Software Engineering Job Interview",
      "subtitle": "Stop the coding job interview immediately if you spot any of these red flags ",
      "author": "114c2684cfef",
      "publication_id": "*Self-Published*",
      "published_at": "2025-01-26 22:35:00",
      "last_modified_at": "2025-03-19 07:44:10",
      "boosted_at": "",
      "tags": [
        "programming",
        "coding",
        "software-engineering",
        "software-development",
        "web-development"
      ],
      "topics": [
        "work",
        "programming"
      ],
      "claps": 553,
      "voters": 117,
      "word_count": 955,
      "responses_count": 31,
      "reading_time": 3.8037735849056604,
      "url": "https://tomaszs2.medium.com/7-red-flags-during-a-software-engineering-job-interview-e3a77153ff1a",
      "unique_slug": "7-red-flags-during-a-software-engineering-job-interview-e3a77153ff1a",
      "image_url": "https://miro.medium.com/1*LwSgzvieLcZ8VTpkC5zPaA.jpeg",
      "lang": "en",
      "is_series": false,
      "is_locked": true,
      "is_shortform": false,
      "top_highlight": "Interviewing people takes time. If a company is willing to spend more than 2 hours on a candidate it means it has a lot of free time. Imagine how much time they spend on all candidates, and how much work they'd be able to finish.",
      "content": "\ud83d\udea97 Red Flags During A Software Engineering Job Interview\n\nWatch out for these red flags during job interviews to avoid getting stuck in a mess\n\n1. Theoretical questions that aren't relevant to the role\n\nIf the interviewer asks you a theoretical question that isn't relevant to the role, such as the Fibonacci sequence, it suggests the company prioritizes theoretical knowledge over practical skills.\n\nHi! I'm a software engineer with many years of experience. I've participated in hundreds of interviews and conducted even more to hire software engineers for the companies I've worked with. This has given me deep insight into the early warning signs candidates should watch out for.\n\nMost likely, you'll end up working with people who lack practical experience or focus on aspects that don't contribute to delivering high-quality results. Big red flag \ud83d\udea9 - this is a good moment to consider ending the interview and saving your time.\n\nIf you still want the job but don't remember the algorithm, you can respond like this:\n\n*\"During my 10-year career as a software engineer, I have consistently delivered high-quality, performant code. While I learned concepts like the Fibonacci sequence and similar algorithms during my formal education and successfully passed algorithmic tests, I haven't needed to use them in my professional work since.\n\nIf understanding the Fibonacci sequence is crucial for this position, I'm happy to refresh my knowledge. However, I'm confident that my extensive experience and proven coding expertise more than compensate for this gap in theoretical knowledge.\n\n2. Failing to Explain Why Their Approach Is Better\n\nThe interviewer asks you a question or requests you to write some code. You complete it, and then they ask why you didn't use a different approach.\n\nAt this moment, you should explain your reasoning - perhaps you've used this approach before, and it has worked well for you. However, expressing openness to learning about other approaches and their benefits is key.\n\n\ud83d\udea9 Big red flag: If the interviewer doesn't share what approach they prefer or explain why it's better, this signals a toxic culture. It suggests an environment where knowledge isn't shared, but instead, kept to oneself - where people are shamed for not knowing the \"right\" answer rather than encouraged to learn. If you sense this, it's a clear sign to end the interview immediately.\n\n3. The Interviewer Seems to Be in a Rush and Uninterested\n\nSometimes, you get the feeling that the interviewer isn't really engaged in the conversation. The interview feels stiff, you can't properly showcase your skills, and the interviewer seems uninterested, barely acknowledging what you say. The whole process feels overly formal and disconnected.\n\n\ud83d\udea9 Extremely big red flag. It means exactly what it feels like - the role is either already filled, canceled, or just a formality due to corporate policies. The interview is happening just because it has to, even though it serves no real purpose.\n\nConsidering that such a meeting can drain an hour of your time and sap your motivation, it's better to recognize the lack of engagement early and walk away. \"No vibe? Bye.\"\n\n4. You Feel Ashamed, Intimidated, Angry, or Sad\n\nIf a coding interview makes you feel ashamed, intimidated, angry, or sad, take it as a warning sign.\n\n\ud83d\udea9 Big red flag. The emotions you're feeling now are the same ones you'll experience while working there. It's not you, it's them. A healthy work environment should encourage learning and collaboration, not make you feel small or inadequate.\n\nToxic isn't your vibe - trust me. The best move? End the interview immediately.\n\n5. The Interviewer Doesn't Want to Share Information\n\nOf course, in multi-tiered interviews, not everyone knows everything. However, at each stage, there's a reasonable amount of information you should receive - such as details about the role, your potential teammates, and what a typical day looks like in this position.\n\nIf the interviewer explains when you'll get more details and why not now, that's fine. But if you sense they're deliberately withholding basic information for no clear reason, \ud83d\udea9 huge red flag - as red as a baboon's lower back.\n\nIt's likely some kind of scam or dysfunctional setup, and trust me, you don't want to spend the next 8 hours of your life finding out what kind. Walk away.\n\n6. The Interview Process Takes More Than 2 Hours in Total\n\nInterviewing takes time, but if a company is willing to spend more than 2 hours on a single candidate, it likely means they have too much free time. Now, imagine how much time they're spending on all candidates - time that could be used to actually get work done.\n\n\ud83d\udea9 Big red flag. This suggests the company doesn't really need more people; they might just be practicing their interviewing process.\n\nIf they want to drag out the process discussing things already in your CV, it's a waste of time. Use those hours for real interviews that actually lead to a job. Move on.\n\n7. They Ask You to Run Random Code on Your Machine\n\nThat's a new scam making its way into job interviews. Scammers pose as recruiters, conduct an interview, and then ask you to download a repository or app and run it locally.\n\n\ud83d\udea9 Big red flag. The goal is to bypass your usual security awareness - making you feel comfortable enough to execute their malicious code. This can lead to data theft, financial loss, or even system compromise.\n\nOptimistically, 99% of the time, interviews are legitimate, and most companies act professionally. But for that 1%, you now know what to watch out for.\n\nStay sharp, stay safe - and happy job hunting!\n\nSubscribe, clap, comment, and share for more insights on navigating your coding career!"
    }
  },
  "content_e3a77153ff1a": {
    "timestamp": 1746588571.7601511,
    "data": "\ud83d\udea97 Red Flags During A Software Engineering Job Interview\n\nWatch out for these red flags during job interviews to avoid getting stuck in a mess\n\n1. Theoretical questions that aren't relevant to the role\n\nIf the interviewer asks you a theoretical question that isn't relevant to the role, such as the Fibonacci sequence, it suggests the company prioritizes theoretical knowledge over practical skills.\n\nHi! I'm a software engineer with many years of experience. I've participated in hundreds of interviews and conducted even more to hire software engineers for the companies I've worked with. This has given me deep insight into the early warning signs candidates should watch out for.\n\nMost likely, you'll end up working with people who lack practical experience or focus on aspects that don't contribute to delivering high-quality results. Big red flag \ud83d\udea9 - this is a good moment to consider ending the interview and saving your time.\n\nIf you still want the job but don't remember the algorithm, you can respond like this:\n\n*\"During my 10-year career as a software engineer, I have consistently delivered high-quality, performant code. While I learned concepts like the Fibonacci sequence and similar algorithms during my formal education and successfully passed algorithmic tests, I haven't needed to use them in my professional work since.\n\nIf understanding the Fibonacci sequence is crucial for this position, I'm happy to refresh my knowledge. However, I'm confident that my extensive experience and proven coding expertise more than compensate for this gap in theoretical knowledge.\n\n2. Failing to Explain Why Their Approach Is Better\n\nThe interviewer asks you a question or requests you to write some code. You complete it, and then they ask why you didn't use a different approach.\n\nAt this moment, you should explain your reasoning - perhaps you've used this approach before, and it has worked well for you. However, expressing openness to learning about other approaches and their benefits is key.\n\n\ud83d\udea9 Big red flag: If the interviewer doesn't share what approach they prefer or explain why it's better, this signals a toxic culture. It suggests an environment where knowledge isn't shared, but instead, kept to oneself - where people are shamed for not knowing the \"right\" answer rather than encouraged to learn. If you sense this, it's a clear sign to end the interview immediately.\n\n3. The Interviewer Seems to Be in a Rush and Uninterested\n\nSometimes, you get the feeling that the interviewer isn't really engaged in the conversation. The interview feels stiff, you can't properly showcase your skills, and the interviewer seems uninterested, barely acknowledging what you say. The whole process feels overly formal and disconnected.\n\n\ud83d\udea9 Extremely big red flag. It means exactly what it feels like - the role is either already filled, canceled, or just a formality due to corporate policies. The interview is happening just because it has to, even though it serves no real purpose.\n\nConsidering that such a meeting can drain an hour of your time and sap your motivation, it's better to recognize the lack of engagement early and walk away. \"No vibe? Bye.\"\n\n4. You Feel Ashamed, Intimidated, Angry, or Sad\n\nIf a coding interview makes you feel ashamed, intimidated, angry, or sad, take it as a warning sign.\n\n\ud83d\udea9 Big red flag. The emotions you're feeling now are the same ones you'll experience while working there. It's not you, it's them. A healthy work environment should encourage learning and collaboration, not make you feel small or inadequate.\n\nToxic isn't your vibe - trust me. The best move? End the interview immediately.\n\n5. The Interviewer Doesn't Want to Share Information\n\nOf course, in multi-tiered interviews, not everyone knows everything. However, at each stage, there's a reasonable amount of information you should receive - such as details about the role, your potential teammates, and what a typical day looks like in this position.\n\nIf the interviewer explains when you'll get more details and why not now, that's fine. But if you sense they're deliberately withholding basic information for no clear reason, \ud83d\udea9 huge red flag - as red as a baboon's lower back.\n\nIt's likely some kind of scam or dysfunctional setup, and trust me, you don't want to spend the next 8 hours of your life finding out what kind. Walk away.\n\n6. The Interview Process Takes More Than 2 Hours in Total\n\nInterviewing takes time, but if a company is willing to spend more than 2 hours on a single candidate, it likely means they have too much free time. Now, imagine how much time they're spending on all candidates - time that could be used to actually get work done.\n\n\ud83d\udea9 Big red flag. This suggests the company doesn't really need more people; they might just be practicing their interviewing process.\n\nIf they want to drag out the process discussing things already in your CV, it's a waste of time. Use those hours for real interviews that actually lead to a job. Move on.\n\n7. They Ask You to Run Random Code on Your Machine\n\nThat's a new scam making its way into job interviews. Scammers pose as recruiters, conduct an interview, and then ask you to download a repository or app and run it locally.\n\n\ud83d\udea9 Big red flag. The goal is to bypass your usual security awareness - making you feel comfortable enough to execute their malicious code. This can lead to data theft, financial loss, or even system compromise.\n\nOptimistically, 99% of the time, interviews are legitimate, and most companies act professionally. But for that 1%, you now know what to watch out for.\n\nStay sharp, stay safe - and happy job hunting!\n\nSubscribe, clap, comment, and share for more insights on navigating your coding career!"
  },
  "article_33351b7a809e": {
    "timestamp": 1746588572.275797,
    "data": {
      "id": "33351b7a809e",
      "title": "The Sad Reality of Software Engineering Salaries\ud83d\udcb0",
      "subtitle": "This is only going one way",
      "author": "30834bcaf46a",
      "publication_id": "*Self-Published*",
      "published_at": "2024-07-28 21:27:13",
      "last_modified_at": "2024-07-29 08:07:39",
      "boosted_at": "",
      "tags": [
        "tech",
        "technology",
        "software-development",
        "software-engineering"
      ],
      "topics": [
        "programming"
      ],
      "claps": 1862,
      "voters": 371,
      "word_count": 403,
      "responses_count": 60,
      "reading_time": 2.3540880503144654,
      "url": "https://medium.com/@tsecretdeveloper/the-sad-reality-of-software-engineering-salaries-33351b7a809e",
      "unique_slug": "the-sad-reality-of-software-engineering-salaries-33351b7a809e",
      "image_url": "https://miro.medium.com/0*ED1a4EWvlyCcu2EI",
      "lang": "en",
      "is_series": false,
      "is_locked": true,
      "is_shortform": false,
      "top_highlight": "Developers need to remain on the ball, improve themselves and if they're not sufficiently valued in their current position find a new position.",
      "content": "The Sad Reality of Software Engineering Salaries\ud83d\udcb0\n\nThis is only going one way\n\nThe wider public still believe that software engineers are \"Scrooge McDucking\" and rolling around in cash.\n\nIf most people believe something it must be true, right?\n\nLet us look into the numbers from the 2024 Stack Overflow Developer Survey and explore what is actually going on in the market.\n\nThe Developer Salary Decline\n\nAs software engineers, we understand that there is a tension between earning and learning. Ideally in any software engineering position you get both.\n\nThe world economy since the covids has been challenging and therefore it is no great shock that developer salaries have encountered a market correction. This has come as a shock to those software developers who saw a recession-proof career path and now experience the same squeeze as every other sector.\n\nBack-end developers have received a median $9K USD annual decrease, while blockchain developers had their median salaries sliced by double that.\n\nIt's a bad picture for many in software development. It's so bad that even people managers have experienced salary decreases.\n\nA Call For Change\n\nYou won't like this one.\n\nSalaries are dropping. There is no getting away from this.\n\nThis is against a backdrop of software development still hard work. AI hasn't yet stepped in to supercharge our productivity.\n\nWe need employers to step in. While developers need to remain adaptable, update skills constantly employers need to support continuous learning. We are paid for the value we bring to an organization, so the faster we up skill the faster our salaries will increase.\n\nAI will make it ever easier to find a *good enough* junior developer, and that means we need to get this production line moving. The alternative is that salaries will move into a death spiral, and I believe that will draw salaries down the drain with it.\n\nConclusion\n\nThe sad reality of software engineering salaries is a stark reminder that nothing is guaranteed in tech.\n\nDevelopers need to remain on the ball, improve themselves and if they're not sufficiently valued in their current position find a new position.\n\nDisagree? Let me know in the comments.\n\nIf you wanted the full picture of how salaries are looking, well it's right here:\n\nAbout The Author\n\nProfessional Software Developer \"The Secret Developer\" can be found on Twitter @TheSDeveloper and regularly publishes articles through Medium.com\n\nThe Secret Developer wants a pay increase."
    }
  },
  "content_33351b7a809e": {
    "timestamp": 1746588572.789271,
    "data": "The Sad Reality of Software Engineering Salaries\ud83d\udcb0\n\nThis is only going one way\n\nThe wider public still believe that software engineers are \"Scrooge McDucking\" and rolling around in cash.\n\nIf most people believe something it must be true, right?\n\nLet us look into the numbers from the 2024 Stack Overflow Developer Survey and explore what is actually going on in the market.\n\nThe Developer Salary Decline\n\nAs software engineers, we understand that there is a tension between earning and learning. Ideally in any software engineering position you get both.\n\nThe world economy since the covids has been challenging and therefore it is no great shock that developer salaries have encountered a market correction. This has come as a shock to those software developers who saw a recession-proof career path and now experience the same squeeze as every other sector.\n\nBack-end developers have received a median $9K USD annual decrease, while blockchain developers had their median salaries sliced by double that.\n\nIt's a bad picture for many in software development. It's so bad that even people managers have experienced salary decreases.\n\nA Call For Change\n\nYou won't like this one.\n\nSalaries are dropping. There is no getting away from this.\n\nThis is against a backdrop of software development still hard work. AI hasn't yet stepped in to supercharge our productivity.\n\nWe need employers to step in. While developers need to remain adaptable, update skills constantly employers need to support continuous learning. We are paid for the value we bring to an organization, so the faster we up skill the faster our salaries will increase.\n\nAI will make it ever easier to find a *good enough* junior developer, and that means we need to get this production line moving. The alternative is that salaries will move into a death spiral, and I believe that will draw salaries down the drain with it.\n\nConclusion\n\nThe sad reality of software engineering salaries is a stark reminder that nothing is guaranteed in tech.\n\nDevelopers need to remain on the ball, improve themselves and if they're not sufficiently valued in their current position find a new position.\n\nDisagree? Let me know in the comments.\n\nIf you wanted the full picture of how salaries are looking, well it's right here:\n\nAbout The Author\n\nProfessional Software Developer \"The Secret Developer\" can be found on Twitter @TheSDeveloper and regularly publishes articles through Medium.com\n\nThe Secret Developer wants a pay increase."
  },
  "article_0dd6a2aaadfc": {
    "timestamp": 1746588573.258364,
    "data": {
      "id": "0dd6a2aaadfc",
      "title": "From Code to Insights: Software Engineering Best Practices for Data Analysts",
      "subtitle": "Top 10 engineering lessons every data analyst should know",
      "author": "15a29a4fc6ad",
      "publication_id": "7f60cf5620c9",
      "published_at": "2024-06-06 19:24:17",
      "last_modified_at": "2024-06-06 19:24:17",
      "boosted_at": "2024-06-06 20:58:39",
      "tags": [
        "data-science",
        "programming",
        "best-practices",
        "tips-and-tricks",
        "software-engineering"
      ],
      "topics": [
        "productivity",
        "data-science",
        "programming"
      ],
      "claps": 661,
      "voters": 139,
      "word_count": 3833,
      "responses_count": 14,
      "reading_time": 15.297484276729561,
      "url": "https://medium.com/data-science/from-code-to-insights-software-engineering-best-practices-for-data-analysts-0dd6a2aaadfc",
      "unique_slug": "from-code-to-insights-software-engineering-best-practices-for-data-analysts-0dd6a2aaadfc",
      "image_url": "https://miro.medium.com/1*ePjA_dzrfUM_PRp8W84TQQ.jpeg",
      "lang": "en",
      "is_series": false,
      "is_locked": false,
      "is_shortform": false,
      "top_highlight": "Maths, statistics, and fundamental machine learning skills help us perform rigorous analyses and reach reliable conclusions from data.",
      "content": "From Code to Insights: Software Engineering Best Practices for Data Analysts\n\nTop 10 engineering lessons every data analyst should know\n\nThe data analyst job combines skills from different domains:\n\nWe need to have business understanding and domain knowledge to be able to solve actual business problems and take into account all the details.\n\nMaths, statistics, and fundamental machine learning skills help us perform rigorous analyses and reach reliable conclusions from data.\n\nVisualisation skills and storytelling allow us to deliver our message and influence the product.\n\nLast but not least, computer science and the basics of software engineering are key to our efficiency.\n\nI've learned a lot about computer science at university. I've tried at least a dozen programming languages (from low-level assembler and CUDA to high-level Java and Scala) and countless tools. My very first job offer was for a backend engineer role. I've decided not to pursue this path, but all this knowledge and principles have been beneficial in my analytical career. So, I would like to share the main principles with you in this article.\n\nCode is not for computers. It's for people\n\nI've heard this mantra from software engineers many times. It's well explained in one of the programming bibles, \"Clean Code\".\n\nIndeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code.\n\nIn most cases, an engineer prefers more wordy code that is easy to understand to the idiomatic one-liner.\n\nI must confess that I sometimes break this rule and write extra-long pandas one-liners. For example, let's look at the code below. Do you have any idea what this code is doing?\n\n# ad-hoc only code\ndf.groupby(['month', 'feature'])[['user_id']].nunique()\\\n  .rename(columns = {'user_id': 'users'})\\\n  .join(df.groupby(['month'])[['user_id']].nunique()\\\n  .rename(columns = {'user_id': 'total_users'})).apply(\n    lambda x: 100*x['users']/x['total_users'], axis = 1)\\\n  .reset_index().rename(columns = {0: 'users_share'})\\\n  .pivot(index = 'month', columns = 'feature', values = 'users_share')\n\nHonestly, it'll probably take me a bit to get up to speed with this code in a month. To make this code more readable, we can split it into steps.\n\n# maintainable code\nmonthly_features_df = df.groupby(['month', 'feature'])[['user_id']].nunique()\\\n    .rename(columns = {'user_id': 'users'})\n\nmonthly_total_df = df.groupby(['month'])[['user_id']].nunique()\\\n    .rename(columns = {'user_id': 'total_users'})\n\nmonthly_df = monthly_features_df.join(monthly_total_df).reset_index()\nmonthly_df['users_share'] = 100*monthly_df.users/monthly_df.total_users\n\nmonthly_df.pivot(index = 'month', columns = 'feature', values = 'users_share')\n\nHopefully, now it's easier for you to follow the logic and see that this code shows the percentage of customers that use each feature every month. The future me would definitely be way happier to see a code like this and appreciate all the efforts.\n\nAutomate repetitive tasks\n\nIf you have monotonous tasks that you repeat frequently, I recommend you consider automation. Let me share some examples from my experience that you might find helpful.\n\nThe most common way for analysts to automate tasks is to create a dashboard instead of calculating numbers manually every time. Self-serve tools (configurable dashboards where stakeholders can change filters and investigate the data) can save a lot of time and allow us to focus on more sophisticated and impactful research.\n\nIf a dashboard is not an option, there are other ways of automation. I was doing weekly reports and sending them to stakeholders via e-mail. After some time, it became a pretty tedious task, and I started to think about automation. At this point, I used the basic tool - cron on a virtual machine. I scheduled a Python script that calculated up-to-date numbers and sent an e-mail.\n\nWhen you have a script, you just need to add one line to the cron file. For example, the line below will execute analytical_script.py every Monday at 9:10 AM.\n\n10 9 * * 1 python analytical_script.py\n\nCron is a basic but still sustainable solution. Other tools that can be used to schedule scripts are Airflow, DBT, and Jenkins. You might know Jenkins as a CI/CD (continuous integration & continuous delivery) tool that engineers often use. It might surprise you. It's customisable enough to execute analytical scripts as well.\n\nIf you need even more flexibility, it's time to think about web applications. In my first team, we didn't have an A/B test tool, so for a long time, analysts had to analyse each update manually. Finally, we wrote a Flask web application so that engineers could self-serve. Now, there are lightweight solutions for web applications, such as Gradio or Streamlit, that you can learn in a couple of days.\n\nYou can find a detailed guide for Gradio in one of my previous articles.\n\nMaster your tools\n\nTools you use every day at work play a significant role in your efficiency and final results. So it's worth mastering them.\n\nOf course, you can use a default text editor to write code, but most people use IDEs (Integrated Development Environment). You will be spending a lot of your working time on this application, so it's worth assessing your options.\n\nYou can find the most popular IDEs for Python from the JetBrains 2021 survey.\n\nI usually use Python and Jupyter Notebooks for my day-to-day work. In my opinion, the best IDE for such tasks is JupyterLab. However, I'm trying other options right now to be able to use AI assistants. The benefits of auto-completion, which eliminates lots of boilerplate code, are invaluable for me, so I'm ready to take on switching costs. I encourage you to investigate different options and see what suits your work best.\n\nThe other helpful hack is shortcuts. You can do your tasks way faster with shortcuts than with a mouse, and it looks cool. I would start with Googling shortcuts for your IDE since you usually use this tool the most. From my practice, the most valuable commands are creating a new cell in a Notebook, running this cell, deleting it, and converting the cell into markdown.\n\nIf you have other tools that you use pretty often (such as Google Sheets or Slack), you can also learn commands for them.\n\nThe main trick with learning shortcuts is \"practice, practice, practice\" - you need to repeat it a hundred times to start doing it automatically. There are even plugins that push you to use shortcuts more (for example, this one from JetBrains).\n\nLast but not least is CLI (command-line interface). It might look intimidating in the beginning, but basic knowledge of CLI usually pays off. I use CLI even to work with GitHub since it gives me a clear understanding of what's going on exactly.\n\nHowever, there are situations when it's almost impossible to avoid using CLI, such as when working on a remote server. To interact confidently with a server, you need to learn less than ten commands. This article can help you gain basic knowledge about CLI.\n\nManage your environment\n\nContinuing the topic of tools, setting up your environment is always a good idea. I have a Python virtual environment for day-to-day work with all the libraries I usually use.\n\nCreating a new virtual environment is as easy as a couple of lines of code in your terminal (an excellent opportunity to start using CLI).\n\n# creating venv\npython -m venv routine_venv\n\n# activating venv\nsource routine_venv/bin/activate\n\n# installing ALL packages you need \npip install pandas plotly \n\n# starting Juputer Notebooks\njupyter notebook\n\nYou can start your Jupyter from this environment or use it in your IDE.\n\nIt's a good practice to have a separate environment for big projects. I usually do it only if I need an unusual stack (like PyTorch or yet another new LLM framework) or face some issues with library compatibility.\n\nThe other way to save your environment is by using Docker Containers. I use it for something more production-like, like web apps running on the server.\n\nThink about program performance\n\nTo tell the truth, analysts often don't need to think much about performance. When I got my first job in data analytics, my lead shared the practical approach to performance optimisations (and I have been using it ever since). When you're thinking about performance, consider the total time vs efforts. Suppose I have a MapReduce script that runs for 4 hours. Should I optimise it? It depends.\n\nIf I need to run it only once or twice, there's not much sense in spending 1 hour to optimise this script to calculate numbers in just 1 hour.\n\nIf I plan to run it daily, it's worth the effort to make it faster and stop wasting computational resources (and money).\n\nSince the majority of my tasks are one-time research, in most cases, I don't need to optimise my code. However, it's worth following some basic rules to avoid waiting for hours. Small tricks can lead to tremendous results. Let's discuss such an example.\n\nStarting from the basics, the cornerstone of performance is big O notation. Simply put, big O notation shows the relation between execution time and the number of elements you work with. So, if my program is O(n), it means that if I increase the amount of data 10 times, execution will be ~10 times longer.\n\nWhen writing code, it's worth understanding the complexity of your algorithm and the main data structures. For example, finding out if an element is in a list takes O(n) time, but it only takes O(1) time in a set. Let's see how it can affect our code.\n\nI have 2 data frames with Q1 and Q2 user transactions, and for each transaction in the Q1 data frame, I would like to understand whether this customer was retained or not. Our data frames are relatively small - around 300-400K rows.\n\nAs you can see, performance differs a lot.\n\nThe first approach is the worst one because, on each iteration (for each row in the Q1 dataset), we calculate the list of unique user_ids. Then, we look up the element in the list with O(n) complexity. This operation takes 13 minutes.\n\nThe second approach, when we calculate the list first, is a bit better, but it still takes almost 6 minutes.\n\nIf we pre-calculate a list of user_ids and convert it into the set, we will get the result in a blink of an eye.\n\nAs you can see, we can make our code more than 10K times faster with just basic knowledge. It's a game-changer.\n\nThe other general advice is to avoid using plain Python and prefer to use more performant data structures, such as pandas or numpy. These libraries are faster because they use vectorised operations on arrays, which are implemented on C. Usually, numpy would show a bit better performance since pandas is built on top of numpy but has some additional functionality that slows it down a bit.\n\nDon't forget the DRY principle.\n\nDRY stands for \"Don't Repeat Yourself\" and is self-explanatory. This principle praises structured modular code that you can easily reuse.\n\nIf you're copy-pasting a chunk of code for the third time, it's a sign to think about the code structure and how to encapsulate this logic.\n\nThe standard analytical task is data wrangling, and we usually follow the procedural paradigm. So, the most apparent way to structure the code is functions. However, you might follow objective-oriented programming and create classes. In my previous article, I shared an example of the objective-oriented approach to simulations.\n\nThe benefits of modular code are better readability, faster development and easier changes. For example, if you want to change your visualisation from a line chart to an area plot, you can do it in one place and re-run your code.\n\nIf you have a bunch of functions related to one particular domain, you can create a Python package for it to interact with these functions as with any other Python library. Here's a detailed guide on how to do it.\n\nLeverage testing\n\nThe other topic that is, in my opinion, undervalued in the analytical world is testing. Software engineers often have KPIs on the test coverage, which might also be useful for analysts. However, in many cases, our tests will be related to the data rather than the code itself.\n\nThe trick I've learned from one of my colleagues is to add tests on the data recency. We have multiple scripts for quarterly and annual reports that we run pretty rarely. So, he added a check to see whether the latest rows in the tables we're using are after the end of the reporting period (it shows whether the table has been updated). In Python, you can use an assert statement for this.\n\nassert last_record_time >= datetime.date(2023, 5, 31) \n\nIf the condition is fulfilled, then nothing will happen. Otherwise, you will get an AssertionError . It's a quick and easy check that can help you spot problems early.\n\nThe other thing I prefer to validate is sum statistics. For example, if you're slicing, dicing and transforming your data, it's worth checking that the overall number of requests and metrics stays the same. Some common mistakes are:\n\nduplicates that emerged because of joins,\n\nfiltered-out None values when you're using pandas.groupby function,\n\nfiltered-out dimensions because of inner joins.\n\nAlso, I always check data for duplicates. If you expect that each row will represent one user, then the number of rows should be equal to df.user_id.nunique() . If it's false, something is wrong with your data and needs investigation.\n\nThe trickiest and most helpful test is the sense check. Let's discuss some possible approaches to it.\n\nFirst, I would check whether the results make sense overall. For example, if 1-month retention equals 99% or I got 1 billion customers in Europe, there's likely a bug in the code.\n\nSecondly, I will look for other data sources or previous research on this topic to validate that my results are feasible.\n\nIf you don't have other similar research (for example, you're estimating your potential revenue after launching the product in a new market), I would recommend you compare your numbers to those of other existing segments. For example, if your incremental effect on revenue after launching your product in yet another market equals 5x current income, I would say it's a bit too optimistic and worth revisiting assumptions.\n\nI hope this mindset will help you achieve more feasible results.\n\nEncourage the team to use Version Control Systems\n\nEngineers use version control systems even for the tiny projects they are working on their own. At the same time, I often see analysts using Google Sheets to store their queries. Since I'm a great proponent and advocate for keeping all the code in the repository, I can't miss a chance to share my thoughts with you.\n\nWhy have I been using a repository for 10+ years of my data career? Here are the main benefits:\n\nReproducibility. Quite often, we need to tweak the previous research (for example, add one more dimension or narrow research down to a specific segment) or just repeat the earlier calculations. If you store all the code in a structured way, you can quickly reproduce your prior work. It usually saves a lot of time.\n\nTransparency. Linking code to the results of your research allows your colleagues to understand the methodology to the tiniest detail, which brings more trust and naturally helps to spot bugs or potential improvements.\n\nKnowledge sharing. If you have a catalogue that is easy to navigate (or you link your code to Task Trackers), it makes it super-easy for your colleagues to find your code and not start an investigation from scratch.\n\nRolling back. Have you ever been in a situation when your code was working yesterday, but then you changed something, and now it's completely broken? I've been there many times before I started committing my code regularly. Version Control systems allow you to see the whole version history and compare the code or rollback to the previous working version.\n\nCollaboration. If you're working on the code in collaboration with others, you can leverage version control systems to track and merge the changes.\n\nI hope you can see its potential benefits now. Let me briefly share my usual setup to store code:\n\nI use git + Github as a version control system, I'm this dinosaur who is still using the command line interface for git (it gives me the soothing feeling of control), but you can use the GitHub app or the functionality of your IDE.\n\nMost of my work is research (code, numbers, charts, comments, etc.), so I store 95% of my code as Jupyter Notebooks.\n\nI link my code to the Jira tickets. I usually have a tasks folder in my repository and name subfolders as ticket keys (for example, ANALYTICS-42). Then, I place all the files related to the task in this subfolder. With such an approach, I can find code related to (almost) any task in seconds.\n\nThere are a bunch of nuances of working with Jupyter Notebooks in GitHub that are worth noting.\n\nFirst, think about the output. When committing a Jupyter Notebook to the repository, you save input cells (your code or comments) and output. So, it's worth being conscious about whether you actually want to share the output. It might contain PII or other sensitive data that I wouldn't advise committing. Also, the output might be pretty big and non-informative, so it will just clutter your repository. When you're saving 10+ MB Jupyter Notebook with some random data output, all your colleagues will load this data to their computers with the next git pull command.\n\nCharts in output might be especially problematic. We all like excellent interactive Plotly charts. Unfortunately, they are not rendered on GitHub UI, so your colleagues likely won't see them. To overcome this obstacle, you might switch the output type for Plotly to PNG or JPEG.\n\nimport plotly.io as pio\npio.renderers.default = \"jpeg\"\n\nYou can find more details about Plotly renderers in the documentation.\n\nLast but not least, Jupyter Notebooks diffs are usually tricky. You would often like to understand the difference between 2 versions of the code. However, the default GitHub view won't give you much helpful info because there is too much clutter due to changes in notebook metadata (like in the example below).\n\nActually, GitHub has almost solved this issue. A rich diffs functionality in feature preview can make your life way easier - you just need to switch it on in settings.\n\nWith this feature, we can easily see that there were just a couple of changes. I've changed the default renderer and parameters for retention curves (so a chart has been updated as well).\n\nAsk for a code review\n\nEngineers do peer reviews for (almost) all changes to the code. This process allows one to spot bugs early, stop bad actors or effectively share knowledge in the team.\n\nOf course, it's not a silver bullet: reviewers can miss bugs, or a bad actor might introduce a breach into the popular open-source project. For example, there was quite a scary story of how a backdoor was planted into a compression tool widely used in popular Linux distributions.\n\nHowever, there is evidence that code review actually helps. McConnell shares the following stats in his iconic book \"Code Complete\".\n\n... software testing alone has limited effectiveness - the average defect detection rate is only 25 percent for unit testing, 35 percent for function testing, and 45 percent for integration testing. In contrast, the average effectiveness of design and code inspections are 55 and 60 percent.\n\nDespite all these benefits, analysts often don't use code review at all. I can understand why it might be challenging:\n\nAnalytical teams are usually smaller, and spending limited resources on double-checking might not sound reasonable.\n\nQuite often, analysts work in different domains, and you might end up being the only person who knows this domain well enough to do a code review.\n\nHowever, I really encourage you to do a code review, at least for critical things to mitigate risks. Here are the cases when I ask colleagues to double-check my code and assumptions:\n\nWhen I'm using data in a new domain, it's always a good idea to ask an expert to review the assumptions used;\n\nAll the tasks related to customer communications or interventions since errors in such data might lead to significant impact (for example, we've communicated wrong information to customers or deactivated wrong people);\n\nHigh-stakes decisions: if you plan to invest six months of the team's effort into the project, it's worth double- and triple-checking;\n\nWhen results are unexpected: the first hypothesis to test when I see surprising results is to check for an error in code.\n\nOf course, it's not an exhaustive list, but I hope you can see my reasoning and use common sense to define when to reach out for code review.\n\nStay up-to-date\n\nThe famous Lewis Caroll quote represents the current state of the tech domain quite well.\n\n... it takes all the running you can do, to keep in the same place. If you want to get somewhere else, you must run at least twice as fast as that.\n\nOur field is constantly evolving: new papers are published every day, libraries are updated, new tools emerge and so on. It's the same story for software engineers, data analysts, data scientists, etc.\n\nThere are so many sources of information right now that there's no problem to find it:\n\nweekly e-mails from Towards Data Science and some other subscriptions,\n\nfollowing experts on LinkedIn and X (former Twitter),\n\nsubscribing to e-mail updates for the tools and libraries I use,\n\nattending local meet-ups.\n\nA bit more tricky is to avoid being drowned by all the information. I try to focus on one thing at a time to prevent too much distraction.\n\nSummary\n\nThat's it with the software engineering practices that can be helpful for analysts. Let me quickly recap them all here:\n\nCode is not for computers. It's for people.\n\nAutomate repetitive tasks.\n\nMaster your tools.\n\nManage your environment.\n\nThink about program performance.\n\nDon't forget the DRY principle.\n\nLeverage testing.\n\nEncourage the team to use Version Control Systems.\n\nAsk for a code review.\n\nStay up-to-date.\n\nData analytics combines skills from different domains, so I believe we can benefit greatly from learning the best practices of software engineers, product managers, designers, etc. By adopting the tried-and-true techniques of our colleagues, we can improve our effectiveness and efficiency. I highly encourage you to explore these adjacent domains as well.\n\nThank you a lot for reading this article. I hope this article was insightful for you. If you have any follow-up questions or comments, please leave them in the comments section.\n\nReference\n\nAll the images are produced by the author unless otherwise stated.\n\nAcknowledgements\n\nI can't miss a chance to express my heartfelt thanks to my partner, who has been sharing his engineering wisdom with me for ages and has reviewed all my articles."
    }
  },
  "content_0dd6a2aaadfc": {
    "timestamp": 1746588573.881048,
    "data": "From Code to Insights: Software Engineering Best Practices for Data Analysts\n\nTop 10 engineering lessons every data analyst should know\n\nThe data analyst job combines skills from different domains:\n\nWe need to have business understanding and domain knowledge to be able to solve actual business problems and take into account all the details.\n\nMaths, statistics, and fundamental machine learning skills help us perform rigorous analyses and reach reliable conclusions from data.\n\nVisualisation skills and storytelling allow us to deliver our message and influence the product.\n\nLast but not least, computer science and the basics of software engineering are key to our efficiency.\n\nI've learned a lot about computer science at university. I've tried at least a dozen programming languages (from low-level assembler and CUDA to high-level Java and Scala) and countless tools. My very first job offer was for a backend engineer role. I've decided not to pursue this path, but all this knowledge and principles have been beneficial in my analytical career. So, I would like to share the main principles with you in this article.\n\nCode is not for computers. It's for people\n\nI've heard this mantra from software engineers many times. It's well explained in one of the programming bibles, \"Clean Code\".\n\nIndeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code.\n\nIn most cases, an engineer prefers more wordy code that is easy to understand to the idiomatic one-liner.\n\nI must confess that I sometimes break this rule and write extra-long pandas one-liners. For example, let's look at the code below. Do you have any idea what this code is doing?\n\n# ad-hoc only code\ndf.groupby(['month', 'feature'])[['user_id']].nunique()\\\n  .rename(columns = {'user_id': 'users'})\\\n  .join(df.groupby(['month'])[['user_id']].nunique()\\\n  .rename(columns = {'user_id': 'total_users'})).apply(\n    lambda x: 100*x['users']/x['total_users'], axis = 1)\\\n  .reset_index().rename(columns = {0: 'users_share'})\\\n  .pivot(index = 'month', columns = 'feature', values = 'users_share')\n\nHonestly, it'll probably take me a bit to get up to speed with this code in a month. To make this code more readable, we can split it into steps.\n\n# maintainable code\nmonthly_features_df = df.groupby(['month', 'feature'])[['user_id']].nunique()\\\n    .rename(columns = {'user_id': 'users'})\n\nmonthly_total_df = df.groupby(['month'])[['user_id']].nunique()\\\n    .rename(columns = {'user_id': 'total_users'})\n\nmonthly_df = monthly_features_df.join(monthly_total_df).reset_index()\nmonthly_df['users_share'] = 100*monthly_df.users/monthly_df.total_users\n\nmonthly_df.pivot(index = 'month', columns = 'feature', values = 'users_share')\n\nHopefully, now it's easier for you to follow the logic and see that this code shows the percentage of customers that use each feature every month. The future me would definitely be way happier to see a code like this and appreciate all the efforts.\n\nAutomate repetitive tasks\n\nIf you have monotonous tasks that you repeat frequently, I recommend you consider automation. Let me share some examples from my experience that you might find helpful.\n\nThe most common way for analysts to automate tasks is to create a dashboard instead of calculating numbers manually every time. Self-serve tools (configurable dashboards where stakeholders can change filters and investigate the data) can save a lot of time and allow us to focus on more sophisticated and impactful research.\n\nIf a dashboard is not an option, there are other ways of automation. I was doing weekly reports and sending them to stakeholders via e-mail. After some time, it became a pretty tedious task, and I started to think about automation. At this point, I used the basic tool - cron on a virtual machine. I scheduled a Python script that calculated up-to-date numbers and sent an e-mail.\n\nWhen you have a script, you just need to add one line to the cron file. For example, the line below will execute analytical_script.py every Monday at 9:10 AM.\n\n10 9 * * 1 python analytical_script.py\n\nCron is a basic but still sustainable solution. Other tools that can be used to schedule scripts are Airflow, DBT, and Jenkins. You might know Jenkins as a CI/CD (continuous integration & continuous delivery) tool that engineers often use. It might surprise you. It's customisable enough to execute analytical scripts as well.\n\nIf you need even more flexibility, it's time to think about web applications. In my first team, we didn't have an A/B test tool, so for a long time, analysts had to analyse each update manually. Finally, we wrote a Flask web application so that engineers could self-serve. Now, there are lightweight solutions for web applications, such as Gradio or Streamlit, that you can learn in a couple of days.\n\nYou can find a detailed guide for Gradio in one of my previous articles.\n\nMaster your tools\n\nTools you use every day at work play a significant role in your efficiency and final results. So it's worth mastering them.\n\nOf course, you can use a default text editor to write code, but most people use IDEs (Integrated Development Environment). You will be spending a lot of your working time on this application, so it's worth assessing your options.\n\nYou can find the most popular IDEs for Python from the JetBrains 2021 survey.\n\nI usually use Python and Jupyter Notebooks for my day-to-day work. In my opinion, the best IDE for such tasks is JupyterLab. However, I'm trying other options right now to be able to use AI assistants. The benefits of auto-completion, which eliminates lots of boilerplate code, are invaluable for me, so I'm ready to take on switching costs. I encourage you to investigate different options and see what suits your work best.\n\nThe other helpful hack is shortcuts. You can do your tasks way faster with shortcuts than with a mouse, and it looks cool. I would start with Googling shortcuts for your IDE since you usually use this tool the most. From my practice, the most valuable commands are creating a new cell in a Notebook, running this cell, deleting it, and converting the cell into markdown.\n\nIf you have other tools that you use pretty often (such as Google Sheets or Slack), you can also learn commands for them.\n\nThe main trick with learning shortcuts is \"practice, practice, practice\" - you need to repeat it a hundred times to start doing it automatically. There are even plugins that push you to use shortcuts more (for example, this one from JetBrains).\n\nLast but not least is CLI (command-line interface). It might look intimidating in the beginning, but basic knowledge of CLI usually pays off. I use CLI even to work with GitHub since it gives me a clear understanding of what's going on exactly.\n\nHowever, there are situations when it's almost impossible to avoid using CLI, such as when working on a remote server. To interact confidently with a server, you need to learn less than ten commands. This article can help you gain basic knowledge about CLI.\n\nManage your environment\n\nContinuing the topic of tools, setting up your environment is always a good idea. I have a Python virtual environment for day-to-day work with all the libraries I usually use.\n\nCreating a new virtual environment is as easy as a couple of lines of code in your terminal (an excellent opportunity to start using CLI).\n\n# creating venv\npython -m venv routine_venv\n\n# activating venv\nsource routine_venv/bin/activate\n\n# installing ALL packages you need \npip install pandas plotly \n\n# starting Juputer Notebooks\njupyter notebook\n\nYou can start your Jupyter from this environment or use it in your IDE.\n\nIt's a good practice to have a separate environment for big projects. I usually do it only if I need an unusual stack (like PyTorch or yet another new LLM framework) or face some issues with library compatibility.\n\nThe other way to save your environment is by using Docker Containers. I use it for something more production-like, like web apps running on the server.\n\nThink about program performance\n\nTo tell the truth, analysts often don't need to think much about performance. When I got my first job in data analytics, my lead shared the practical approach to performance optimisations (and I have been using it ever since). When you're thinking about performance, consider the total time vs efforts. Suppose I have a MapReduce script that runs for 4 hours. Should I optimise it? It depends.\n\nIf I need to run it only once or twice, there's not much sense in spending 1 hour to optimise this script to calculate numbers in just 1 hour.\n\nIf I plan to run it daily, it's worth the effort to make it faster and stop wasting computational resources (and money).\n\nSince the majority of my tasks are one-time research, in most cases, I don't need to optimise my code. However, it's worth following some basic rules to avoid waiting for hours. Small tricks can lead to tremendous results. Let's discuss such an example.\n\nStarting from the basics, the cornerstone of performance is big O notation. Simply put, big O notation shows the relation between execution time and the number of elements you work with. So, if my program is O(n), it means that if I increase the amount of data 10 times, execution will be ~10 times longer.\n\nWhen writing code, it's worth understanding the complexity of your algorithm and the main data structures. For example, finding out if an element is in a list takes O(n) time, but it only takes O(1) time in a set. Let's see how it can affect our code.\n\nI have 2 data frames with Q1 and Q2 user transactions, and for each transaction in the Q1 data frame, I would like to understand whether this customer was retained or not. Our data frames are relatively small - around 300-400K rows.\n\nAs you can see, performance differs a lot.\n\nThe first approach is the worst one because, on each iteration (for each row in the Q1 dataset), we calculate the list of unique user_ids. Then, we look up the element in the list with O(n) complexity. This operation takes 13 minutes.\n\nThe second approach, when we calculate the list first, is a bit better, but it still takes almost 6 minutes.\n\nIf we pre-calculate a list of user_ids and convert it into the set, we will get the result in a blink of an eye.\n\nAs you can see, we can make our code more than 10K times faster with just basic knowledge. It's a game-changer.\n\nThe other general advice is to avoid using plain Python and prefer to use more performant data structures, such as pandas or numpy. These libraries are faster because they use vectorised operations on arrays, which are implemented on C. Usually, numpy would show a bit better performance since pandas is built on top of numpy but has some additional functionality that slows it down a bit.\n\nDon't forget the DRY principle.\n\nDRY stands for \"Don't Repeat Yourself\" and is self-explanatory. This principle praises structured modular code that you can easily reuse.\n\nIf you're copy-pasting a chunk of code for the third time, it's a sign to think about the code structure and how to encapsulate this logic.\n\nThe standard analytical task is data wrangling, and we usually follow the procedural paradigm. So, the most apparent way to structure the code is functions. However, you might follow objective-oriented programming and create classes. In my previous article, I shared an example of the objective-oriented approach to simulations.\n\nThe benefits of modular code are better readability, faster development and easier changes. For example, if you want to change your visualisation from a line chart to an area plot, you can do it in one place and re-run your code.\n\nIf you have a bunch of functions related to one particular domain, you can create a Python package for it to interact with these functions as with any other Python library. Here's a detailed guide on how to do it.\n\nLeverage testing\n\nThe other topic that is, in my opinion, undervalued in the analytical world is testing. Software engineers often have KPIs on the test coverage, which might also be useful for analysts. However, in many cases, our tests will be related to the data rather than the code itself.\n\nThe trick I've learned from one of my colleagues is to add tests on the data recency. We have multiple scripts for quarterly and annual reports that we run pretty rarely. So, he added a check to see whether the latest rows in the tables we're using are after the end of the reporting period (it shows whether the table has been updated). In Python, you can use an assert statement for this.\n\nassert last_record_time >= datetime.date(2023, 5, 31) \n\nIf the condition is fulfilled, then nothing will happen. Otherwise, you will get an AssertionError . It's a quick and easy check that can help you spot problems early.\n\nThe other thing I prefer to validate is sum statistics. For example, if you're slicing, dicing and transforming your data, it's worth checking that the overall number of requests and metrics stays the same. Some common mistakes are:\n\nduplicates that emerged because of joins,\n\nfiltered-out None values when you're using pandas.groupby function,\n\nfiltered-out dimensions because of inner joins.\n\nAlso, I always check data for duplicates. If you expect that each row will represent one user, then the number of rows should be equal to df.user_id.nunique() . If it's false, something is wrong with your data and needs investigation.\n\nThe trickiest and most helpful test is the sense check. Let's discuss some possible approaches to it.\n\nFirst, I would check whether the results make sense overall. For example, if 1-month retention equals 99% or I got 1 billion customers in Europe, there's likely a bug in the code.\n\nSecondly, I will look for other data sources or previous research on this topic to validate that my results are feasible.\n\nIf you don't have other similar research (for example, you're estimating your potential revenue after launching the product in a new market), I would recommend you compare your numbers to those of other existing segments. For example, if your incremental effect on revenue after launching your product in yet another market equals 5x current income, I would say it's a bit too optimistic and worth revisiting assumptions.\n\nI hope this mindset will help you achieve more feasible results.\n\nEncourage the team to use Version Control Systems\n\nEngineers use version control systems even for the tiny projects they are working on their own. At the same time, I often see analysts using Google Sheets to store their queries. Since I'm a great proponent and advocate for keeping all the code in the repository, I can't miss a chance to share my thoughts with you.\n\nWhy have I been using a repository for 10+ years of my data career? Here are the main benefits:\n\nReproducibility. Quite often, we need to tweak the previous research (for example, add one more dimension or narrow research down to a specific segment) or just repeat the earlier calculations. If you store all the code in a structured way, you can quickly reproduce your prior work. It usually saves a lot of time.\n\nTransparency. Linking code to the results of your research allows your colleagues to understand the methodology to the tiniest detail, which brings more trust and naturally helps to spot bugs or potential improvements.\n\nKnowledge sharing. If you have a catalogue that is easy to navigate (or you link your code to Task Trackers), it makes it super-easy for your colleagues to find your code and not start an investigation from scratch.\n\nRolling back. Have you ever been in a situation when your code was working yesterday, but then you changed something, and now it's completely broken? I've been there many times before I started committing my code regularly. Version Control systems allow you to see the whole version history and compare the code or rollback to the previous working version.\n\nCollaboration. If you're working on the code in collaboration with others, you can leverage version control systems to track and merge the changes.\n\nI hope you can see its potential benefits now. Let me briefly share my usual setup to store code:\n\nI use git + Github as a version control system, I'm this dinosaur who is still using the command line interface for git (it gives me the soothing feeling of control), but you can use the GitHub app or the functionality of your IDE.\n\nMost of my work is research (code, numbers, charts, comments, etc.), so I store 95% of my code as Jupyter Notebooks.\n\nI link my code to the Jira tickets. I usually have a tasks folder in my repository and name subfolders as ticket keys (for example, ANALYTICS-42). Then, I place all the files related to the task in this subfolder. With such an approach, I can find code related to (almost) any task in seconds.\n\nThere are a bunch of nuances of working with Jupyter Notebooks in GitHub that are worth noting.\n\nFirst, think about the output. When committing a Jupyter Notebook to the repository, you save input cells (your code or comments) and output. So, it's worth being conscious about whether you actually want to share the output. It might contain PII or other sensitive data that I wouldn't advise committing. Also, the output might be pretty big and non-informative, so it will just clutter your repository. When you're saving 10+ MB Jupyter Notebook with some random data output, all your colleagues will load this data to their computers with the next git pull command.\n\nCharts in output might be especially problematic. We all like excellent interactive Plotly charts. Unfortunately, they are not rendered on GitHub UI, so your colleagues likely won't see them. To overcome this obstacle, you might switch the output type for Plotly to PNG or JPEG.\n\nimport plotly.io as pio\npio.renderers.default = \"jpeg\"\n\nYou can find more details about Plotly renderers in the documentation.\n\nLast but not least, Jupyter Notebooks diffs are usually tricky. You would often like to understand the difference between 2 versions of the code. However, the default GitHub view won't give you much helpful info because there is too much clutter due to changes in notebook metadata (like in the example below).\n\nActually, GitHub has almost solved this issue. A rich diffs functionality in feature preview can make your life way easier - you just need to switch it on in settings.\n\nWith this feature, we can easily see that there were just a couple of changes. I've changed the default renderer and parameters for retention curves (so a chart has been updated as well).\n\nAsk for a code review\n\nEngineers do peer reviews for (almost) all changes to the code. This process allows one to spot bugs early, stop bad actors or effectively share knowledge in the team.\n\nOf course, it's not a silver bullet: reviewers can miss bugs, or a bad actor might introduce a breach into the popular open-source project. For example, there was quite a scary story of how a backdoor was planted into a compression tool widely used in popular Linux distributions.\n\nHowever, there is evidence that code review actually helps. McConnell shares the following stats in his iconic book \"Code Complete\".\n\n... software testing alone has limited effectiveness - the average defect detection rate is only 25 percent for unit testing, 35 percent for function testing, and 45 percent for integration testing. In contrast, the average effectiveness of design and code inspections are 55 and 60 percent.\n\nDespite all these benefits, analysts often don't use code review at all. I can understand why it might be challenging:\n\nAnalytical teams are usually smaller, and spending limited resources on double-checking might not sound reasonable.\n\nQuite often, analysts work in different domains, and you might end up being the only person who knows this domain well enough to do a code review.\n\nHowever, I really encourage you to do a code review, at least for critical things to mitigate risks. Here are the cases when I ask colleagues to double-check my code and assumptions:\n\nWhen I'm using data in a new domain, it's always a good idea to ask an expert to review the assumptions used;\n\nAll the tasks related to customer communications or interventions since errors in such data might lead to significant impact (for example, we've communicated wrong information to customers or deactivated wrong people);\n\nHigh-stakes decisions: if you plan to invest six months of the team's effort into the project, it's worth double- and triple-checking;\n\nWhen results are unexpected: the first hypothesis to test when I see surprising results is to check for an error in code.\n\nOf course, it's not an exhaustive list, but I hope you can see my reasoning and use common sense to define when to reach out for code review.\n\nStay up-to-date\n\nThe famous Lewis Caroll quote represents the current state of the tech domain quite well.\n\n... it takes all the running you can do, to keep in the same place. If you want to get somewhere else, you must run at least twice as fast as that.\n\nOur field is constantly evolving: new papers are published every day, libraries are updated, new tools emerge and so on. It's the same story for software engineers, data analysts, data scientists, etc.\n\nThere are so many sources of information right now that there's no problem to find it:\n\nweekly e-mails from Towards Data Science and some other subscriptions,\n\nfollowing experts on LinkedIn and X (former Twitter),\n\nsubscribing to e-mail updates for the tools and libraries I use,\n\nattending local meet-ups.\n\nA bit more tricky is to avoid being drowned by all the information. I try to focus on one thing at a time to prevent too much distraction.\n\nSummary\n\nThat's it with the software engineering practices that can be helpful for analysts. Let me quickly recap them all here:\n\nCode is not for computers. It's for people.\n\nAutomate repetitive tasks.\n\nMaster your tools.\n\nManage your environment.\n\nThink about program performance.\n\nDon't forget the DRY principle.\n\nLeverage testing.\n\nEncourage the team to use Version Control Systems.\n\nAsk for a code review.\n\nStay up-to-date.\n\nData analytics combines skills from different domains, so I believe we can benefit greatly from learning the best practices of software engineers, product managers, designers, etc. By adopting the tried-and-true techniques of our colleagues, we can improve our effectiveness and efficiency. I highly encourage you to explore these adjacent domains as well.\n\nThank you a lot for reading this article. I hope this article was insightful for you. If you have any follow-up questions or comments, please leave them in the comments section.\n\nReference\n\nAll the images are produced by the author unless otherwise stated.\n\nAcknowledgements\n\nI can't miss a chance to express my heartfelt thanks to my partner, who has been sharing his engineering wisdom with me for ages and has reviewed all my articles."
  },
  "article_0c209a130147": {
    "timestamp": 1746588575.12786,
    "data": {
      "id": "0c209a130147",
      "title": "QFM019: Engineering Leadership Reading List May 2024",
      "subtitle": "Everything that I found interesting last month about engineering leadership",
      "author": "2d9370f7f6e1",
      "publication_id": "*Self-Published*",
      "published_at": "2024-06-08 11:02:28",
      "last_modified_at": "2024-06-08 11:02:28",
      "boosted_at": "",
      "tags": [
        "qfm-leadership",
        "quantum-fax-machine",
        "engineering",
        "leadership",
        "management"
      ],
      "topics": [
        "work"
      ],
      "claps": 1,
      "voters": 1,
      "word_count": 1326,
      "responses_count": 0,
      "reading_time": 7.153773584905661,
      "url": "https://matthewsinclair.medium.com/qfm019-engineering-leadership-reading-list-may-2024-0c209a130147",
      "unique_slug": "qfm019-engineering-leadership-reading-list-may-2024-0c209a130147",
      "image_url": "https://miro.medium.com/1*ciMEZ6e6mK97O1vRZVMAvg.jpeg",
      "lang": "en",
      "is_series": false,
      "is_locked": false,
      "is_shortform": false,
      "top_highlight": "",
      "content": "QFM019: Engineering Leadership Reading List May 2024\n\nEverything that I found interesting last month about engineering leadership\n\nIn this month's Engineering Leadership Reading List, we kick off with Nicola Ballotta's Don't Manage Up, Team Up Instead, which challenges traditional hierarchical management, advocating for a collaborative \"Teaming Up\" approach. This article highlights the importance of mutual help, open communication, and shared responsibility, emphasizing equality and distributed leadership as keys to fostering innovation and collaboration within teams.\n\nThe Key Takeaways from the 2024 Tech Leader Compensation Survey reveal ongoing industry turbulence, with disparities in compensation and an increase in interim and advisory roles. This survey underscores the need for tech leaders to navigate hybrid work environments and address equity gaps to maintain competitive advantage and team morale.\n\nEffective communication is a recurring theme this month. Vinita Bansal's How to be Direct Without Being Rude provides practical strategies for maintaining honesty and empathy in conversations, crucial for leaders aiming to foster a respectful and transparent work culture. Similarly, Managing High Performers emphasises the need for structure, feedback, and clear expectations to help high performers reach their full potential, highlighting the delicate balance between guidance and autonomy.\n\nIn a thought-provoking piece, 3 reasons you shouldn't hire a Technical CTO, Allan Degnan humorously argues the essential role of technical competency in leadership, illustrating the pitfalls of non-technical leadership through satire. This theme is echoed in Culture of Competency, which stresses the interconnectedness of technical skills and cultural alignment in driving business performance.\n\nLow Process Culture, High Process Culture - Accidentally in Code examines the transition from low-process to high-process cultures. The article explores the benefits and challenges of both approaches, emphasising that true success often depends on a collective mindset and the willingness to transcend procedural compliance.\n\nFinally, The Anatomy of a Successful Team Squad delves into the implementation of the Spotify Squad Model, highlighting the balance of autonomy and agility with the need for supportive culture and leadership. And We're in the midst of a fundamental shift in leadership discusses the shift from positional authority to influence-based leadership, drawing lessons from activists and thought leaders to inspire and motivate teams.\n\nAs always, the Quantum Fax Machine Propellor Hat Key will guide your browsing. Enjoy!\n\nDon't Manage Up, Team Up Instead (hybridhacker.email): Nicola Ballotta argues that \"Managing Up\" reinforces hierarchical structures that stifle innovation and collaboration, advocating instead for a \"Teaming Up\" approach where mutual help, open communication, and shared responsibility drive team success. Ballotta provides practical steps and addresses challenges to implement this collaborative method, emphasising the importance of equality and distributed leadership within teams.\n\n#TeamCollaboration #Leadership #WorkCulture #Innovation #Teamwork\n\nKey Takeaways from the 2024 Tech Leader Compensation Survey (ctocraft.com): The 2024 Tech Leader Compensation Survey highlights that tech leaders face ongoing industry turbulence, with significant job changes and disparities in compensation, particularly in equity value between men and women. Despite most leaders working in hybrid or remote settings, North America continues to offer higher average compensation compared to Europe, and there is a notable increase in interim and advisory roles.\n\n#TechLeadership #CompensationTrends #HybridWork #EquityGap #TechIndustry\n\nHow to be Direct Without Being Rude (techtello.com): The article by Vinita Bansal emphasises the importance of being direct in communication without being rude, highlighting the need for careful word choice, empathy, and humility. It outlines strategies such as avoiding judgemental language, balancing honesty with inquiry, backing opinions with evidence, and refraining from using authority to ensure conversations are effective and respectful.\n\n#CommunicationSkills #Directness #Empathy #Humility #EffectiveCommunication\n\n3 reasons you shouldn't hire a Technical CTO (linkedin.com): The article uses some (not so subtle satire) to argue against hiring a non-technical CTO for technology-driven businesses, emphasising that technical competency is crucial for effective software development and operational success. It contends that competent technical leadership can streamline processes, reduce errors, and foster a productive culture, whereas a lack of technical skills can lead to inefficiency and strategic missteps. When I first read this, I completely missed the #satire hashtag in a footnote at the end and then proceeded to try (in good faith) to tear down the article using logic and reason. I should have just let the article do the talking.\n\n#TechLeadership #SoftwareDevelopment #BusinessStrategy #CTO #HiringPractices\n\nLow Process Culture, High Process Culture - Accidentally in Code (cate.blog): The author shares their experience transitioning from a low-process to a high-process work culture, highlighting the challenges and benefits of both. They emphasise that while processes can ensure adequacy and avoid pitfalls, true success often depends on the collective mindset and the willingness to go beyond mere procedural compliance.\n\n#WorkCulture #ProcessManagement #Feedback #Teamwork #CareerGrowth\n\nSoftware Engineering Onboarding - Defining The Rules of Fun (startupstash.com): The article emphasises the importance of an effective and efficient onboarding process for new software engineering employees, highlighting the need for clarity, quick integration, and a focus on work-life balance through practices like defining core working hours, minimising meetings, and fostering continuous learning.\n\n#Onboarding #SoftwareEngineering #WorkLifeBalance #EmployeeWellbeing #StartupCulture\n\nThe Anatomy of a Successful Team Squad - by Nicola Ballotta (hybridhacker.email): This article details an experiment with implementing the Spotify Squad Model within a team to manage increasing workloads and improve focus on new features, highlighting the benefits of autonomy, agility, and innovation while also addressing challenges like over-reliance on autonomy and resource intensity. The article emphasises that while the Squad Model can offer significant advantages, its success depends on a supportive culture, strong leadership, and careful adaptation to specific organisational contexts.\n\n#TeamSquad #AgileDevelopment #SpotifyModel #Leadership #Innovation\n\nManaging High Performers (staysaasy.com): The article provides advice on managing high performers, suggesting that even the best employees need structure, feedback, and clear expectations to reach their full potential. Managers should actively guide high performers, engage in career planning, pay them competitively, and address any issues promptly to maintain their motivation and effectiveness.\n\n#Leadership #Management #HighPerformers #CareerDevelopment #EmployeeEngagement\n\nThe Secret Ingredient of the Successful Team - by Hagai Levin (medium.com): Hagai Levin attributes the success of his current team to the genuine care they have for their products, customers, and each other, which fosters an agile and highly productive work environment, contrasting with his previous experience where a lack of care led to lower motivation and effectiveness.\n\n#TeamSuccess #WorkCulture #AgileTeams #Leadership #EmployeeEngagement\n\nWhy can't I focus? (peterszasz.com): This article discusses common reasons for difficulty in maintaining focus, such as multitasking, overcommitting, and unclear goals, and offers practical solutions like embracing single-tasking, setting clear priorities, and practising mindfulness and structured recovery sessions to enhance concentration and mental resilience.\n\n#Focus #Productivity #Mindfulness #SingleTasking #MentalHealth\n\nHow to be a great team player - by James Samuel (softwareleads.substack.com): James Samuel emphasises that great teams achieve synergy when members work together harmoniously, fostering psychological safety, sharing knowledge, offering encouragement, providing feedback, and holding each other accountable, which collectively elevate the team's performance beyond individual capabilities.\n\n#Teamwork #Synergy #Leadership #Collaboration #EngineeringTeams\n\nWe're in the midst of a fundamental shift in leadership (fastcompany.com): The article discusses a significant shift in leadership dynamics, highlighting that traditional models relying on positional authority are being replaced by influence-based approaches. It argues that effective leadership now emphasises referent, expert, and informational power, drawing lessons from activists and thought leaders to inspire and motivate without coercion.\n\n#LeadershipShift #InfluencePower #ThoughtLeadership #RemoteWork #EmpathyInLeadership\n\nCulture of Competency (linkedin.com): The article argues that technical competency is crucial for technology companies, emphasizing that both culture and tech skills are interconnected. It highlights that competent technical leadership improves software delivery efficiency and overall business performance, while poor hiring practices and undervaluing skills can lead to significant operational issues.\n\n#TechLeadership #CompetencyMatters #SoftwareDevelopment #DigitalTransformation #TechCulture\n\nRegards,\nM@\n\n[ED: If you'd like to sign up for this content as an email, click here to join the mailing list.]\n\nOriginally published on quantumfaxmachine.com.\n\nYou can also check out the Slideshare version here."
    }
  },
  "content_0c209a130147": {
    "timestamp": 1746588575.656744,
    "data": "QFM019: Engineering Leadership Reading List May 2024\n\nEverything that I found interesting last month about engineering leadership\n\nIn this month's Engineering Leadership Reading List, we kick off with Nicola Ballotta's Don't Manage Up, Team Up Instead, which challenges traditional hierarchical management, advocating for a collaborative \"Teaming Up\" approach. This article highlights the importance of mutual help, open communication, and shared responsibility, emphasizing equality and distributed leadership as keys to fostering innovation and collaboration within teams.\n\nThe Key Takeaways from the 2024 Tech Leader Compensation Survey reveal ongoing industry turbulence, with disparities in compensation and an increase in interim and advisory roles. This survey underscores the need for tech leaders to navigate hybrid work environments and address equity gaps to maintain competitive advantage and team morale.\n\nEffective communication is a recurring theme this month. Vinita Bansal's How to be Direct Without Being Rude provides practical strategies for maintaining honesty and empathy in conversations, crucial for leaders aiming to foster a respectful and transparent work culture. Similarly, Managing High Performers emphasises the need for structure, feedback, and clear expectations to help high performers reach their full potential, highlighting the delicate balance between guidance and autonomy.\n\nIn a thought-provoking piece, 3 reasons you shouldn't hire a Technical CTO, Allan Degnan humorously argues the essential role of technical competency in leadership, illustrating the pitfalls of non-technical leadership through satire. This theme is echoed in Culture of Competency, which stresses the interconnectedness of technical skills and cultural alignment in driving business performance.\n\nLow Process Culture, High Process Culture - Accidentally in Code examines the transition from low-process to high-process cultures. The article explores the benefits and challenges of both approaches, emphasising that true success often depends on a collective mindset and the willingness to transcend procedural compliance.\n\nFinally, The Anatomy of a Successful Team Squad delves into the implementation of the Spotify Squad Model, highlighting the balance of autonomy and agility with the need for supportive culture and leadership. And We're in the midst of a fundamental shift in leadership discusses the shift from positional authority to influence-based leadership, drawing lessons from activists and thought leaders to inspire and motivate teams.\n\nAs always, the Quantum Fax Machine Propellor Hat Key will guide your browsing. Enjoy!\n\nDon't Manage Up, Team Up Instead (hybridhacker.email): Nicola Ballotta argues that \"Managing Up\" reinforces hierarchical structures that stifle innovation and collaboration, advocating instead for a \"Teaming Up\" approach where mutual help, open communication, and shared responsibility drive team success. Ballotta provides practical steps and addresses challenges to implement this collaborative method, emphasising the importance of equality and distributed leadership within teams.\n\n#TeamCollaboration #Leadership #WorkCulture #Innovation #Teamwork\n\nKey Takeaways from the 2024 Tech Leader Compensation Survey (ctocraft.com): The 2024 Tech Leader Compensation Survey highlights that tech leaders face ongoing industry turbulence, with significant job changes and disparities in compensation, particularly in equity value between men and women. Despite most leaders working in hybrid or remote settings, North America continues to offer higher average compensation compared to Europe, and there is a notable increase in interim and advisory roles.\n\n#TechLeadership #CompensationTrends #HybridWork #EquityGap #TechIndustry\n\nHow to be Direct Without Being Rude (techtello.com): The article by Vinita Bansal emphasises the importance of being direct in communication without being rude, highlighting the need for careful word choice, empathy, and humility. It outlines strategies such as avoiding judgemental language, balancing honesty with inquiry, backing opinions with evidence, and refraining from using authority to ensure conversations are effective and respectful.\n\n#CommunicationSkills #Directness #Empathy #Humility #EffectiveCommunication\n\n3 reasons you shouldn't hire a Technical CTO (linkedin.com): The article uses some (not so subtle satire) to argue against hiring a non-technical CTO for technology-driven businesses, emphasising that technical competency is crucial for effective software development and operational success. It contends that competent technical leadership can streamline processes, reduce errors, and foster a productive culture, whereas a lack of technical skills can lead to inefficiency and strategic missteps. When I first read this, I completely missed the #satire hashtag in a footnote at the end and then proceeded to try (in good faith) to tear down the article using logic and reason. I should have just let the article do the talking.\n\n#TechLeadership #SoftwareDevelopment #BusinessStrategy #CTO #HiringPractices\n\nLow Process Culture, High Process Culture - Accidentally in Code (cate.blog): The author shares their experience transitioning from a low-process to a high-process work culture, highlighting the challenges and benefits of both. They emphasise that while processes can ensure adequacy and avoid pitfalls, true success often depends on the collective mindset and the willingness to go beyond mere procedural compliance.\n\n#WorkCulture #ProcessManagement #Feedback #Teamwork #CareerGrowth\n\nSoftware Engineering Onboarding - Defining The Rules of Fun (startupstash.com): The article emphasises the importance of an effective and efficient onboarding process for new software engineering employees, highlighting the need for clarity, quick integration, and a focus on work-life balance through practices like defining core working hours, minimising meetings, and fostering continuous learning.\n\n#Onboarding #SoftwareEngineering #WorkLifeBalance #EmployeeWellbeing #StartupCulture\n\nThe Anatomy of a Successful Team Squad - by Nicola Ballotta (hybridhacker.email): This article details an experiment with implementing the Spotify Squad Model within a team to manage increasing workloads and improve focus on new features, highlighting the benefits of autonomy, agility, and innovation while also addressing challenges like over-reliance on autonomy and resource intensity. The article emphasises that while the Squad Model can offer significant advantages, its success depends on a supportive culture, strong leadership, and careful adaptation to specific organisational contexts.\n\n#TeamSquad #AgileDevelopment #SpotifyModel #Leadership #Innovation\n\nManaging High Performers (staysaasy.com): The article provides advice on managing high performers, suggesting that even the best employees need structure, feedback, and clear expectations to reach their full potential. Managers should actively guide high performers, engage in career planning, pay them competitively, and address any issues promptly to maintain their motivation and effectiveness.\n\n#Leadership #Management #HighPerformers #CareerDevelopment #EmployeeEngagement\n\nThe Secret Ingredient of the Successful Team - by Hagai Levin (medium.com): Hagai Levin attributes the success of his current team to the genuine care they have for their products, customers, and each other, which fosters an agile and highly productive work environment, contrasting with his previous experience where a lack of care led to lower motivation and effectiveness.\n\n#TeamSuccess #WorkCulture #AgileTeams #Leadership #EmployeeEngagement\n\nWhy can't I focus? (peterszasz.com): This article discusses common reasons for difficulty in maintaining focus, such as multitasking, overcommitting, and unclear goals, and offers practical solutions like embracing single-tasking, setting clear priorities, and practising mindfulness and structured recovery sessions to enhance concentration and mental resilience.\n\n#Focus #Productivity #Mindfulness #SingleTasking #MentalHealth\n\nHow to be a great team player - by James Samuel (softwareleads.substack.com): James Samuel emphasises that great teams achieve synergy when members work together harmoniously, fostering psychological safety, sharing knowledge, offering encouragement, providing feedback, and holding each other accountable, which collectively elevate the team's performance beyond individual capabilities.\n\n#Teamwork #Synergy #Leadership #Collaboration #EngineeringTeams\n\nWe're in the midst of a fundamental shift in leadership (fastcompany.com): The article discusses a significant shift in leadership dynamics, highlighting that traditional models relying on positional authority are being replaced by influence-based approaches. It argues that effective leadership now emphasises referent, expert, and informational power, drawing lessons from activists and thought leaders to inspire and motivate without coercion.\n\n#LeadershipShift #InfluencePower #ThoughtLeadership #RemoteWork #EmpathyInLeadership\n\nCulture of Competency (linkedin.com): The article argues that technical competency is crucial for technology companies, emphasizing that both culture and tech skills are interconnected. It highlights that competent technical leadership improves software delivery efficiency and overall business performance, while poor hiring practices and undervaluing skills can lead to significant operational issues.\n\n#TechLeadership #CompetencyMatters #SoftwareDevelopment #DigitalTransformation #TechCulture\n\nRegards,\nM@\n\n[ED: If you'd like to sign up for this content as an email, click here to join the mailing list.]\n\nOriginally published on quantumfaxmachine.com.\n\nYou can also check out the Slideshare version here."
  },
  "article_17ce3d45c1ed": {
    "timestamp": 1746588576.166249,
    "data": {
      "id": "17ce3d45c1ed",
      "title": "QFM015: Engineering Leadership Reading List April 2024",
      "subtitle": "Everything that I found interesting last month about engineering leadership",
      "author": "2d9370f7f6e1",
      "publication_id": "*Self-Published*",
      "published_at": "2024-05-09 14:02:29",
      "last_modified_at": "2024-05-09 14:02:29",
      "boosted_at": "",
      "tags": [
        "qfm-leadership",
        "quantum-fax-machine",
        "engineering",
        "leadership",
        "management"
      ],
      "topics": [
        "work",
        "programming"
      ],
      "claps": 14,
      "voters": 6,
      "word_count": 2624,
      "responses_count": 0,
      "reading_time": 13.55188679245283,
      "url": "https://matthewsinclair.medium.com/qfm015-engineering-leadership-reading-list-april-2024-17ce3d45c1ed",
      "unique_slug": "qfm015-engineering-leadership-reading-list-april-2024-17ce3d45c1ed",
      "image_url": "https://miro.medium.com/1*dIpyuRQr4Tbl67ruVQCogQ.jpeg",
      "lang": "en",
      "is_series": false,
      "is_locked": false,
      "is_shortform": false,
      "top_highlight": "",
      "content": "QFM015: Engineering Leadership Reading List April 2024\n\nEverything that I found interesting last month about engineering leadership\n\nIn this month's Engineering Leadership Reading List contains a curated a selection of articles that weave together critical themes for engineering leaders, and that also piqued my interest last month.\n\nSeveral articles such as Improving OKRs and Abolish Performance Reviews, and 10 toxic employees to avoid focus on the employee experience, providing a some contrary examples to the usual narrative.\n\nHow to Be a Better Software Engineering Leader asks how you can be better at leading software engineering teams, whilst Everyone lies to leaders shines some light on the way that leadership fundamentally changes the relationship between people, particularly following a promotion to a senior leadership role.\n\nChanging tack towards the practicalities of building software The Grand Unified Theory of Documentation presents a new (or at least, repackaged) way to document software, whilst For God's sake follow the Lean Startup Method implores you to rethink exactly what and how you are \"doing\" lean/agile product development.\n\nFinally, in Creating Discomfort Zones we look at the (somewhat contrarian) view that favouring comfort over success is a mistaken priority of modern leadership.\n\nAs always, the Quantum Fax Machine Propellor Hat Key will guide your browsing. Enjoy!\n\nImproving OKRs: This article discusses various applications of Objectives and Key Results (OKRs). It highlights how leading practitioners are refining OKRs by focusing on real outcomes rather than outputs, using a truth statement approach for setting goals, excluding numerical components from objectives, and defining key results as evidence of achieving objectives. The piece also emphasizes the importance of having fewer, more focused OKRs and suggests alignment over cascading OKRs, paired with a persistent model for aligning with long-term organisational strategy.\n\n#OKRs #GoalSetting #Leadership #ManagementStrategies #ContinuousImprovement\n\n10 toxic employees to avoid: Toxic employees can devastate your workplace culture and productivity, as shown by Harvard research. Learn about the ten types of harmful personalities and how to identify and manage them effectively.\n\n#WorkplaceCulture #ToxicEmployees #LeadershipTips #WorkplaceWellbeing #EmployeeManagement\n\n11 questions to crush your next interview: Prepare for these 11 additional interview questions to excel, from what motivates you to your greatest achievement. Each question is an opportunity to highlight your strengths and align them with the company's mission and values.\n\n#InterviewTips #JobSearch #CareerGrowth #JobInterview #ProfessionalDevelopment\n\nAbolish Performance Reviews: Phil Haack argues systematically against performance reviews, stating they are expensive, biased, and largely ineffective. Drawing from various studies and experts like Dr. William Edwards Deming, the post reveals that performance appraisals neither improve performance nor accurately reflect an employee's contribution. Instead, they perpetuate anxiety and discouragement, fail to foster team unity, and are prone to gender biases. Emphasising this, Haack advocates for management styles that prioritise intrinsic motivation, ongoing feedback, and removing traditional performance reviews to better recognise and encourage employee value and team dynamics.\n\n#PerformanceReviews #Management #WorkplaceCulture #EmployeeMotivation #GenderBias\n\nPositive feedback is different from praise: Jacob Kaplan-Moss discusses the crucial distinction between positive feedback and praise in management, emphasizing how feedback, unlike praise, is specific to behaviors and their impacts, aimed at encouraging future performance. He advises managers on utilizing positive feedback effectively to drive improvement, and cautions about the potential pitfalls of praise, suggesting it may not always lead to the desired outcomes. The article provides practical examples of both praise and positive feedback, underlining the importance of specificity and forward-looking guidance in managerial communication.\n\n#management #feedback #praise #performanceimprovement #leadership\n\nThe Grand Unified Theory of Documentation: The Documentation System, as defined by David Laing, categorizes good software documentation into four essential types: tutorials, how-to guides, technical reference, and explanation, each serving a unique purpose and requiring a distinct approach. It advocates for a universal, simple documentation scheme that's proven effective across various fields and applications, promising enhanced project success with its adoption. The system is embraced widely, applying straightforward principles to vastly improve documentation quality.\n\n#Documentation #SoftwareDevelopment #TechWriting #BestPractices #DocumentationSystem\n\nHow to Be a Better Software Engineering Leader: This detailed article addresses the pivotal role of first-level managers in engineering, blending technical proficiency with strategic foresight to meet company objectives. It delves into the transformative shift from traditional managerial roles to more hands-on leadership positions amidst organizational flattening. The emphasis lies on how effective management, beyond mere task delegation, can significantly influence a company's success by fostering an environment that balances technical debt management, team development, and innovative productivity.\n\n#Leadership #EngineeringManagement #Productivity #TechLeadership #StrategicThinking\n\nAmazon's Press Release and FAQ: This article introduces a practical guide on Amazon's Press Release and FAQ (PR/FAQ) approach, emphasizing its crucial role in the 'Working Backwards' strategy for product development. It consolidates important starter instructions for those new to PR/FAQ writing, aiming to make the process more accessible and practical. The author shares insights and templates to help product managers (PMs) craft their first PR/FAQ, highlighting its value in strategic product thinking and execution.\n\n#ProductManagement #Amazon #Strategy #PRFAQ #WorkingBackwards\n\nEveryone lies to leaders: The article delves into the complexities of leadership and the surprising shifts in dynamics that occur when one attains a position of power. It follows the author's personal journey of promotion and the realization of becoming a 'Very Important Person,' leading to a profound understanding of how authority impacts relationships and decision-making. Highlighting the paradox of power, it emphasizes that leaders often receive filtered information, which can significantly affect their effectiveness. The piece provides actionable advice for leaders to counter these challenges by fostering open communication, inviting critique, and building genuine relationships within their organizations.\n\n#Leadership #CompanyCulture #Communication #Recognition #Management\n\nGuide to Understanding Onion Diagrams: The article discusses the concept, creation, benefits, and uses of onion diagrams, particularly in the context of MindManager, a tool that simplifies the process of making complex, detailed onion diagrams. Onion diagrams are detailed charts used for showing dependencies and relationships between different parts of a process or organization. MindManager is highlighted as an advantageous tool for creating these diagrams, with features like an intuitive interface, extensive image library, premade templates, and powerful integrations, facilitating the easy visualization of organizational layers and stakeholder relationships.\n\n#OnionDiagram #MindManager #VisualizationTools #ProcessMapping #OrganizationalChart\n\nThe Five Conditions for (Organizational) Improvement: Roy Rapoport's 2017 essay, \"The Five Conditions for Improvement,\" discusses a framework for organizational and individual improvement, detailing the essential steps for recognizing and solving performance issues. Using the example of Bob's Organic Bagels, a growing company, the piece elaborates on the conditions necessary for improvement, including recognizing a problem, wanting to resolve it, understanding management's role in the problem, devising a solution plan, and executing it successfully. This framework provides valuable insights for leaders looking to navigate organizational change effectively.\n\n#OrganizationalChange #Leadership #PerformanceImprovement #BusinessManagement #RoyRapoport\n\nThe Death of the Big 4: AI-Enabled Services Are Opening a Whole New Market: The article discusses the new market opportunities created by AI-enabled services, challenging the traditional dominance of the Big 4 and other service-heavy industries. The evolving landscape sees a shift from software-centric startups to businesses blending AI and human efforts to offer innovative solutions. Founders are encouraged to explore this promising frontier, positioning themselves as the next generation of disruptors aiming for higher margins and scalable models in various service sectors.\n\n#AI #ServicesIndustry #MarketDisruption #TechInnovation #StartupOpportunities\n\nCreating Discomfort Zones: This article emphasises the mistaken priority of comfort over success in modern leadership. It argues that perks in the tech industry should aim to ease all but the work itself, allowing employees to focus and exert effort where it truly matters. The piece advocates for a culture of candidness and challenge, stating that avoiding tough conversations leads to stagnation and underperformance. It concludes with strategies for leaders to foster growth and face uncomfortable truths for the betterment of their teams.\n\n#Leadership #TechIndustry #GrowthMindset #CorporateCulture #Innovation\n\nHow to Coach an Employee Who is Performing Well: The article discusses the importance of coaching top-performing employees, emphasizing that such coaching often gets overlooked. It highlights the necessity of understanding an employee's core motivation, offering choices that align with their motivation, and connecting their work to progress. The overall message is to invest in coaching well-performing team members to retain their talent and contribution to the team's success.\n\n#Coaching #EmployeePerformance #Leadership #EmployeeRetention #Motivation\n\nWhat Sam Altman's Prediction About The $1B One-Person Business Model Means For You: The article dives into Sam Altman's bold prediction about the burgeoning potential of $1B one-person businesses, emphasizing how younger generations hold a distinct advantage in this domain. It presents an optimistic view on the viability of solo entrepreneurship, resonating with those looking to leverage their individual capabilities to build significant wealth and impact without the traditional workforce or large-scale operations.\n\n#Entrepreneurship #SamAltman #OnePersonBusiness #WealthBuilding #SoloEntrepreneurship\n\nCoaching for Sanity: This article discusses the underutilised potential of coaching within startups, especially during growth phases. The author, Aviv Ben-Yosef, emphasises the importance of properly applying coaching to empower individuals and amplify their positive impact on the organisation. He outlines a nuanced approach to coaching, moving beyond a binary view to adapt strategies based on risk and urgency, thereby fostering an environment conducive to learning and adaptation.\n\n#Coaching #StartupGrowth #LeadershipDevelopment #Empowerment #ProfessionalGrowth\n\nWhy Software Projects Fail: This article tackles not only the evident reasons behind the failure of software projects but delves into the subtler, often overlooked aspects. It stresses how overconfidence among developers, inexperienced management, and mismanaged stakeholders contribute significantly to project derailments. The insights provided by both the author and commenter reflections paint a comprehensive picture of the multifaceted nature of project failures, emphasizing the need for realistic estimations, the importance of acknowledging and learning from failures, and the vital role of clear communication and objective setting in the success of software projects.\n\n#SoftwareDevelopment #ProjectManagement #TechLeadership #TeamDynamics #ITFailures\n\nThe best engineering interview question I've ever gotten, Part 1: Arthur O'Dwyer shares a memorable engineering interview challenge from his experience at MemSQL (now SingleStore) involving memcached, an in-memory key-value store. Tasked with adding an 'atomic multiply by k' operation to memcached, this challenge showcases the intricacies of working with low-level system programming and database manipulation. The story not only highlights a unique interview question but also delves into the usage of memcached, including commands like 'incr,' 'decr,' and the proposed 'mult,' demonstrating how these operations manage data atomically in concurrent environments.\n\n#Engineering #Interviews #Memcached #SystemProgramming #Database\n\nIntroducing Narrative-Driven Development: This video presents a novel approach to unify development teams by focusing on the comprehensive narrative of the system rather than fragmented tasks and documentation. This methodology aims to streamline teamwork and enhance understanding of the system in its entirety.\n\n#TechInnovation #DevelopmentMethodology #NarrativeDrivenDevelopment #Teamwork #SystemUnderstanding\n\nAgile in the Age of AI: This article explores how Agile methodologies adapt to the advancements in artificial intelligence (AI), challenging traditional practices. Agile principles, over two decades old, are based on human behavior and team productivity assumptions, which AI technology is quickly reshaping. The integration of AI into teams could significantly reduce the necessity for human team members, suggesting a future where Agile practices undergo substantial alteration to accommodate AI's capabilities, including more significant reliance on AI for development tasks, changing team dynamics, and potentially redefining the roles within Agile frameworks.\n\n#Agile #ArtificialIntelligence #SoftwareDevelopment #TeamDynamics #FutureOfWork\n\nCelebrating Failure: This article delves into the paradigm shift of viewing failures within organisations not just as tolerated mistakes, but as opportunities for growth, learning, and systemic improvement. It argues that a culture that openly celebrates failures can lead to increased innovation, transparency, and resilience, fostering an environment where risk-taking is seen in a positive light and failure is used as a powerful learning tool.\n\n#Leadership #Innovation #CultureOfLearning #Resilience #CelebratingFailure\n\nThe Arc Product-Market Fit Framework: This article discusses a framework to assist startups in understanding their product's position within the market. It outlines three archetypes: 'Hair on Fire,' 'Hard Fact,' and 'Future Vision,' each offering a unique perspective on product-market fit. Through examples and case studies, the article explains how startups can navigate their path to success by understanding customer-product dynamics, distinguishing themselves in competitive landscapes, and innovating for the future. It emphasises the fluidity of product-market fit and how companies can transition between these paths over time, using companies like Apple as an example.\n\n#ProductMarketFit #Startups #Innovation #SequoiaCapital #Technology\n\nA Sketch of the Biggest Idea in Software Architecture: The article elaborates on the concept of 'narrow waists' in software architecture, highlighting its significance across various areas like networking, operating systems, and language design. It contrasts two styles of building software: one focused on fine-grained static types and build-time composition, and the other on coarse-grained 'waists' and runtime composition. The post delves into the benefits of the second style, which becomes more evident at larger scales and over longer time horizons, suggesting it encourages global economy, flexibility, generality, and extension at the cost of local convenience.\n\n#SoftwareArchitecture #Programming #TechnologyTrends #OpenSource #TechInnovation\n\nAvoid blundering: 80% of a winning strategy: Jason Cohen explores the paradoxical idea that not making mistakes - or blundering - is a significant part of achieving success, especially in chess and start-ups. The article delves into the concept that avoiding common pitfalls can often lead to victory, emphasizing the importance of knowing what not to do. Cohen uses chess as a metaphor to illustrate how avoiding blunders is crucial for success, and applies this lesson to startups, advising founders to focus on avoiding major mistakes to increase their chances of thriving.\n\n#Startups #Strategy #Success #Chess #AvoidingMistakes\n\nFor God's sake follow the Lean Startup Method: This article critiques the \"Lean Startup\" method, emphasizing that while the concept is widely embraced, it may not be fully understood or correctly implemented by many entrepreneurs. It argues that the iterative approach and customer feedback strategies often lead to incremental rather than revolutionary improvements.\n\n#LeanStartup #Innovation #Entrepreneurship #BusinessGrowth #StartupTips\n\nThe Last Re-Org You'll Ever Do: This article explores modern approaches to organisational design, focusing on adaptive and evolutionary models over traditional hierarchical structures. It discusses the concept of antifragile organisations that thrive on change and delves into three specific frameworks: Holacracy, Agile Squads, and Self Organising. By examining companies like Valve, Spotify, and Medium, the piece illustrates how these models distribute authority and foster an environment of continuous evolution, aiming for organisations that are more responsive to technological advancements and employee autonomy.\n\n#OrganizationalDesign #Holacracy #Agile #SelfOrganizing #FutureOfWork\n\nGenAI Copilots Exacerbate Problems: The article discusses the impact of Generative AI and how it can exacerbate problems for companies not prepared to integrate it effectively. It contrasts this technology's potential to speed up development processes with the challenges it poses, such as aggravating bottlenecks in systems not equipped to handle faster code generation. The distinction between companies that can leverage AI to minimise technical debt and those that cannot highlights the widening gap in industry performance. It also emphasises the importance of having a well-functioning software delivery system to truly benefit from Generative AI's capabilities.\n\n#GenerativeAI #TechDebt #SoftwareDelivery #DevOps #IndustryGap\n\nTBM 271: The Biggest Untapped Opportunity: The article identifies 'skilled pragmatists' as the most significant untapped resource within companies, larger in number and potential than low performers or high achievers. Such employees, capable and practical, remain underutilised due to their aversion to office politics and visibility, focusing instead on productivity within existing systems. The piece critiques the conventional corporate approach to engagement and problem-solving, urging a reevaluation of how companies perceive and utilise this quiet majority.\n\n#EmployeeEngagement #SkilledPragmatists #CorporateCulture #TalentManagement #UntappedPotential\n\nRegards,\nM@\n\n[ED: If you'd like to sign up for this content as an email, click here to join the mailing list.]\n\nOriginally published on quantumfaxmachine.com."
    }
  },
  "content_17ce3d45c1ed": {
    "timestamp": 1746588576.71713,
    "data": "QFM015: Engineering Leadership Reading List April 2024\n\nEverything that I found interesting last month about engineering leadership\n\nIn this month's Engineering Leadership Reading List contains a curated a selection of articles that weave together critical themes for engineering leaders, and that also piqued my interest last month.\n\nSeveral articles such as Improving OKRs and Abolish Performance Reviews, and 10 toxic employees to avoid focus on the employee experience, providing a some contrary examples to the usual narrative.\n\nHow to Be a Better Software Engineering Leader asks how you can be better at leading software engineering teams, whilst Everyone lies to leaders shines some light on the way that leadership fundamentally changes the relationship between people, particularly following a promotion to a senior leadership role.\n\nChanging tack towards the practicalities of building software The Grand Unified Theory of Documentation presents a new (or at least, repackaged) way to document software, whilst For God's sake follow the Lean Startup Method implores you to rethink exactly what and how you are \"doing\" lean/agile product development.\n\nFinally, in Creating Discomfort Zones we look at the (somewhat contrarian) view that favouring comfort over success is a mistaken priority of modern leadership.\n\nAs always, the Quantum Fax Machine Propellor Hat Key will guide your browsing. Enjoy!\n\nImproving OKRs: This article discusses various applications of Objectives and Key Results (OKRs). It highlights how leading practitioners are refining OKRs by focusing on real outcomes rather than outputs, using a truth statement approach for setting goals, excluding numerical components from objectives, and defining key results as evidence of achieving objectives. The piece also emphasizes the importance of having fewer, more focused OKRs and suggests alignment over cascading OKRs, paired with a persistent model for aligning with long-term organisational strategy.\n\n#OKRs #GoalSetting #Leadership #ManagementStrategies #ContinuousImprovement\n\n10 toxic employees to avoid: Toxic employees can devastate your workplace culture and productivity, as shown by Harvard research. Learn about the ten types of harmful personalities and how to identify and manage them effectively.\n\n#WorkplaceCulture #ToxicEmployees #LeadershipTips #WorkplaceWellbeing #EmployeeManagement\n\n11 questions to crush your next interview: Prepare for these 11 additional interview questions to excel, from what motivates you to your greatest achievement. Each question is an opportunity to highlight your strengths and align them with the company's mission and values.\n\n#InterviewTips #JobSearch #CareerGrowth #JobInterview #ProfessionalDevelopment\n\nAbolish Performance Reviews: Phil Haack argues systematically against performance reviews, stating they are expensive, biased, and largely ineffective. Drawing from various studies and experts like Dr. William Edwards Deming, the post reveals that performance appraisals neither improve performance nor accurately reflect an employee's contribution. Instead, they perpetuate anxiety and discouragement, fail to foster team unity, and are prone to gender biases. Emphasising this, Haack advocates for management styles that prioritise intrinsic motivation, ongoing feedback, and removing traditional performance reviews to better recognise and encourage employee value and team dynamics.\n\n#PerformanceReviews #Management #WorkplaceCulture #EmployeeMotivation #GenderBias\n\nPositive feedback is different from praise: Jacob Kaplan-Moss discusses the crucial distinction between positive feedback and praise in management, emphasizing how feedback, unlike praise, is specific to behaviors and their impacts, aimed at encouraging future performance. He advises managers on utilizing positive feedback effectively to drive improvement, and cautions about the potential pitfalls of praise, suggesting it may not always lead to the desired outcomes. The article provides practical examples of both praise and positive feedback, underlining the importance of specificity and forward-looking guidance in managerial communication.\n\n#management #feedback #praise #performanceimprovement #leadership\n\nThe Grand Unified Theory of Documentation: The Documentation System, as defined by David Laing, categorizes good software documentation into four essential types: tutorials, how-to guides, technical reference, and explanation, each serving a unique purpose and requiring a distinct approach. It advocates for a universal, simple documentation scheme that's proven effective across various fields and applications, promising enhanced project success with its adoption. The system is embraced widely, applying straightforward principles to vastly improve documentation quality.\n\n#Documentation #SoftwareDevelopment #TechWriting #BestPractices #DocumentationSystem\n\nHow to Be a Better Software Engineering Leader: This detailed article addresses the pivotal role of first-level managers in engineering, blending technical proficiency with strategic foresight to meet company objectives. It delves into the transformative shift from traditional managerial roles to more hands-on leadership positions amidst organizational flattening. The emphasis lies on how effective management, beyond mere task delegation, can significantly influence a company's success by fostering an environment that balances technical debt management, team development, and innovative productivity.\n\n#Leadership #EngineeringManagement #Productivity #TechLeadership #StrategicThinking\n\nAmazon's Press Release and FAQ: This article introduces a practical guide on Amazon's Press Release and FAQ (PR/FAQ) approach, emphasizing its crucial role in the 'Working Backwards' strategy for product development. It consolidates important starter instructions for those new to PR/FAQ writing, aiming to make the process more accessible and practical. The author shares insights and templates to help product managers (PMs) craft their first PR/FAQ, highlighting its value in strategic product thinking and execution.\n\n#ProductManagement #Amazon #Strategy #PRFAQ #WorkingBackwards\n\nEveryone lies to leaders: The article delves into the complexities of leadership and the surprising shifts in dynamics that occur when one attains a position of power. It follows the author's personal journey of promotion and the realization of becoming a 'Very Important Person,' leading to a profound understanding of how authority impacts relationships and decision-making. Highlighting the paradox of power, it emphasizes that leaders often receive filtered information, which can significantly affect their effectiveness. The piece provides actionable advice for leaders to counter these challenges by fostering open communication, inviting critique, and building genuine relationships within their organizations.\n\n#Leadership #CompanyCulture #Communication #Recognition #Management\n\nGuide to Understanding Onion Diagrams: The article discusses the concept, creation, benefits, and uses of onion diagrams, particularly in the context of MindManager, a tool that simplifies the process of making complex, detailed onion diagrams. Onion diagrams are detailed charts used for showing dependencies and relationships between different parts of a process or organization. MindManager is highlighted as an advantageous tool for creating these diagrams, with features like an intuitive interface, extensive image library, premade templates, and powerful integrations, facilitating the easy visualization of organizational layers and stakeholder relationships.\n\n#OnionDiagram #MindManager #VisualizationTools #ProcessMapping #OrganizationalChart\n\nThe Five Conditions for (Organizational) Improvement: Roy Rapoport's 2017 essay, \"The Five Conditions for Improvement,\" discusses a framework for organizational and individual improvement, detailing the essential steps for recognizing and solving performance issues. Using the example of Bob's Organic Bagels, a growing company, the piece elaborates on the conditions necessary for improvement, including recognizing a problem, wanting to resolve it, understanding management's role in the problem, devising a solution plan, and executing it successfully. This framework provides valuable insights for leaders looking to navigate organizational change effectively.\n\n#OrganizationalChange #Leadership #PerformanceImprovement #BusinessManagement #RoyRapoport\n\nThe Death of the Big 4: AI-Enabled Services Are Opening a Whole New Market: The article discusses the new market opportunities created by AI-enabled services, challenging the traditional dominance of the Big 4 and other service-heavy industries. The evolving landscape sees a shift from software-centric startups to businesses blending AI and human efforts to offer innovative solutions. Founders are encouraged to explore this promising frontier, positioning themselves as the next generation of disruptors aiming for higher margins and scalable models in various service sectors.\n\n#AI #ServicesIndustry #MarketDisruption #TechInnovation #StartupOpportunities\n\nCreating Discomfort Zones: This article emphasises the mistaken priority of comfort over success in modern leadership. It argues that perks in the tech industry should aim to ease all but the work itself, allowing employees to focus and exert effort where it truly matters. The piece advocates for a culture of candidness and challenge, stating that avoiding tough conversations leads to stagnation and underperformance. It concludes with strategies for leaders to foster growth and face uncomfortable truths for the betterment of their teams.\n\n#Leadership #TechIndustry #GrowthMindset #CorporateCulture #Innovation\n\nHow to Coach an Employee Who is Performing Well: The article discusses the importance of coaching top-performing employees, emphasizing that such coaching often gets overlooked. It highlights the necessity of understanding an employee's core motivation, offering choices that align with their motivation, and connecting their work to progress. The overall message is to invest in coaching well-performing team members to retain their talent and contribution to the team's success.\n\n#Coaching #EmployeePerformance #Leadership #EmployeeRetention #Motivation\n\nWhat Sam Altman's Prediction About The $1B One-Person Business Model Means For You: The article dives into Sam Altman's bold prediction about the burgeoning potential of $1B one-person businesses, emphasizing how younger generations hold a distinct advantage in this domain. It presents an optimistic view on the viability of solo entrepreneurship, resonating with those looking to leverage their individual capabilities to build significant wealth and impact without the traditional workforce or large-scale operations.\n\n#Entrepreneurship #SamAltman #OnePersonBusiness #WealthBuilding #SoloEntrepreneurship\n\nCoaching for Sanity: This article discusses the underutilised potential of coaching within startups, especially during growth phases. The author, Aviv Ben-Yosef, emphasises the importance of properly applying coaching to empower individuals and amplify their positive impact on the organisation. He outlines a nuanced approach to coaching, moving beyond a binary view to adapt strategies based on risk and urgency, thereby fostering an environment conducive to learning and adaptation.\n\n#Coaching #StartupGrowth #LeadershipDevelopment #Empowerment #ProfessionalGrowth\n\nWhy Software Projects Fail: This article tackles not only the evident reasons behind the failure of software projects but delves into the subtler, often overlooked aspects. It stresses how overconfidence among developers, inexperienced management, and mismanaged stakeholders contribute significantly to project derailments. The insights provided by both the author and commenter reflections paint a comprehensive picture of the multifaceted nature of project failures, emphasizing the need for realistic estimations, the importance of acknowledging and learning from failures, and the vital role of clear communication and objective setting in the success of software projects.\n\n#SoftwareDevelopment #ProjectManagement #TechLeadership #TeamDynamics #ITFailures\n\nThe best engineering interview question I've ever gotten, Part 1: Arthur O'Dwyer shares a memorable engineering interview challenge from his experience at MemSQL (now SingleStore) involving memcached, an in-memory key-value store. Tasked with adding an 'atomic multiply by k' operation to memcached, this challenge showcases the intricacies of working with low-level system programming and database manipulation. The story not only highlights a unique interview question but also delves into the usage of memcached, including commands like 'incr,' 'decr,' and the proposed 'mult,' demonstrating how these operations manage data atomically in concurrent environments.\n\n#Engineering #Interviews #Memcached #SystemProgramming #Database\n\nIntroducing Narrative-Driven Development: This video presents a novel approach to unify development teams by focusing on the comprehensive narrative of the system rather than fragmented tasks and documentation. This methodology aims to streamline teamwork and enhance understanding of the system in its entirety.\n\n#TechInnovation #DevelopmentMethodology #NarrativeDrivenDevelopment #Teamwork #SystemUnderstanding\n\nAgile in the Age of AI: This article explores how Agile methodologies adapt to the advancements in artificial intelligence (AI), challenging traditional practices. Agile principles, over two decades old, are based on human behavior and team productivity assumptions, which AI technology is quickly reshaping. The integration of AI into teams could significantly reduce the necessity for human team members, suggesting a future where Agile practices undergo substantial alteration to accommodate AI's capabilities, including more significant reliance on AI for development tasks, changing team dynamics, and potentially redefining the roles within Agile frameworks.\n\n#Agile #ArtificialIntelligence #SoftwareDevelopment #TeamDynamics #FutureOfWork\n\nCelebrating Failure: This article delves into the paradigm shift of viewing failures within organisations not just as tolerated mistakes, but as opportunities for growth, learning, and systemic improvement. It argues that a culture that openly celebrates failures can lead to increased innovation, transparency, and resilience, fostering an environment where risk-taking is seen in a positive light and failure is used as a powerful learning tool.\n\n#Leadership #Innovation #CultureOfLearning #Resilience #CelebratingFailure\n\nThe Arc Product-Market Fit Framework: This article discusses a framework to assist startups in understanding their product's position within the market. It outlines three archetypes: 'Hair on Fire,' 'Hard Fact,' and 'Future Vision,' each offering a unique perspective on product-market fit. Through examples and case studies, the article explains how startups can navigate their path to success by understanding customer-product dynamics, distinguishing themselves in competitive landscapes, and innovating for the future. It emphasises the fluidity of product-market fit and how companies can transition between these paths over time, using companies like Apple as an example.\n\n#ProductMarketFit #Startups #Innovation #SequoiaCapital #Technology\n\nA Sketch of the Biggest Idea in Software Architecture: The article elaborates on the concept of 'narrow waists' in software architecture, highlighting its significance across various areas like networking, operating systems, and language design. It contrasts two styles of building software: one focused on fine-grained static types and build-time composition, and the other on coarse-grained 'waists' and runtime composition. The post delves into the benefits of the second style, which becomes more evident at larger scales and over longer time horizons, suggesting it encourages global economy, flexibility, generality, and extension at the cost of local convenience.\n\n#SoftwareArchitecture #Programming #TechnologyTrends #OpenSource #TechInnovation\n\nAvoid blundering: 80% of a winning strategy: Jason Cohen explores the paradoxical idea that not making mistakes - or blundering - is a significant part of achieving success, especially in chess and start-ups. The article delves into the concept that avoiding common pitfalls can often lead to victory, emphasizing the importance of knowing what not to do. Cohen uses chess as a metaphor to illustrate how avoiding blunders is crucial for success, and applies this lesson to startups, advising founders to focus on avoiding major mistakes to increase their chances of thriving.\n\n#Startups #Strategy #Success #Chess #AvoidingMistakes\n\nFor God's sake follow the Lean Startup Method: This article critiques the \"Lean Startup\" method, emphasizing that while the concept is widely embraced, it may not be fully understood or correctly implemented by many entrepreneurs. It argues that the iterative approach and customer feedback strategies often lead to incremental rather than revolutionary improvements.\n\n#LeanStartup #Innovation #Entrepreneurship #BusinessGrowth #StartupTips\n\nThe Last Re-Org You'll Ever Do: This article explores modern approaches to organisational design, focusing on adaptive and evolutionary models over traditional hierarchical structures. It discusses the concept of antifragile organisations that thrive on change and delves into three specific frameworks: Holacracy, Agile Squads, and Self Organising. By examining companies like Valve, Spotify, and Medium, the piece illustrates how these models distribute authority and foster an environment of continuous evolution, aiming for organisations that are more responsive to technological advancements and employee autonomy.\n\n#OrganizationalDesign #Holacracy #Agile #SelfOrganizing #FutureOfWork\n\nGenAI Copilots Exacerbate Problems: The article discusses the impact of Generative AI and how it can exacerbate problems for companies not prepared to integrate it effectively. It contrasts this technology's potential to speed up development processes with the challenges it poses, such as aggravating bottlenecks in systems not equipped to handle faster code generation. The distinction between companies that can leverage AI to minimise technical debt and those that cannot highlights the widening gap in industry performance. It also emphasises the importance of having a well-functioning software delivery system to truly benefit from Generative AI's capabilities.\n\n#GenerativeAI #TechDebt #SoftwareDelivery #DevOps #IndustryGap\n\nTBM 271: The Biggest Untapped Opportunity: The article identifies 'skilled pragmatists' as the most significant untapped resource within companies, larger in number and potential than low performers or high achievers. Such employees, capable and practical, remain underutilised due to their aversion to office politics and visibility, focusing instead on productivity within existing systems. The piece critiques the conventional corporate approach to engagement and problem-solving, urging a reevaluation of how companies perceive and utilise this quiet majority.\n\n#EmployeeEngagement #SkilledPragmatists #CorporateCulture #TalentManagement #UntappedPotential\n\nRegards,\nM@\n\n[ED: If you'd like to sign up for this content as an email, click here to join the mailing list.]\n\nOriginally published on quantumfaxmachine.com."
  },
  "article_8f376ee6a406": {
    "timestamp": 1746588577.259093,
    "data": {
      "id": "8f376ee6a406",
      "title": "Different Styles of Engineering Leadership",
      "subtitle": "Micromanagement, Center-out Leadership, Psychological Safety Leadership, and others",
      "author": "c6584fe2de9d",
      "publication_id": "de90c1659654",
      "published_at": "2024-04-24 15:50:23",
      "last_modified_at": "2024-04-24 15:50:23",
      "boosted_at": "",
      "tags": [
        "leading-engineers",
        "engineering-management",
        "leadership",
        "management",
        "startup"
      ],
      "topics": [
        "leadership",
        "work",
        "programming"
      ],
      "claps": 794,
      "voters": 259,
      "word_count": 2114,
      "responses_count": 14,
      "reading_time": 8.81069182389937,
      "url": "https://blog.practicalengineering.management/different-styles-of-engineering-leadership-8f376ee6a406",
      "unique_slug": "different-styles-of-engineering-leadership-8f376ee6a406",
      "image_url": "https://miro.medium.com/1*FpnONEuTSDwG-aNoSMdV6w.png",
      "lang": "en",
      "is_series": false,
      "is_locked": false,
      "is_shortform": false,
      "top_highlight": "As an engineering leader, you set expectations (such as technical standards, non-functional requirements, product acceptance criteria, hypotheses, principles and guidelines). But then you invite the team to provide their input and collaboratively work on the problems ahead - you set WHAT, and they decide on HOW.",
      "content": "Different Styles of Engineering Leadership\n\nMicromanagement, Center-out Leadership, Psychological Safety Leadership, and others\n\nThe beauty of software engineering comes from the many different ways of solving challenges ahead of us. Our work can be like receiving an unlimited set of LEGO bricks without instructions, just an end goal to achieve. We can be builders, architects, designers, or inventors.\n\nAnd then we become managers. We set expectations, make decisions, motivate people, and ensure execution\u2014classic, boring managerial work. But that's not entirely true. As engineering leaders, we can also bring some creativity to our work, e.g., through mixing different styles of managing people.\n\nIn today's article, we will explore some of them, i.e.:\n\nMicromanagement\n\nCenter-out Leadership\n\nTop-down Leadership\n\nTransactional Leadership\n\nDevelopmental Leadership\n\nTransformational Leadership\n\nPsychological Safety Leadership (based on physiopsychological research and the Polyvagal Theory)\n\nI hope these insights will help you build your unique style for engineering leadership!\n\nMicromanagement\n\nOkay, firstly, let's face this one since micromanagement is also a style. It exists because not all organizations provide the necessary support to their fresh leaders. Because of that, micromanagement is quite common - also in companies that are seen as successful.\n\nHere are a few characteristics of it:\n\nConstant Supervision: monitoring every aspect of a teammate's work and requiring frequent status updates.\n\nLack of Delegation: not delegating tasks or responsibilities, preferring to do things themselves.\n\nExcessive Control: dictating exactly how tasks should be done, even when the employee has the skills to handle them independently.\n\nFrequent Corrections: lack of trust in the employee's abilities and constant correction of the employee's work.\n\nSometimes it's hard to blame micromanagers - esp. the ones who were the most senior engineers in a team (or the organization's old guards). They already \"saw things\", have deep domain knowledge, and remember every single hack they implemented during their journey. However, we must remember that this style of leadership reduces the autonomy of others and lowers the sense of ownership, which can be destructive for engineering teams.\n\nCenter-out Leadership\n\nLast year, significant news emerged about the rebound of Barnes & Noble, a bookstore chain previously on a straight path to liquidation. 2023 marked the first year in recent memory when this company expanded rather than contracted.\n\nThis success was primarily attributed to their CEO, James Daunt, who implemented a strategy that involved:\n\nGranting autonomy to local managers to make more decisions about their stores (such as which books to stock, ensuring the selection is relevant to their customers),\n\nReducing the non-book offerings in stores, which also decreased the cognitive load on managers.\n\nJames Daunt's actions were a classic example of a transformation from top-down leadership to center-out leadership.\n\nIn a center-out leadership, decision rights are distributed within some set of boundaries. This means teams and individuals have the autonomy to make decisions within their areas of expertise, but a framework is still in place to ensure alignment with overall goals and ways of working.\n\nAs an engineering leader, you set expectations (such as technical standards, non-functional requirements, product acceptance criteria, hypotheses, principles and guidelines). But then you invite the team to provide their input and collaboratively work on the problems ahead - you set WHAT, and they decide on HOW.\n\nFor you, as an engineering leader, the center-out approach opens new ways of working with your team and product stakeholders. By reducing your cognitive load required to always be on top of everything, you can shift your attention to:\n\nBuilding your understanding of the product context,\n\nGrowing and empowering your people,\n\nManaging the strategic direction of the technology you oversee.\n\nThe center-out approach is not without its costs and risks. The biggest challenges include:\n\nComplex Decision-Making: Without effective facilitation, discussions may drag on for months without reaching a consensus.\n\nPotential for Chaos and Misalignment: Center-out leadership requires clear boundaries and effective collaboration.\n\nNeed for Strong Leadership Skills: In addition to technical expertise, leaders must also develop skills in coaching, facilitating, and empowering their teams effectively.\n\nTop-down Leadership\n\nSometimes, the environment doesn't allow us to go immediately into a center-out approach. These scenarios include:\n\nBootstrapping the team, ways of working, and common standards,\n\nTaking the lead during a crisis,\n\nMinimizing variance when we expect exact results (e.g., financial reports).\n\nIn such cases, a more classic, top-down approach to leadership can be a better fit.\n\nIn a top-down approach, management retains data and decision-making authority. The leader develops or selects the best solutions, and their direct reports are expected to execute these directives. This approach can often be observed at the organizational level, where senior management makes strategic decisions without lower-level consultation and expects teams to implement the decisions made.\n\nThough often viewed as micromanagement, the top-down approach has its strengths. It brings:\n\nEfficiency: Decisions can be made swiftly without needing consensus from multiple stakeholders.\n\nClarity: Clear directives and expectations can simplify roles and responsibilities.\n\nControl: Managers can enforce policies and standards effectively.\n\nBut the main costs and risks are:\n\nLack of employee engagement,\n\nRisk of misalignment,\n\nLeader's cognitive overload\n\nTo read more about the differences between Center-out and Top-down Leadership styles, check the Practical Engineering Management article: Top-down Leadership vs. Center-out Leadership.\n\nTransactional Leadership\n\nTransactional leadership is a traditional top-down approach focused on rewards and punishments, which are supposed to optimize job performance. In this style, leaders pay attention to constraints, mostly around limited resources (time and workforce).\n\nA transactional leader constantly analyzes cost-benefits and weighs competing needs. They continuously \"allocate resources,\" trying to find the most optimal configuration of the team, its priorities while minimizing waste and idle time.\n\nFor transactional leaders usually, there are too few people and too many initiatives to handle. In that case, the best a transactional leader can do is to:\n\nRecruit more people or better people,\n\nImprove the current team's allocation based on perceived outcomes (better productivity, profitability, returns, etc.).\n\nBut the reality is much more complex. In the dynamic systems we operate, we cannot accurately forecast the time needed to complete the work as a whole, nor can we get precise information from each of our teammates about the time they need to finish their piece.\n\nIt has been proven that finding the most optimal scheduling solution for complex systems is impossible - \"job-shop scheduling\" is an NP-hard problem, meaning that for some scheduling problems, we won't find a solution in finite time.\n\nAlso, hiring more people isn't always a good solution. As Price's Law states, the square root of the total number of people in a domain does half of the work. For example, if you have an engineering team with 100 people, Price's Law suggests that 10 people (the square root of 100) will produce 50% of the results. Hiring more also brings more complexity and challenges - even more scheduling, more priorities to handle, and more relationships to maintain.\n\nEach of us occasionally plays transactional leader\u2014we optimize allocation, hire more people, and try to improve productivity. But it's worth remembering that we can do more than just play \"optimization chess \"with \"available resources.\"\n\nDevelopmental Leadership\n\nWhile transactional leadership focuses on acquiring more resources, developmental leadership, before asking for more hires, considers how to grow the current team's creativity and problem-solving capabilities so potential new team members won't operate in the same fashion.\n\nTo be a developmental leader, you can't just be inspirational and motivational. Your job is to constantly improve the environment so your team can do great work.\n\nIt's not only about investing in people's growth, as the word \"developmental\" might suggest. Apart from that, you must also focus on improving the conditions under which work is executed.\n\nAn extensive source of knowledge here can be the book \"Wiring Winning Organizations\", which introduces three core aspects of transforming an organization:\n\nSlowification - making the problem-solving process easier.\n\nSimplification - making the problems themselves easier.\n\nAmplification - calling out occurring problems loud and clear.\n\nDevelopmental leadership is about looking beyond the day-to-day and investing in your team's future. This style encourages us to create an environment where everyone feels empowered to solve problems and innovate.\n\nFor more, you can read my article on Practical Engineering Management, where I explore the differences between transactional and developmental leadership and provide some practical examples for implementing them in our work.\n\nRead it here: Developmental Leadership vs. Transactional Leadership\n\nTransformational Leadership\n\nActually, transformational leadership isn't a different style but rather a synonym for developmental leadership, as described earlier. Yet I put it here because of certain management style aspects connected to this particular term.\n\nTransformational leaders focus on improving software delivery performance by enhancing the team's technical and product management capabilities rather than driving outcomes directly (top-down or transactional leadership).\n\nDORA studied the role of Transformational Leadership and proved that it is highly correlated with SDLC and Organizational performance. According to the research, there are five specific characteristics of this approach:\n\nVisionary,\n\ninspirational communication,\n\nintellectual stimulation,\n\nsupportive leadership,\n\npersonal recognition.\n\nThe leaders of the most high-performing companies usually presented strong behaviors across each of them.\n\nTo read more, check DORA's explanation of Transformational Leadership: https://dora.dev/devops-capabilities/cultural/transformational-leadership/\n\nIf you want to be an influential and successful leader, I recommend self-assessing these five transformational leadership characteristics each week. If you are looking for a more structured framework that can help you with that, check the Practical Engineering Management's Leader's Week.\n\nPsychological Safety Leadership\n\nThe list of leadership styles wouldn't be complete without some materials that come directly from the study of human behavior - psychology.\n\nMany of us have heard about Google's research, which says that psychological safety is a critical factor in high-performing teams.\n\n\"In a team with high psychological safety, teammates feel safe to take risks around their team members. They feel confident that no one on the team will embarrass or punish anyone else for admitting a mistake, asking a question, or offering a new idea.\"\n\nTo explore the subject deeper, we shared some insights on Practical Engineering Management, from the latest physiopsychological research and the Polyvagal Theory.\n\nPolyvagal Theory (PVT), developed by American psychologist and neuroscientist Stephen Porges, suggests that our autonomic state acts as a mediator, guiding us from vulnerability in threatening situations to accessibility in supportive environments, aided by safety cues and appropriate social support.\n\nIn simpler terms, neuroception engages the resources of the Autonomous Nervous System (ANS) and regulatory systems based on the presence or absence of safety. It serves as our internal \"safety radar,\" operating subconsciously to continually assess our environment through:\n\nInternal Check (Inside): Am I safe? Do I have what I need?\n\nInterpersonal Check (Between): Am I safe? Am I seen, liked, understood, supported?\n\nEnvironmental Check (Outside): Am I safe here? Do I belong here?\n\nSafety is not just a concept but an embodied state, fundamental to regulation. Based on PVT, there are six basic strategies to make you and your team feel well, safe, and productive:\n\nClarity: Clear communication about job responsibilities, salary, benefits, and promotion criteria.\n\nPredictability: A leader should be predictable in their demeanor - consistent, stable, and attentive - making it clear what others can expect from them.\n\nBelonging: Nurturing a sense of belonging within the team enhances work atmosphere and effectiveness.\n\nFlexibility and Sensitivity: Support employees through personal hardships, reinforcing safety and stability rather than conditional support.\n\nCo-regulation: Effective teams are characterized by ongoing relationships based on mutual regulation and trust.\n\nA Sensory-Friendly Environment: Reducing sensory overload helps facilitate deep work. Leaders should strive to minimize unnecessary distractions in the work environment.\n\nCheck the latest article on Practical Engineering Management: Safety Leadership and Neuroception - How the Polyvagal Theory Enhance Workplace Safety, Engagement, and Performance.\n\nEnd words\n\nEffective engineering leadership embraces a variety of styles, each with its own set of advantages and challenges. The best leaders blend these styles, continuously evaluating and adapting their approach to foster a culture of growth, collaboration, and high performance.\n\nAs you navigate your leadership journey, remain flexible and responsive to the evolving dynamics of your team.\n\nYou can also explore more content for engineering managers on practicalengineering.management. You will find there practical strategies for effective engineering leadership.\n\nJoin the community of impactful leaders to bridge the gap between inspiration and implementation with actionable steps that empower your team, boost trust, and drive real-world results.\n\nIf you would like to discuss any of your challenges, don't hesitate to reach out to me at mirek@practicalengineering.management."
    }
  },
  "content_8f376ee6a406": {
    "timestamp": 1746588577.84946,
    "data": "Different Styles of Engineering Leadership\n\nMicromanagement, Center-out Leadership, Psychological Safety Leadership, and others\n\nThe beauty of software engineering comes from the many different ways of solving challenges ahead of us. Our work can be like receiving an unlimited set of LEGO bricks without instructions, just an end goal to achieve. We can be builders, architects, designers, or inventors.\n\nAnd then we become managers. We set expectations, make decisions, motivate people, and ensure execution\u2014classic, boring managerial work. But that's not entirely true. As engineering leaders, we can also bring some creativity to our work, e.g., through mixing different styles of managing people.\n\nIn today's article, we will explore some of them, i.e.:\n\nMicromanagement\n\nCenter-out Leadership\n\nTop-down Leadership\n\nTransactional Leadership\n\nDevelopmental Leadership\n\nTransformational Leadership\n\nPsychological Safety Leadership (based on physiopsychological research and the Polyvagal Theory)\n\nI hope these insights will help you build your unique style for engineering leadership!\n\nMicromanagement\n\nOkay, firstly, let's face this one since micromanagement is also a style. It exists because not all organizations provide the necessary support to their fresh leaders. Because of that, micromanagement is quite common - also in companies that are seen as successful.\n\nHere are a few characteristics of it:\n\nConstant Supervision: monitoring every aspect of a teammate's work and requiring frequent status updates.\n\nLack of Delegation: not delegating tasks or responsibilities, preferring to do things themselves.\n\nExcessive Control: dictating exactly how tasks should be done, even when the employee has the skills to handle them independently.\n\nFrequent Corrections: lack of trust in the employee's abilities and constant correction of the employee's work.\n\nSometimes it's hard to blame micromanagers - esp. the ones who were the most senior engineers in a team (or the organization's old guards). They already \"saw things\", have deep domain knowledge, and remember every single hack they implemented during their journey. However, we must remember that this style of leadership reduces the autonomy of others and lowers the sense of ownership, which can be destructive for engineering teams.\n\nCenter-out Leadership\n\nLast year, significant news emerged about the rebound of Barnes & Noble, a bookstore chain previously on a straight path to liquidation. 2023 marked the first year in recent memory when this company expanded rather than contracted.\n\nThis success was primarily attributed to their CEO, James Daunt, who implemented a strategy that involved:\n\nGranting autonomy to local managers to make more decisions about their stores (such as which books to stock, ensuring the selection is relevant to their customers),\n\nReducing the non-book offerings in stores, which also decreased the cognitive load on managers.\n\nJames Daunt's actions were a classic example of a transformation from top-down leadership to center-out leadership.\n\nIn a center-out leadership, decision rights are distributed within some set of boundaries. This means teams and individuals have the autonomy to make decisions within their areas of expertise, but a framework is still in place to ensure alignment with overall goals and ways of working.\n\nAs an engineering leader, you set expectations (such as technical standards, non-functional requirements, product acceptance criteria, hypotheses, principles and guidelines). But then you invite the team to provide their input and collaboratively work on the problems ahead - you set WHAT, and they decide on HOW.\n\nFor you, as an engineering leader, the center-out approach opens new ways of working with your team and product stakeholders. By reducing your cognitive load required to always be on top of everything, you can shift your attention to:\n\nBuilding your understanding of the product context,\n\nGrowing and empowering your people,\n\nManaging the strategic direction of the technology you oversee.\n\nThe center-out approach is not without its costs and risks. The biggest challenges include:\n\nComplex Decision-Making: Without effective facilitation, discussions may drag on for months without reaching a consensus.\n\nPotential for Chaos and Misalignment: Center-out leadership requires clear boundaries and effective collaboration.\n\nNeed for Strong Leadership Skills: In addition to technical expertise, leaders must also develop skills in coaching, facilitating, and empowering their teams effectively.\n\nTop-down Leadership\n\nSometimes, the environment doesn't allow us to go immediately into a center-out approach. These scenarios include:\n\nBootstrapping the team, ways of working, and common standards,\n\nTaking the lead during a crisis,\n\nMinimizing variance when we expect exact results (e.g., financial reports).\n\nIn such cases, a more classic, top-down approach to leadership can be a better fit.\n\nIn a top-down approach, management retains data and decision-making authority. The leader develops or selects the best solutions, and their direct reports are expected to execute these directives. This approach can often be observed at the organizational level, where senior management makes strategic decisions without lower-level consultation and expects teams to implement the decisions made.\n\nThough often viewed as micromanagement, the top-down approach has its strengths. It brings:\n\nEfficiency: Decisions can be made swiftly without needing consensus from multiple stakeholders.\n\nClarity: Clear directives and expectations can simplify roles and responsibilities.\n\nControl: Managers can enforce policies and standards effectively.\n\nBut the main costs and risks are:\n\nLack of employee engagement,\n\nRisk of misalignment,\n\nLeader's cognitive overload\n\nTo read more about the differences between Center-out and Top-down Leadership styles, check the Practical Engineering Management article: Top-down Leadership vs. Center-out Leadership.\n\nTransactional Leadership\n\nTransactional leadership is a traditional top-down approach focused on rewards and punishments, which are supposed to optimize job performance. In this style, leaders pay attention to constraints, mostly around limited resources (time and workforce).\n\nA transactional leader constantly analyzes cost-benefits and weighs competing needs. They continuously \"allocate resources,\" trying to find the most optimal configuration of the team, its priorities while minimizing waste and idle time.\n\nFor transactional leaders usually, there are too few people and too many initiatives to handle. In that case, the best a transactional leader can do is to:\n\nRecruit more people or better people,\n\nImprove the current team's allocation based on perceived outcomes (better productivity, profitability, returns, etc.).\n\nBut the reality is much more complex. In the dynamic systems we operate, we cannot accurately forecast the time needed to complete the work as a whole, nor can we get precise information from each of our teammates about the time they need to finish their piece.\n\nIt has been proven that finding the most optimal scheduling solution for complex systems is impossible - \"job-shop scheduling\" is an NP-hard problem, meaning that for some scheduling problems, we won't find a solution in finite time.\n\nAlso, hiring more people isn't always a good solution. As Price's Law states, the square root of the total number of people in a domain does half of the work. For example, if you have an engineering team with 100 people, Price's Law suggests that 10 people (the square root of 100) will produce 50% of the results. Hiring more also brings more complexity and challenges - even more scheduling, more priorities to handle, and more relationships to maintain.\n\nEach of us occasionally plays transactional leader\u2014we optimize allocation, hire more people, and try to improve productivity. But it's worth remembering that we can do more than just play \"optimization chess \"with \"available resources.\"\n\nDevelopmental Leadership\n\nWhile transactional leadership focuses on acquiring more resources, developmental leadership, before asking for more hires, considers how to grow the current team's creativity and problem-solving capabilities so potential new team members won't operate in the same fashion.\n\nTo be a developmental leader, you can't just be inspirational and motivational. Your job is to constantly improve the environment so your team can do great work.\n\nIt's not only about investing in people's growth, as the word \"developmental\" might suggest. Apart from that, you must also focus on improving the conditions under which work is executed.\n\nAn extensive source of knowledge here can be the book \"Wiring Winning Organizations\", which introduces three core aspects of transforming an organization:\n\nSlowification - making the problem-solving process easier.\n\nSimplification - making the problems themselves easier.\n\nAmplification - calling out occurring problems loud and clear.\n\nDevelopmental leadership is about looking beyond the day-to-day and investing in your team's future. This style encourages us to create an environment where everyone feels empowered to solve problems and innovate.\n\nFor more, you can read my article on Practical Engineering Management, where I explore the differences between transactional and developmental leadership and provide some practical examples for implementing them in our work.\n\nRead it here: Developmental Leadership vs. Transactional Leadership\n\nTransformational Leadership\n\nActually, transformational leadership isn't a different style but rather a synonym for developmental leadership, as described earlier. Yet I put it here because of certain management style aspects connected to this particular term.\n\nTransformational leaders focus on improving software delivery performance by enhancing the team's technical and product management capabilities rather than driving outcomes directly (top-down or transactional leadership).\n\nDORA studied the role of Transformational Leadership and proved that it is highly correlated with SDLC and Organizational performance. According to the research, there are five specific characteristics of this approach:\n\nVisionary,\n\ninspirational communication,\n\nintellectual stimulation,\n\nsupportive leadership,\n\npersonal recognition.\n\nThe leaders of the most high-performing companies usually presented strong behaviors across each of them.\n\nTo read more, check DORA's explanation of Transformational Leadership: https://dora.dev/devops-capabilities/cultural/transformational-leadership/\n\nIf you want to be an influential and successful leader, I recommend self-assessing these five transformational leadership characteristics each week. If you are looking for a more structured framework that can help you with that, check the Practical Engineering Management's Leader's Week.\n\nPsychological Safety Leadership\n\nThe list of leadership styles wouldn't be complete without some materials that come directly from the study of human behavior - psychology.\n\nMany of us have heard about Google's research, which says that psychological safety is a critical factor in high-performing teams.\n\n\"In a team with high psychological safety, teammates feel safe to take risks around their team members. They feel confident that no one on the team will embarrass or punish anyone else for admitting a mistake, asking a question, or offering a new idea.\"\n\nTo explore the subject deeper, we shared some insights on Practical Engineering Management, from the latest physiopsychological research and the Polyvagal Theory.\n\nPolyvagal Theory (PVT), developed by American psychologist and neuroscientist Stephen Porges, suggests that our autonomic state acts as a mediator, guiding us from vulnerability in threatening situations to accessibility in supportive environments, aided by safety cues and appropriate social support.\n\nIn simpler terms, neuroception engages the resources of the Autonomous Nervous System (ANS) and regulatory systems based on the presence or absence of safety. It serves as our internal \"safety radar,\" operating subconsciously to continually assess our environment through:\n\nInternal Check (Inside): Am I safe? Do I have what I need?\n\nInterpersonal Check (Between): Am I safe? Am I seen, liked, understood, supported?\n\nEnvironmental Check (Outside): Am I safe here? Do I belong here?\n\nSafety is not just a concept but an embodied state, fundamental to regulation. Based on PVT, there are six basic strategies to make you and your team feel well, safe, and productive:\n\nClarity: Clear communication about job responsibilities, salary, benefits, and promotion criteria.\n\nPredictability: A leader should be predictable in their demeanor - consistent, stable, and attentive - making it clear what others can expect from them.\n\nBelonging: Nurturing a sense of belonging within the team enhances work atmosphere and effectiveness.\n\nFlexibility and Sensitivity: Support employees through personal hardships, reinforcing safety and stability rather than conditional support.\n\nCo-regulation: Effective teams are characterized by ongoing relationships based on mutual regulation and trust.\n\nA Sensory-Friendly Environment: Reducing sensory overload helps facilitate deep work. Leaders should strive to minimize unnecessary distractions in the work environment.\n\nCheck the latest article on Practical Engineering Management: Safety Leadership and Neuroception - How the Polyvagal Theory Enhance Workplace Safety, Engagement, and Performance.\n\nEnd words\n\nEffective engineering leadership embraces a variety of styles, each with its own set of advantages and challenges. The best leaders blend these styles, continuously evaluating and adapting their approach to foster a culture of growth, collaboration, and high performance.\n\nAs you navigate your leadership journey, remain flexible and responsive to the evolving dynamics of your team.\n\nYou can also explore more content for engineering managers on practicalengineering.management. You will find there practical strategies for effective engineering leadership.\n\nJoin the community of impactful leaders to bridge the gap between inspiration and implementation with actionable steps that empower your team, boost trust, and drive real-world results.\n\nIf you would like to discuss any of your challenges, don't hesitate to reach out to me at mirek@practicalengineering.management."
  },
  "article_5fdf30612950": {
    "timestamp": 1746588578.3676841,
    "data": {
      "id": "5fdf30612950",
      "title": "QFM011: Engineering Leadership Reading List March 2024",
      "subtitle": "Everything that I found interesting in March 2024 about engineering leadership",
      "author": "2d9370f7f6e1",
      "publication_id": "*Self-Published*",
      "published_at": "2024-04-13 14:02:11",
      "last_modified_at": "2024-05-08 13:51:54",
      "boosted_at": "",
      "tags": [
        "qfm-leadership",
        "quantum-fax-machine",
        "engineering",
        "leadership",
        "management"
      ],
      "topics": [
        "work",
        "startups"
      ],
      "claps": 0,
      "voters": 0,
      "word_count": 862,
      "responses_count": 0,
      "reading_time": 4.502830188679246,
      "url": "https://matthewsinclair.medium.com/qfm011-engineering-leadership-reading-list-march-2024-5fdf30612950",
      "unique_slug": "qfm011-engineering-leadership-reading-list-march-2024-5fdf30612950",
      "image_url": "https://miro.medium.com/1*0j9TfihVuUsPxaxTeIfSQw.jpeg",
      "lang": "en",
      "is_series": false,
      "is_locked": false,
      "is_shortform": false,
      "top_highlight": "",
      "content": "QFM011: Engineering Leadership Reading List March 2024\n\nEverything that I found interesting last month about engineering leadership\n\nQuantum Fax Machine\n\nIn the Quantum Fax Machine's March edition of Engineering Leadership Reading List we go from the basics of conducting effective meetings in Stop Wasting People's Time to the metaphorical discussion of power dynamics within teams in You're always carrying a cannon.\n\nA theme this month is the critical importance of pacing and transparency in startup environments, as underlined in The Most Important Skill in Startup Engineering Leadership, where the balance between team performance and well-being is key to sustaining growth without compromising on quality. This is complemented by a deep dive into the venture studio ecosystem through a series of articles from Focused Chaos, exploring the dynamics, strategies, and economics of venture studios with an emphasis on vertical specialisation and the ideal founder profile for venture studios.\n\nFor some controversy, we head over to Here's Why You Should Hand Over Product Prioritization to Engineering Managers, underscoring a pivotal shift towards leveraging frontline technical expertise for strategic innovation and exploring the degree to which the CTO and CPO roles are merging into one another.\n\nSketchplanations is a wonderful site that explains a broad range of topics through sketches and AI startups requiring new strategies, looks at the distinct challenges and strategic imperatives for startups in the AI revolution.\n\nWe finish up this month with a look at some interesting Gallup workplace statistics for 2022 that emphasise the significance of leadership in addressing employee engagement and well-being in modern work environments.\n\nAs always, the Quantum Fax Machine Propellor Hat Key will guide your browsing. Enjoy!\n\nSee the Slideshare version of the post below:\n\nStop Wasting People's Time - Tips for Preparing Great Meetings: This article provides a comprehensive guide on organising effective and efficient meetings, emphasising the importance of clear objectives, questioning the necessity of a meeting, crafting a detailed agenda, defining a concise duration, sharing the agenda in advance, inviting only essential participants, and ensuring follow-up on decisions made.\n\n#EffectiveMeetings #MeetingPreparation #TimeManagement #ProductiveMeetings #TeamCollaboration\n\nYou're always carrying a cannon: The article metaphorically discusses how managers always carry a \"cannon\" of power over their reports, emphasising the importance of being aware of this inherent authority and its impact on relationships and trust within a team. It highlights the crucial role of building trust to mitigate the intimidating presence of this power.\n\n#Management #Leadership #TeamBuilding #TrustInTeams #PowerDynamics\n\nThe Most Important Skill in Startup Engineering Leadership This article emphasises that pacing is the most crucial skill for leaders in startup engineering environments, essential for balancing team performance without compromising product quality or employee well-being. It advocates for honesty, transparency, and constant measurement to navigate the challenges and pressures of startup growth successfully.\n\n#StartupLeadership #EngineeringExcellence #TeamPacing #LeadershipSkills #StartupGrowth\n\nHere's a series of articles on the economics and business models of venture studios. The articles explore the dynamics, strategies, and economics behind venture studios, highlighting the importance of choosing the right studio and the trend towards vertical specialisation:\n\nHow To Pick the Right Venture Studio\n\nThe Many Flavors of Venture Studios\n\nThe Future of Venture Studios is Vertical\n\nThe Ideal Founder Profile for Venture Studios\n\nUnderstanding Venture Studio Math There is a lot of activity in the studio space right now, much of which seems to come from studios writing about how to set up a studio. \ud83e\udd37\u200d\u2642\ufe0f\n\n#VentureStudios #StartupEcosystem #Innovation #BusinessStrategy #Entrepreneurship\n\nHere's Why You Should Hand Over Product Prioritization to Engineering Managers: The article advocates for handing over product prioritisation to engineering managers, emphasising the benefits of utilising their frontline experience and product mindset for more efficient technical execution and team velocity. It highlights how this approach allows product managers to focus on strategic vision, optimises bandwidth dynamically, encourages constructive challenge, and promotes a culture of value alignment, leading to substantial growth and success.\n\n#EngineeringLeadership #ProductManagement #TeamVelocity #StrategicInnovation #TechCulture\n\nSketchplanations: This site explains a variety of interesting concepts through the medium of simple, easy to read and comprehend sketches. Great for 1-page explanations of otherwise complex or obscure topics.\n\n#SketchExplained #OpticalIllusions #PsychologyInsights #LearningThroughArt #CreativeEducation\n\nAI startups require new strategies: This time it's actually different: This article argues that AI startups face unique challenges not seen in previous tech revolutions, necessitating new strategies to succeed against well-funded incumbents with vast data, talent, and innovation capabilities. Unlike before, incumbents are quickly embracing AI, making traditional startup advantages less effective.\n\n#AIStartups #TechInnovation #DataStrategy #StartupChallenges #DisruptionTheory\n\nEssential Gallup Workplace Statistics To Help You Thrive As A Leader In 2022: This article discusses key Gallup workplace statistics for 2022, highlighting the importance of addressing employee burnout, disengagement, and the need for effective leadership in remote and hybrid work environments. It emphasises regular one-on-one meetings, flexible work arrangements, and fostering employee growth to improve engagement and well-being.\n\n#GallupWorkplace2022 #EmployeeEngagement #Leadership #RemoteWork #WorkplaceWellbeing\n\nRegards,\nM@\n\n[ED: If you'd like to sign up for this content as an email, click here to join the mailing list.]\n\nOriginally published on quantumfaxmachine.com."
    }
  },
  "content_5fdf30612950": {
    "timestamp": 1746588578.805969,
    "data": "QFM011: Engineering Leadership Reading List March 2024\n\nEverything that I found interesting last month about engineering leadership\n\nQuantum Fax Machine\n\nIn the Quantum Fax Machine's March edition of Engineering Leadership Reading List we go from the basics of conducting effective meetings in Stop Wasting People's Time to the metaphorical discussion of power dynamics within teams in You're always carrying a cannon.\n\nA theme this month is the critical importance of pacing and transparency in startup environments, as underlined in The Most Important Skill in Startup Engineering Leadership, where the balance between team performance and well-being is key to sustaining growth without compromising on quality. This is complemented by a deep dive into the venture studio ecosystem through a series of articles from Focused Chaos, exploring the dynamics, strategies, and economics of venture studios with an emphasis on vertical specialisation and the ideal founder profile for venture studios.\n\nFor some controversy, we head over to Here's Why You Should Hand Over Product Prioritization to Engineering Managers, underscoring a pivotal shift towards leveraging frontline technical expertise for strategic innovation and exploring the degree to which the CTO and CPO roles are merging into one another.\n\nSketchplanations is a wonderful site that explains a broad range of topics through sketches and AI startups requiring new strategies, looks at the distinct challenges and strategic imperatives for startups in the AI revolution.\n\nWe finish up this month with a look at some interesting Gallup workplace statistics for 2022 that emphasise the significance of leadership in addressing employee engagement and well-being in modern work environments.\n\nAs always, the Quantum Fax Machine Propellor Hat Key will guide your browsing. Enjoy!\n\nSee the Slideshare version of the post below:\n\nStop Wasting People's Time - Tips for Preparing Great Meetings: This article provides a comprehensive guide on organising effective and efficient meetings, emphasising the importance of clear objectives, questioning the necessity of a meeting, crafting a detailed agenda, defining a concise duration, sharing the agenda in advance, inviting only essential participants, and ensuring follow-up on decisions made.\n\n#EffectiveMeetings #MeetingPreparation #TimeManagement #ProductiveMeetings #TeamCollaboration\n\nYou're always carrying a cannon: The article metaphorically discusses how managers always carry a \"cannon\" of power over their reports, emphasising the importance of being aware of this inherent authority and its impact on relationships and trust within a team. It highlights the crucial role of building trust to mitigate the intimidating presence of this power.\n\n#Management #Leadership #TeamBuilding #TrustInTeams #PowerDynamics\n\nThe Most Important Skill in Startup Engineering Leadership This article emphasises that pacing is the most crucial skill for leaders in startup engineering environments, essential for balancing team performance without compromising product quality or employee well-being. It advocates for honesty, transparency, and constant measurement to navigate the challenges and pressures of startup growth successfully.\n\n#StartupLeadership #EngineeringExcellence #TeamPacing #LeadershipSkills #StartupGrowth\n\nHere's a series of articles on the economics and business models of venture studios. The articles explore the dynamics, strategies, and economics behind venture studios, highlighting the importance of choosing the right studio and the trend towards vertical specialisation:\n\nHow To Pick the Right Venture Studio\n\nThe Many Flavors of Venture Studios\n\nThe Future of Venture Studios is Vertical\n\nThe Ideal Founder Profile for Venture Studios\n\nUnderstanding Venture Studio Math There is a lot of activity in the studio space right now, much of which seems to come from studios writing about how to set up a studio. \ud83e\udd37\u200d\u2642\ufe0f\n\n#VentureStudios #StartupEcosystem #Innovation #BusinessStrategy #Entrepreneurship\n\nHere's Why You Should Hand Over Product Prioritization to Engineering Managers: The article advocates for handing over product prioritisation to engineering managers, emphasising the benefits of utilising their frontline experience and product mindset for more efficient technical execution and team velocity. It highlights how this approach allows product managers to focus on strategic vision, optimises bandwidth dynamically, encourages constructive challenge, and promotes a culture of value alignment, leading to substantial growth and success.\n\n#EngineeringLeadership #ProductManagement #TeamVelocity #StrategicInnovation #TechCulture\n\nSketchplanations: This site explains a variety of interesting concepts through the medium of simple, easy to read and comprehend sketches. Great for 1-page explanations of otherwise complex or obscure topics.\n\n#SketchExplained #OpticalIllusions #PsychologyInsights #LearningThroughArt #CreativeEducation\n\nAI startups require new strategies: This time it's actually different: This article argues that AI startups face unique challenges not seen in previous tech revolutions, necessitating new strategies to succeed against well-funded incumbents with vast data, talent, and innovation capabilities. Unlike before, incumbents are quickly embracing AI, making traditional startup advantages less effective.\n\n#AIStartups #TechInnovation #DataStrategy #StartupChallenges #DisruptionTheory\n\nEssential Gallup Workplace Statistics To Help You Thrive As A Leader In 2022: This article discusses key Gallup workplace statistics for 2022, highlighting the importance of addressing employee burnout, disengagement, and the need for effective leadership in remote and hybrid work environments. It emphasises regular one-on-one meetings, flexible work arrangements, and fostering employee growth to improve engagement and well-being.\n\n#GallupWorkplace2022 #EmployeeEngagement #Leadership #RemoteWork #WorkplaceWellbeing\n\nRegards,\nM@\n\n[ED: If you'd like to sign up for this content as an email, click here to join the mailing list.]\n\nOriginally published on quantumfaxmachine.com."
  },
  "article_51743991816e": {
    "timestamp": 1746588579.3102112,
    "data": {
      "id": "51743991816e",
      "title": "QFM007: Engineering Leadership Reading List February 2024",
      "subtitle": "Everything that I found interesting last month about engineering leadership",
      "author": "2d9370f7f6e1",
      "publication_id": "*Self-Published*",
      "published_at": "2024-03-04 15:02:14",
      "last_modified_at": "2024-04-11 10:39:04",
      "boosted_at": "",
      "tags": [
        "qfm-leadership",
        "quantum-fax-machine",
        "engineering",
        "leadership",
        "management"
      ],
      "topics": [
        "work",
        "programming"
      ],
      "claps": 5,
      "voters": 4,
      "word_count": 1061,
      "responses_count": 0,
      "reading_time": 5.503773584905661,
      "url": "https://matthewsinclair.medium.com/qfm007-engineering-leadership-reading-list-february-2024-51743991816e",
      "unique_slug": "qfm007-engineering-leadership-reading-list-february-2024-51743991816e",
      "image_url": "https://miro.medium.com/1*nSc2fDlc27DVTEFeZHRCeg.jpeg",
      "lang": "en",
      "is_series": false,
      "is_locked": false,
      "is_shortform": false,
      "top_highlight": ""
    }
  },
  "content_51743991816e": {
    "timestamp": 1746588579.746336,
    "data": "QFM007: Engineering Leadership Reading List February 2024\n\nEverything that I found interesting last month about engineering leadership\n\nQuantum Fax Machine\n\nThis month's list draws out the recurring theme of the pivotal role of effective communication, trust-building, and leadership behaviour in fostering a productive and innovative engineering culture.\n\nArticles like The Secret to a Great Planning Process - Lessons from Airbnb and Eventbrite and Top Managers Are Abandoning RACI for Impact Delegation highlight innovative frameworks and approaches to planning and delegation that prioritise clarity, collaboration, and empowerment. Continuing the theme of progressing through engineering ranks we have a list of falsehoods that junior developers believe about becoming senior. Contrast this with a perspective from the other side of the table as a new manager looks back on what changes in the step up from individual contributor. Followed up with with 5 Pieces of Advice for Junior Software Engineers Starting their First Job. Finally, if you want to get the vocabulary of management then the DIY MBA: My Reading List is a good, if somewhat selectively edited, place to start.\n\nSee the Slideshare version of the post below:\n\nOr read on:\n\nKey Drivers for Engineering Experience and Performance: This article discusses key factors that drive engineering experience and performance, highlighting the importance of psychological safety, trust, short feedback loops, and reducing cognitive load to enhance productivity and creativity in engineering teams. #Engineering #Productivity #Teamwork #Innovation #DeveloperExperience\n\nThe Secret to a Great Planning Process - Lessons from Airbnb and Eventbrite: This article outlines a structured planning process called the \"W Framework,\" developed from the authors' experiences at Airbnb and Eventbrite, focusing on clear roles and collaboration across leadership and teams to create effective, cohesive plans. It emphasises the importance of providing context, integrating plans, and ensuring buy-in to avoid common pitfalls in planning. #PlanningSuccess #TeamCollaboration #StrategicPlanning #Leadership #WFramework\n\nFalsehoods Junior Developers believe about becoming Senior: This article debunks common myths junior developers have about becoming senior, revealing that seniority involves embracing complex responsibilities, continuous learning, and dealing with legacy systems, rather than just working with the latest technologies or having more leisure time. It emphasises the importance of problem-solving, communication, and adaptability in the tech industry. #SeniorDeveloper #TechCareer #ContinuousLearning #LegacySystems #DeveloperMyths\n\nThe One Key To Building And Keeping A Great Company Culture: This article emphasises that the essence of a great company culture is not found in perks like free lunches or retreats, but rather in self-reflection and leadership behaviour that fosters a positive, productive environment. Leaders set the cultural tone, making it crucial for them to embody the values and behaviours they wish to see in their team. _[ED: I'm not sure that there is ever just \"one thing\" when it comes to topics like culture] #CompanyCulture #Leadership #SelfReflection #TeamDynamics #WorkplaceValues\n\nFrom engineer to manager: what I love, what I hate: The article shares the author's personal journey and reflections on transitioning from an individual contributor in engineering to a managerial role, highlighting the increased impact, career opportunities, and challenges faced in management, alongside the struggle with corporate dynamics and social issues within teams. #CareerGrowth #Leadership #EngineeringManagement #WorkplaceChallenges #TeamDynamics\n\nUnlocking the Potential of One\u2011on\u2011One Discussions This article emphasises the importance of 1\u20131 meetings for building trust, providing clarity and direction, supporting execution, and fostering personal development in a managerial context. It outlines a structured approach to making 1\u20131 discussions meaningful and impactful for both managers and their reports. #OneOnOneMeetings #LeadershipDevelopment #ManagerTips #EmployeeGrowth #ProfessionalDevelopment\n\nThe Update, The Vent, and The Disaster: This article emphasises the importance of conducting effective one-on-one meetings to manage and support employees effectively. It categorises these meetings into three types: The Update, The Vent, and The Disaster, offering strategies for handling each scenario to ensure communication remains productive and employees feel valued. #Management #Leadership #EmployeeEngagement #OneOnOneMeetings #WorkplaceCulture\n\nSeparating \"best practice\" from baggage: The article discusses the challenge of distinguishing between valuable \"best practices\" and less useful \"baggage\" when transitioning to new roles or environments. He emphasises the importance of adopting practices that genuinely contribute to team and project success while being cautious of those that may not fit well in a new context. #BestPractices #Leadership #TeamDevelopment #Innovation #CareerGrowth\n\nTop Managers Are Abandoning RACI for Impact Delegation: This article discusses the shift from RACI, a traditional framework for defining roles and responsibilities, to Impact Delegation, which focuses on empowering team members with clear ownership and autonomy to achieve goals efficiently and flexibly. #RACI #ImpactDelegation #Leadership #TeamManagement #Productivity\n\n5 Pieces of Advice for Junior Software Engineers Starting their First Job: This article provides crucial advice for junior software engineers starting their first job, including the importance of showing eagerness to learn, setting personal boundaries, avoiding negative influences, learning through struggle, and ensuring clear expectations for success. These guidelines aim to help newcomers navigate their early careers with confidence and a constructive mindset. #SoftwareEngineering #CareerAdvice #JuniorDevTips #TechMentorship #ProfessionalGrowth\n\nHow to get good at giving feedback: This article emphasises the importance of debunking common myths about feedback and outlines a four-step process to improve feedback skills: asking for permission, describing behaviour, highlighting impact, and encouraging future action. It also stresses building trust to make feedback more effective and creating a culture where feedback is seen as a growth tool rather than criticism. #FeedbackCulture #LeadershipSkills #ProfessionalGrowth #EffectiveCommunication #TeamDevelopment\n\nEffective Technical Leadership: This article outlines essential qualities and practices for effective technical leadership, focusing on increasing knowledge, speed, and awareness. It emphasises the importance of coaching over direct management, making quick and informed decisions, and leading by example through active coding and problem-solving. #TechnicalLeadership #TechLead #EngineeringExcellence #LeadershipDevelopment #CodingWisdom\n\nDIY MBA: My Reading List: Chris Stoneman shares his self-curated DIY MBA reading list, spanning various essential business topics such as accounting, marketing, management, global economics, strategy, creativity, and productivity, aimed at replicating an MBA education independently. This list isn't going to provide much for the experienced manager or MBA graduate, but for those looking to get a high-level overview of the concepts and topics you might find in an MBA, this might be useful. #DIY #MBA #SelfLearning #BusinessBooks #ProfessionalGrowth #EducationInnovation\n\nRegards,\nM@\n\n[ED: If you'd like to sign up for this content as an email, click here to join the mailing list.]"
  }
}