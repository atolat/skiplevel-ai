{
  "arxiv_8c23e5a982ce199795ede43275cefeb1": {
    "title": "Challenges Women in Software Engineering Leadership Roles Face: A Qualitative Study",
    "url": "http://arxiv.org/pdf/2104.13982v1",
    "source": "arxiv",
    "authors": [
      "Karina Kohl",
      "Rafael Prikladnicki"
    ],
    "published_date": "2021-04-28T19:22:09+00:00",
    "summary": "Software engineering is not only about technical solutions. To a large\nextent, it is also concerned with organizational issues, project management,\nand human behavior. There are serious gender issues that can severely limit the\nparticipation of women in science and engineering careers. It is claimed that\nwomen lead differently than men and are more collaboration-oriented,\ncommunicative, and less aggressive than their male counterparts. However, when\ntalking with women in technology companies' leadership roles, a list of\nproblems women face grows fast. We invite women in software engineering\nmanagement roles to answer the questions from an empathy map canvas. We used\nthematic analysis for coding the answers and group the codes into themes. From\nthe analysis, we identified seven themes that support us to list the main\nchallenges they face in their careers.",
    "categories": [
      "cs.SE"
    ],
    "entry_id": "http://arxiv.org/abs/2104.13982v1",
    "meta": {
      "content_type": "academic_paper",
      "is_curated": true,
      "source_quality": 8
    },
    "content_type": "academic_paper",
    "text": "arXiv:2104.13982v1  [cs.SE]  28 Apr 2021Challenges Women in Software Engineering Leadership Roles Face: A\nQualitative Study\nKarina Kohl1aand Rafael Prikladnicki1b\n1School of Technology, PUCRS, Porto Alegre, Brazil\nkarina.kohl@edu.pucrs.br, rafael.prikladnicki@pucrs. br\nKeywords: Software Engineering, Management, Leadership, Empathy, W omen, Qualitative\nAbstract: Software engineering is not only about technical solutions . To a large extent, it is also concerned with orga-\nnizational issues, project management, and human behavior . There are serious gender issues that can severely\nlimit the participation of women in science and engineering careers. It is claimed that women lead differently\nthan men and are more collaboration-oriented, communicati ve, and less aggressive than their male counter-\nparts. However, when talking with women in technology compa nies\u2019 leadership roles, a list of problems\nwomen face grows fast. We invite women in software engineeri ng management roles to answer the questions\nfrom an empathy map canvas. We used thematic analysis for cod ing the answers and group the codes into\nthemes. From the analysis, we identi\ufb01ed seven themes that su pport us to list the main challenges they face in\ntheir careers.\n1 INTRODUCTION\nSoftware engineering is not only about technical so-\nlutions. It is, to a large extent, also concerned with or-\nganizational issues, project management, and human\nbehavior (Wohlin C., 2003).\nDiversity is being discussed intensively by differ-\nent knowledge areas of society, and these discussions\nin Software Engineering are increasing as well. Dif-\nferent people form software development teams, and\nlately, it is being discussed that we have underrep-\nresented groups as, for instance, gender, ethnic, cul-\ntural, and others. Page (Page, 2007) de\ufb01nes cogni-\ntive diversity as the differences in how we interpret,\nreason, and solve, how we think and, identity diver-\nsity is determined by af\ufb01liation with a social group\nas gender, culture, ethnicity, religion, sexual orienta-\ntion, etc. Cognitive diversity is linked to better out-\ncomes in two main types of tasks: problem-solving\nand prediction. Identity diversity creates collective\nbene\ufb01ts when connects to cognitive diversity and con-\nnects these diverse talents to relevant problems.\nGender diversity often refers to an equitable or\nfair representation of people of different genders. It\ncommonly refers to an equal ratio of men and women\nbut may also include people of non-binary genders\nahttps://orcid.org/0000-0000-0000-0000\nbhttps://orcid.org/0000-0000-0000-0000(Sytsma, 2006). Non-binary is a spectrum of gender\nidentities that are not exclusively masculine or femi-\nnine, outside the gender binary (Usher, 2006).\nPage (Page, 2007) says identity attributes cause us\nto construct different sets of cognitive tools. Iden-\ntity differences lead to experiential differences that\ncreate tool differences. We can see this in the con-\ntext of gender differences. Because we treat men and\nwomen differently, we provide them different expe-\nriences. As a result, they learn to think about situa-\ntions differently. The effects of identity on experience\nand opportunities are hard to measure. Ideally, society\nwould not discriminate based on identity characteris-\ntics. But even if society did not, policies that encour-\nage or mandate identity blindness could not immedi-\nately overcome the residue of past biases.\nFrize (Frize, 2005) says there are serious gender\nissues that can severely limit women\u2019s participation\nin science and engineering careers, which are simi-\nlar in many parts of the world. One main obstacle\nto women\u2019s retention or participation is that women\u2019s\ncontributions and abilities are less valued than men\u2019s,\nand women are generally ignored in mainstream his-\ntory. A systemic bias against women arose and was\nperpetuated for thousands of years by philosophers\nand thinkers. Aristotle\u2019s (384-322 BC) writings make\nhis position clear: \u201d The female is as it were a de-\nformed male. The male is by nature \ufb01tter for the com-\nmand than the female... The justice of a man and a\n\nwoman is not the same; the courage of a man is shown\nin commanding a woman obeying. In men, qualities\nor capacities are found in their perfection, whereas\nwomen are less balanced, more easily moved to tears,\nmore jealous; she is also more false of speech [and]\nmore deceptive. \u201d Plato (429-347 BC), however, ar-\ngued that women, like men, could rule and that those\nwho showed such talents ought to be given access to\neducation. If they are to become rulers, women must\nhave equal access to education and training as men\ndo. Plato advocated education for women so that they\ncould participate equally in society (Frize, 2005).\nJetter et al. (Jetter et al., 2013) mention that lead-\nership style, the \u201d manner and approach of providing\ndirection, implementing plans, and motivating peo-\nple,\u201d has a signi\ufb01cant impact on team performance\nand the achievement of organizational goals. A par-\nticipative leadership style was positively related to\nhighly functional teams and fostered team innova-\ntion. Gender is a factor that has been investigated\nin leadership style studies. It is sometimes claimed\nthat women lead differently than men and are more\ncollaboration-oriented, communicative, and less ag-\ngressive than their male counterparts.\nJetter and Walker (Jetter and Walker, 2017) say it\nhas almost become a stylized fact that, on average,\nwomen are more likely to avoid competition, under-\nperform in competitive environments, and exhibit\nhigher risk aversion than men. Persistent social phe-\nnomena, such as the gender wage gap or the under-\nrepresentation of women in highly competitive occu-\npations and job positions, have been linked to such\nobservations. One prominent hypothesis to explain\nthis phenomenon relates to the idea that the gender of\none\u2019s opposition could in\ufb02uence competitive behav-\nior. More generally, people may behave differently\nwhen competing against adversaries from the oppo-\nsite sex. If true, this would imply wide-ranging conse-\nquences in a number of settings. For instance, numer-\nous work environments are characterized by persis-\ntent under-representation of one gender. Women are\nespecially under-represented in jobs that are generally\nassociated with high-pressure environments and large\nstakes, such as \ufb01nancial management (the share of fe-\nmales at Wall Street remains at approximately 10 per-\ncent) or CEO positions in the US (2.5 percent). Other\nareas with low female employee shares include IT-\nand math-related occupations, where women usually\noccupy less than 20 percent of positions.\nEagly and Carli (Eagly and Carli, 2003) say any\nfemale advantage in leadership style might be offset\nby disadvantage that \ufb02ows from prejudice and dis-\ncrimination directed against women as leaders. Prej-\nudice consists of an unfair evaluation of a group ofpeople based on stereotypical judgments of the group\nrather than its members\u2019 behavior or quali\ufb01cations.\nWhen people hold stereotypes about a group, they ex-\npect that group to possess characteristics and exhibit\nbehavior consistent with those stereotypes. They also\nsay, consistent with role incongruity theory, stereo-\ntype research reveals that people do consider men to\nbe more agentic than women and women to be more\ncommunal than men. Also, the communal qualities\nthat people associate with women, such as warmth\nand sel\ufb02essness, diverge from the agentic qualities,\nsuch as assertiveness and instrumentality, that peo-\nple perceive as characteristics of successful leaders.\nIn contrast, the predominantly agentic qualities that\npeople associate with men are similar to the qualities\nperceived to be needed for success in high-status oc-\ncupations, including most managerial occupations.\nNovielli and Serebrenik\n(Novielli and Serebrenik, 2019) said that the in-\nterest in the power of emotions stimulated efforts\nto study the link between emotions and developers\u2019\nproductivity and understand the triggers for emotions\nduring software development and related activities,\nand assess the impact of emotions on the developers\u2019\nwell-being. They say that a team manager or the\nscrum master can bene\ufb01t from understanding the\ndevelopers\u2019 emotions. Such an understanding can, for\nexample, inform retrospective analysis that considers\nemotions for identifying and correcting uneven task\ndistribution or for providing just-in-time support to a\nteam member stuck in dealing with a programming\ntask.\nConsidering the context of women in software en-\ngineering leadership roles, we used the empathy map\ncanvas technique applied in the format of a survey to\nunderstand three women\u2019s perceptions and emotions\nin different management roles in a technology com-\npany (project/product managers, people managers,\nscrum masters, etc.). Our main goal is to answer the\nfollowing research question:\nRQ. What are the challenges women in Soft-\nware Engineering leadership/management\nroles face?\nThe rest of the paper proceeds as follows. Sec-\ntion 2 presents background about Empathy. Section\n3 summarizes the methodology we use in this study.\nSection 4 presents the results we found and discus-\nsions. Section 5 concludes the paper.\n\n2 EMPATHY\nDecety and Cowell (Decety and Cowell, 2014) say\nempathy is the ability to share in and understand oth-\ners\u2019 experiences vicariously. There is broad con-\nsensus that empathy is a fundamental component of\nour social and emotional lives. Indeed, empathy has\na vital role in social interaction, including under-\nstanding others\u2019 feelings and subjective psychological\nstates. Empathy-related processes are thought to mo-\ntivate prosocial behavior (e.g., sharing, comforting,\nand helping) and caring for others, inhibit aggression,\nand provide the foundation for care-based morality.\nHenschel et al. (Henschel et al., 2020) say empa-\nthy corresponds to the ability to understand others\u2019\nminds, feel their emotions outside our own, and re-\nspond with kindness, concern, and care to their emo-\ntions. It is a multidimensional construct encompass-\ning an affective component (i.e., tendencies to feel\ncompassion and concern for others) and a cognitive\ncomponent (i.e., an ability to understand the reasons\nfor another person\u2019s emotions and imagine different\nviewpoints beyond one\u2019s own).\nCameron et al. (Cameron et al., 2019) suggest\nempathy may not be easy \u2014 in many cases, partic-\nularly with strangers, it may require cognitive work.\nEmpathy may seem less taxing for loved ones or in\nenvironments that scaffold empathy with social re-\nwards and may be selected rather than suppressed.\nPeople may set the limits of empathy based on how\nhard they want to work. A study from Weisz and Zaki\n(\u201dWeisz and Zaki, 2018) suggests that people want to\nempathize with those most relevant to them. This\ntendency goes beyond group membership; people are\nmotivated to empathize with those who look like\nthem, those who are kind to them, and those close\nto them.\nDave Gray created the empathy map technique in\n2009 to help teams develop deep, shared understand-\ning and empathy for other people. People use it to im-\nprove customer experience, navigate organizational\npolitics, design better work environments, and host\nother things. The original goal of the empathy map\nis to gain a deeper level of understanding of a stake-\nholder in your business ecosystem, which may be a\nclient, prospect, partner, etc., within a given context,\nsuch as a buying decision or an experience using a\nproduct or service (\u201dGray, 2017).\nIn Human-Computer Interaction (HCI), em-\npathy appears in different works as in Ben-\nnett and Rosner (Bennett and Rosner, 2019) that\nstudied empathy around disability. Gonzales\net al. (Gonz\u00b4 alez-Ba\u02dc nales and Ort\u00b4 \u0131z, 2017) used\nthe empathy map as a tool to analyze Human-Computer Interaction in the elderly. Ferreira et al.\n(Ferreira et al., 2015) used a combination of personas\nand empathy maps to enhance user experience. In the\ncontext of Software Engineering, we opted to use the\ntechnique experimentally in a different situation, so\nwe used the Empathy Map Canvas technique to col-\nlect the data through our survey. We consider it essen-\ntial to connect with the participants\u2019 experiences and\ntheir emotions for this sensitive subject. It was a valid\nexperience once two respondents mentioned that the\nsurvey touched them, and it got them thinking about\ntheir professional journey.\n3 THE STUDY DESIGN\nGiven (Given, 2008) says survey research refers to the\nset of methods used to gather data systematically from\na range of individuals, organizations, or other units\nof interest. Speci\ufb01c methods may include question-\nnaires (on paper or online), interviews (conducted by\nany method; e.g., individual interviews done face to\nface or via telephone), focus groups, or observation\n(e.g., structured observations of people using internet\naccess stations at a public library).\nThis work\u2019s data collection began when people in\nBrazil were around four months in social distancing\ndue to the COVID-19 pandemics. The original idea\nwas to perform a focus group with three women in\nleadership/management roles using the empathy map\ncanvas questions to guide the discussion. However,\nthe pandemics forced us to change the plans, and we\nopted to adapt the empathy map canvas to an online\nsurvey. Two were the main reasons to send the empa-\nthy map to respond as a survey instead of running a\nfocus group using online conference call tools:\n1. Schedule: the professionals\u2019 agendas are busier\nthan before COVID-19. People report that they\nhave more meetings than usual, even after of\ufb01ce\nhours, which leads them to exhaustion.\n2. People are reporting higher sensitivity to their\nemotions and dif\ufb01culties in expressing them in a\ngroup.\nGiven the situation, after a brief conversation with\nthe women who were going to participate in the fo-\ncus groups, we opted for sending the empathy map in\nan online survey format so they could respond asyn-\nchronously and in the most comfortable moment for\nthem.\nGiven (Given, 2008) says the de\ufb01ning element of\nfocus groups is the use of the participants\u2019 discussion\nas a form of data collection. In particular, there is no\nrequirement to reach a consensus or produce a deci-\n\nTable 1: Demographics of the Participants of the Study\nAnswer Age GenderRace/\nEthnicityYears\nin ITYears in\ncurrent jobRoleSelf Evaluation\non experience\n#1 34 Woman White 10 1 Scrum Master IT ManagerSpecialist\n(+3 years)\n#2 43 Woman White 19 2ScrumMaster\nProduct Owner\nPeople ManagerSpecialist\n(+3 years)\n#3 35 Woman White 16 2 IT CoordinatorExperienced\n(1 - 3 years)\nAvg 37.3 15 1.7\nsion; instead, it is the participants\u2019 conversation about\nthe research topic of interest. Once, initially, the focus\ngroup would be guided by the empathy map canvas\nquestions, we entirely mapped the questions as open-\nquestions to the online survey. Given (Given, 2008)\nalso says open-ended questions provide greater free-\ndom to the researcher in terms of how to frame the\nquestion, as well as granting greater freedom to re-\nspondents in the ways they choose to answer. Open-\nended questions may challenge respondents because\nthey are more demanding and time-consuming to an-\nswer; however, the data obtained are typically richer\nthan that generated from closed questions. Consider-\ning this, we understood that we could lose the con-\nversation between the participants, but we still would\nhave rich qualitative data to analyze.\nBelow, we list the high-level questions of the em-\npathy map as de\ufb01ned by Dave Gray (\u201dGray, 2017),\nand we included in the survey:\n1. Who we are empathizing with?\n\u2022 Who is the person we want to understand?\n\u2022 What is the situation they are in?\n\u2022 What is their role in the situation?\n\u2022 How will we know they were successful?\n2. What do they need to do?\n\u2022 What do they need to do differently?\n\u2022 What tasks do they want or need to get done?\n\u2022 What decisions do they need to make?\n3. What do they see?\n\u2022 What are they watching and reading?\n\u2022 What kind of tasks are they exposed to daily?\n\u2022 Who are their friends?\n\u2022 What kind of problems they face?\n4. What do they say?\n\u2022 What have we heard they say?\n\u2022 What can we imagine they saying?\n5. What do they do?\u2022 What do they do today?\n\u2022 What behavior have we observed?\n\u2022 Whats can we imagined they doing?\n6. What do they hear?\n\u2022 What are they hearing others saying?\n\u2022 What are they hearing from friends?\n\u2022 What are they hearing from colleagues?\n\u2022 What do they hear second hand?\n7. What do they think and feel?\n\u2022 Pains: What are their fears, frustrations, and\nanxieties?\n\u2022 Gains: What are their wants, needs, hopes, and\ndreams?\n3.1 Participants\nWe invited three women in Software Engineering\nleadership/management roles to answer our ques-\ntions. They work in the same tech company in\nBrazil, but they have different career paths. They\nhave worked for different companies and have differ-\nent work and life experiences. Table 1 presents the\ndemographic data of those women. We did not pro-\nvide pre-\ufb01lled gender and race/ethnicity lists, so re-\nspondents could self-identify themselves.\n3.2 Qualitative Data Analysis\nRuneson and Martin (Runeson and H\u00a8 ost, 2009) say\nanalysis of qualitative data is conducted in a series\nof steps. First, the data is coded, which means that\nparts of the text can be given a code representing a\ncertain theme, area, construct, etc. One code is usu-\nally assigned to many pieces of text, and one piece of\ntext can be assigned more than one code. Codes can\nform a hierarchy of codes and sub-codes. The coded\nmaterial can be combined with the researcher\u2019s com-\nments and re\ufb02ections (i.e., \u201dmemos\u201d). When this has\n\nbeen done, the researcher can go through the mate-\nrial to identify a \ufb01rst set of hypotheses. For exam-\nple, these can be phrases similar in different parts of\nthe material, patterns in the data, differences between\nsub-groups of subjects, etc. The identi\ufb01ed hypothe-\nses can then be used when further data collection is\nconducted in the \ufb01eld, i.e., resulting in an iterative\napproach where data collection and analysis is con-\nducted in parallel as described above. During the it-\nerative process, a small set of generalizations can be\nformulated, eventually resulting in a formalized body\nof knowledge, which is the \ufb01nal result of the research\nattempt. This is, of course, not a simple sequence of\nsteps. Instead, they are executed iteratively, and they\naffect each other.\nWe performed a thematic analysis with open cod-\ning on the responses from the empathy map. We read\nand reread the data, looking for keywords, trends,\nthemes, or ideas to outline the analysis. This anal-\nysis identi\ufb01ed themes across the questions from the\nsurvey. Table 2 lists the codes, themes, and quotes.\n4 RESULTS AND DISCUSSION\nThe data collected through the empathy map applied\nto three software engineering managers were coded\nand grouped in themes, as shown in Table 2. We\nidenti\ufb01ed 23 codes then we grouped them into seven\nthemes. The themes helped us answer the research\nquestion proposed for this study, and we discuss them\nin this Section.\n4.1 RQ. What are the challenges women\nin Software Engineering middle\nmanagement roles face?\nPermission to Occupy Authorized Spaces As\nmentioned at the beginning of this work, Frize\n(Frize, 2005) says there are serious gender issues that\ncan severely limit women\u2019s participation in science\nand engineering careers, and these are similar in many\nparts of the world. One main obstacle to women\u2019s re-\ntention or participation is that women\u2019s contributions\nand abilities are less valued than men\u2019s, and women\nare generally ignored in mainstream history. From the\nanswers we collected, it is possible to see that women\nwant to occupy positions that men traditionally occu-\npied. However, there is also a sensation that women\ncan occupy those roles when \u201dauthorized.\u201d The po-\nsitions occupied for those women are as they were\ngiven the right to be there, and it is what they deserve.\nRecognition and Equal Opportunities The threemanagers reported their desire for recognition. They\nwant to know that what they are doing is signi\ufb01cant\nand acknowledge by their peers and managers. The\nrecognition comes together with the desire for equal\nopportunities to grow in their career as their men\npeers.\nNeed to Go Above and Beyond The managers\nmentioned they feel like they always need to put more\neffort and go beyond the men\u2019s peers. There is the\nsensation that the same work is praised when a man\ndoes it, and it is suspicious when a woman does.\nAgain, women mention the high effort to prove their\nwork is good or even better than their male peers\u2019\nwork.\nMental Wear and Tear The efforts for recogni-\ntion and the high energy put into achieving it leads\nthem to exhaustion. The managers mentioned they\nfeel tired because they always need to have a strong\nopinion and a solution for every problem shared with\nthem.\nDrama and Stereotypes Eagly and Carli\n(Eagly and Carli, 2003) say prejudice consists of\nan unfair evaluation of a group of people based on\nstereotypical judgments of the group rather than the\nbehavior or quali\ufb01cations of its members. When\npeople hold stereotypes about a group, they expect\nthat group to possess characteristics and exhibit\nbehavior consistent with those stereotypes. In our\nstudy, the surveyed women mentioned stereotypes\nabout their physical appearance. They said they are\njudged by what they wear, by the makeup absence,\nand even for have opted for short hair (\u201d women\nwith short hair are not women \u201d). Also, their mental\nstate is always put in check. When sharing concerns\nabout keeping a healthy and psychologically safe\nenvironment, they use to hear that look for it is an\nexaggeration and that they are doing \u201d drama .\u201d They\nalso listen to things as \u201d this woman is crazy .\u201d\nObstacles and Fears The managers mentioned\nstructural sexism in different parts of the survey.\nSometimes they are afraid of talking about it once\ntheir male peers or even their managers can scold\nthem. As a considerable obstacle, they see the broth-\nerhood between men at all levels. They mentioned the\nperception of the existence of \u201d a network of male pro-\ntectionism, which prevents women from advancing to\nstrategic positions .\u201d\nHire and Education for Diversity Besides the\nheavy psychological load women carry out to conduct\ntheir daily activities, they are still concerned about\ncreating psychological safety for gender diversity.\nAs hiring managers, they use the opportunity to\nbuild more diverse and inclusive environments in\ntechnology. With that, they try to minimize the chal-\n\nTable 2: Results of the Thematic Analysis\nCodes Theme Quotes\nAuthorization\nDeserve\nRight\nPositionsPermission to Occupy\nTechnology Spaces\u201cI see in the company I work, an exact sample of the market:\nwomen occupying \u201cauthorized spaces. \u201d It seems that I have be en\ngiven the right to be where I am and that it is the part I deserve . \u201d\n\u201cThe deconstruction of the thought that women are not able\nto occupy positions that men predominantly occupy today. \u201d\nRecognition\nOpportunities\nEquityRecognition and\nEqual Opportunities\u201cRecognition and equity in opportunities. \u201d\n\u201cRecognition and opportunity to have more space. \u201d\n\u201cA plural and psychologically healthy professional\nenvironment that provides equity in career development\u201d\nBeyond\nPotentialNeed to Go\nAbove and beyond\u201cI often feel that I need to go beyond my peers in terms of train ing as if\nI was never competent enough to achieve the results expected from me\u201d\n\u201cI still see something very distant from diverse team struct ures.\nI already see some diversity at the beginning of career. In de velopment teams,\nI don\u2019t see a woman Specialist, for example. \u201d\n\u201cAt the beginning of my career, I always thought that when I wa s 40 years old,\nI would be someone in a strategic area that would make a differ ence in a scaled way.\nI know it makes a difference, but it is not a universe in scale.\nI often see that my potential is not used at their maximum. \u201d\nTiredness\nExpectations\nProve\nJudgementMental wear\nand tear\u201cI feel tired because I want to make a difference, so\nI put a lot of effort into thinking and planning before propos ing something. \u201d\nI feel they expect I need to have always a position about every thing.\nI can not exempt myself from an opinion. \u201d\n\u201cI would say that the biggest problem is the counteraction.\nI always need to present hard proof of my suggestions and plan s. \u201d\n\u201cFrequently, mental wear and tear for performing tasks in ve ry different contexts. \u201d\n\u201cAs a woman and mother, I need to prove myself much more.\nIf a man and a woman perform the same task and are successful,\nthe man will be praised and promoted for it,\nwhile the woman will be criticized, and her outcome will be ju dged with suspicion. \u201d\nDrama\nCrazyDrama and\nStereotypes\u201cI also imagine many teams saying that \u201ceverything is drama. \u201d\n\u201cDo I need to change my way of speaking and acting with that per son then?\u201d\n\u201cWomen are dramatic and talk too much, \u201d\n\u201cI don\u2019t know how to talk about it, I prefer not to talk, \u201d\n\u201cWomen with short hair are not women, \u201d\n\u201cThat woman is crazy, \u201cetc.\nMale Protectionism\nMasculinization\nSexism\nHumiliationObstacles\nand Fears\u201cA network of male protectionism, which prevents women from advancing\nto strategic positions (or advancing with great dif\ufb01culty, requiring\na certain masculinization for that). \u201d\n\u201cthe partnerships that count a lot at all levels. Do not be a wh ite man. \u201d\n\u201cStructural sexism and even to be scolded for trying to \ufb01ght a gainst it. \u201d\n\u201cTo stay out of the standard behavior that companies expect f rom\nthe role that I \ufb01nd myself in today (software engineering man ager)\nfor the sake of being myself. \u201d\n\u201cOnce again humiliation\u201d\nHiring\nDiversity\nEducation\nMake DifferenceHire and Education\nfor Diversity\u201cI carry out actions to expand the hiring of women and black pe ople.\nIt is also my goal to carry out education actions with my teams \u201d\n\u201cOnce I am the only woman in management in my area, the behavio r\nI seek is not to follow the established pattern. I seek to brin g diversity to my teams. \u201d\n\u201cWhen hiring, I seek diversity and bring diversity.\nI have a fortnightly meeting group with this diverse group wh ere\nwe seek a supportive and safe environment. But my goal behind\nthis action is beyond that I want this diverse group to be the\nnext generation of leadership. At the base, it is challengin g\nto make the difference that needs to be made. \u201d\n\nlenges to the next generations of women in leadership\npositions. However, they report low support from\npeers and higher levels.\nBesides the challenges, the three managers men-\ntioned that even with the small representativeness,\nthey believe in paving the way for more women in\ntechnology careers. They are supported by thoughts\nof doing something meaningful to other people\u2019s lives\nand changing the picture, even with small acts.\nAdditionally to the results, we considered using\nthe empathy map in this study as a valid experience.\nTwo respondents mentioned that the survey touched\nthem deeply, and it got them thinking about their pro-\nfessional journey after answering.\n4.2 Threats to Validity\nAny empirical study is subject to several threats to\nvalidity. This section is organized by classi\ufb01cation of\nthe threats to validity in three classes: Internal, Exter-\nnal, and Construct categories (Wohlin et al., 2012)\nInternal validity is the extent to which the de-\nsign and conduct of the study are likely to prevent\nsystematic error (Kitchenham and Charters, 2007). It\nconcerns confounding factors that can in\ufb02uence the\nobtained results. We assumed a causal relationship\nbetween the perceptions through the entire set of an-\nswers we coded and grouped in themes and the an-\nswers with what is considered challenging for the\nwomen that answered the survey.\nExternal validity is the extent to which the ef-\nfects observed in the study are applicable outside of\nthe study (Kitchenham and Charters, 2007). The pre-\nsented results are related to answers of three women\nin roles of software engineering management work-\ning for the same company, so the results are only valid\nin this context, and we cannot generalize them. How-\never, this work does not intend to be a complete analy-\nsis of women\u2019s situation in software engineering man-\nagement roles. It is only the \ufb01rst step of a study using\nthe empathy map to collect qualitative data. An exten-\nsion of this work is needed to con\ufb01rm our \ufb01ndings.\nThreats to Construct validity focus on how ac-\ncurately the observations describe the phenomena of\ninterest. The coding process is subject to researcher\nbias, as the process of grouping the codes in themes.\nTo minimize bias due to personal interpretation, the\nprocess was reviewed by a second researcher.5 CONCLUSION\nThis work does not intend to be a complete analy-\nsis of women\u2019s situation in software engineering mid-\ndle management roles. We also cannot generalize\nthe results, and no intersectionality evaluation could\nbe done once the three women reported being white\nwomen. Intersectionality is the theoretical framework\nfor understanding how aspects of a person\u2019s social and\npolitical identities (e.g., gender, sex, race, class, sex-\nuality, religion, ability, physical appearance, height,\netc.) might combine to create unique modes of dis-\ncrimination and privilege, coined by Kimberle Cren-\nshaw (Crenshaw, 1989). However, we intended to\nbring some initial insights from applying the empa-\nthy map technique to these women and raise aware-\nness of what impacts their careers, the challenges they\nface, and show the distress they are exposed to. This\nwork is the initial step of a broader work where using\nempirical strategies; we aimed to understand if a soft-\nware development team with greater gender diversity\nperforms better than a homogeneous team and which\nfactors may be the most impacted by this spectrum\nof diversity. Data collection is happening in different\ncompanies from the information technology industry\nthrough surveys, interviews, and code repository anal-\nysis from other software development teams\u2019 roles.\nWith that, we expect to reach a broader number of\nwomen of different races/ethnicities, cultures, etc. So\nwe will be able to analyze the data from the point of\nview of intersectionality.\nACKNOWLEDGEMENTS\nThis project is partially funded by FAPERGS, project\n17/2551-0001/205-4.\nREFERENCES\nBennett, C. L. and Rosner, D. K. (2019). The promise of\nempathy: Design, disability, and knowing the \u201cother\u201d.\nConference on Human Factors in Computing Systems\n- Proceedings , pages 1\u201313.\nCameron, C., Hutcherson, C., Ferguson, A., Scheffer, J.,\nHadjiandreou, E., and Inzlicht, M. (2019). Empathy is\nhard work: People choose to avoid empathy because\nof its cognitive costs. Journal of Experimental Psy-\nchology: General , 148(6):962\u2013976.\nCrenshaw, K. (1989). Demarginalizing the intersection of\nrace and sex: A black feminist critique of antidiscrimi-\nnation doctrine, feminist theory and antiracist politics.\nUniversity of Chicago Legal Forum , 1989(3):207\u2013\n236.\n\nDecety, J. and Cowell, J. M. (2014). The complex relation\nbetween morality and empathy. Trends in Cognitive\nSciences , 18(7):337\u2013339.\nEagly, A. H. and Carli, L. L. (2003). The female leader-\nship advantage: An evaluation of the evidence. The\nLeadership Quarterly , 14(6):807 \u2013 834.\nFerreira, B., Conte, T., and Barbosa, S. D. J. (2015). Elicit -\ning Requirements Using Personas and Empathy Map\nto Enhance the User Experience. Proceedings - 29th\nBrazilian Symposium on Software Engineering, SBES\n2015 , pages 80\u201389.\nFrize, M. (2005). Women in leadership: Value of women\u2019s\ncontributions in science, engineering, and technol-\nogy. In Proceedings of the International Symposium\non Women and ICT: Creating Global Transformation ,\nCWIT \u201905, page 4\u2013es, New York, NY , USA. Associa-\ntion for Computing Machinery.\nGiven, L. M. (2008). Qualitative Research Methods - Vol-\numes 1-2. The SAGE Encyclopedia of Qualitative Re-\nsearch methods.\nGonz\u00b4 alez-Ba\u02dc nales, D. L. and Ort\u00b4 \u0131z, L. E. S. (2017). Em-\npathy map as a tool to analyze human-computer inter-\naction in the elderly. ACM International Conference\nProceeding Series .\n\u201dGray, D. (2017). \u201dupdate to the empathy map\u201d.\nHenschel, S., Nandrino, J.-L., and Doba, K. (2020). Emo-\ntion regulation and empathic abilities in young adults:\nThe role of attachment styles. Personality and Indi-\nvidual Differences , 156:109763.\nJetter, A. J., Loanzon, E., Jahromi, S., Nour, A. H., and\nPakdeekasem, P. (2013). An exploratory study on\nthe leadership style preferences of male and female\nmanagers: Implications on team performance. In\n2013 Proceedings of PICMET \u201913: Technology Man-\nagement in the IT-Driven Services (PICMET) , pages\n1161\u20131181.\nJetter, M. and Walker, J. K. (2017). The gender of op-\nponents: Explaining gender differences in perfor-\nmance and risk-taking? European Economic Review ,\n109:238\u2013256.\nKitchenham, B. A. and Charters, S. (2007). Guidelines for\nperforming systematic literature reviews in software\nengineering. Technical Report EBSE 2007-001, Keele\nUniversity and Durham University Joint Report.\nNovielli, N. and Serebrenik, A. (2019). Sentiment and emo-\ntion in software engineering. IEEE Software , 36(5):6\u2013\n9+23.\nPage, S. E. (2007). The Difference: How the Power of\nDiversity Creates Better Groups, Firms, Schools, and\nSocieties . Princeton University Press.\nRuneson, P. and H\u00a8 ost, M. (2009). Guidelines for conduct-\ning and reporting case study research in software engi-\nneering. Empirical Software Engineering , 14(2):131\u2013\n164.\nSytsma, S. E. (2006). Ethics and intersex . (Springer e-\nbooks.) Dordrecht: Springer.\nUsher, R. (2006). North American Lexicon of Transgender\nTerms. GLB Publishers.\u201dWeisz, E. and Zaki, J. (2018). \u201dmotivated empathy: a\nsocial neuroscience perspective\u201d. Current opinion in\npsychology , 24:67\u201371.\nWohlin, C., von Mayrhauser, A., Runeson, P., H\u00a8 ost, M.,\nOhlsson, M., Regnell, B., and Wessl\u00b4 en, A. (2012).\nExperimentation in Software Engineering: An Intro-\nduction . International Series in Software Engineering.\nSpringer US.\nWohlin C., H\u00a8 ost M., H. K. (2003). Empirical research meth-\nods in software engineering. In Conradi R., W. A., edi-\ntor,Lecture Notes in Computer Science , volume 2765,\npages 266\u2013290. Springer, Berlin, Heidelbergs.\n\nThis figure \"orcid.png\" is available in \"png\"\n format from:\nhttp://arxiv.org/ps/2104.13982v1\n\n",
    "is_processed": true,
    "process_error": null,
    "content_length": 34253,
    "local_pdf_path": "data/pdfs/Challenges Women in Software Engineering Leadership Roles Face_ A Qualitative Study_75cefeb1.pdf"
  },
  "arxiv_ca0d7d48417323238f57f0807fe062a5": {
    "title": "Studies on the Software Testing Profession",
    "url": "http://arxiv.org/pdf/1906.06144v1",
    "source": "arxiv",
    "authors": [
      "Luiz Fernando Capretz",
      "Pradeep Waychal",
      "Jingdong Jia",
      "Daniel Varona",
      "Yadira Lizama"
    ],
    "published_date": "2019-06-12T19:28:16+00:00",
    "summary": "This paper attempts to understand motivators and de-motivators that influence\nthe decisions of software professionals to take up and sustain software testing\ncareers across four different countries, i.e. Canada, China, Cuba, and India.\nThe research question can be framed as \"How many software professionals across\ndifferent geographies are keen to take up testing careers, and what are the\nreasons for their choices?\" Towards that, we developed a cross-sectional but\nsimple survey-based instrument. In this study we investigated how software\ntesters perceived and valued what they do and their environmental settings. The\nstudy pointed out the importance of visualizing software testing activities as\na set of human-dependent tasks and emphasized the need for research that\nexamines critically individual assessments of software testers about software\ntesting activities. This investigation can help global industry leaders to\nunderstand the impact of work-related factors on the motivation of testi...",
    "categories": [
      "cs.SE"
    ],
    "entry_id": "http://arxiv.org/abs/1906.06144v1",
    "meta": {
      "content_type": "academic_paper",
      "is_curated": true,
      "source_quality": 8
    },
    "content_type": "academic_paper",
    "text": "IEEE/ACM 41st International Conference on Software Engineering (ICSE -Companion), pp. 262- 263, May 2019  \n262 \n Studies on the Software Testing Profession  \n \nLuiz Fernando Capretz   \nElectrical & Computer Eng.   \nWestern  University  \nLondon, Canada  \nlcapretz@uwo.ca  Pradeep Waychal  \nCRICPE  \nWestern Michigan University  \nKalamazoo, USA  \npradeep.waychal@gmail.com  Jingdong Jia  \nSchoo l of Software  \nBeihang University \nBeijing, China  \njiajingdong@buaa.edu.cn  Daniel Varona Yadira Lizama  \nCultureplex Laboratories  \nWestern University  \nLondon, Canada  \n{dvarona , ylizama }@uwo.ca\nAbstract \u2014This paper attempts to understand motivators and \nde-motivato rs that influence the decisions of software \nprofessionals to take up and sustain software testing careers \nacross four different countries, i.e. Canada, China, Cuba, and \nIndia. The research question can be framed as \u201cHow many \nsoftware professionals across d ifferent geographies are keen to \ntake up testing careers, and what are the reasons for their \nchoices?\u201d Towards that, we developed a cross -sectional but \nsimple survey -based instrument. In this study we investigated \nhow software testers perceived and valued what they do and th eir \nenvironmental settings. The  study pointed out the importance of \nvisualizing software testing activities as a set of human -\ndependent tasks and emphasized the need for research that \nexamines critically individual assessments of softwar e testers \nabout software  testing activities. This investigation can help \nglobal  industry leaders to understand the impact of work -related \nfactors on the motivation  of testing professionals, as well as  \ninform and support management and leadership in this co ntext.  \nKeywords \u2014software test, human factors in software \nengineering, software testing professionals , empirical software \nengineering, cross -cultural studies, soft skills, software psychology  \nI. INTRODUCTION  \nDespite the importance of the software industry, only a \nhandful of studies have been done on motivating software \nengineers to take up and sustain testing careers.  Considering \nthe importance of software testing to the development of high qualit y, reliable software systems , and inadequate empirical \nevidence a bout the human factors affecting this activity, we \ndecided to conduct a survey to try to find out what and how \nwork -related factors motivate or demotiva te software \nprofessionals follow a software testing career path ? \nWeyuker et al.  [1] observed that the mo st skilled software \ntesters were accustomed to changing jobs in their companies \nand becoming programmers, analysts, or system architects, \nbecause a career in software testing was not considered \nadvantageous enough for most of the professionals. Santos et al. [2], Deak et al.  [3], Florea and Stray [4], Waychal and \nCapretz  [5], and Fern\u00e1ndez -Sanz  et al. [6 ] have also \ninvestigated the reasons for the lack of inter est of software  \nprofes sionals in testing careers, and speculated on a broad \nrange of m otives.  \nII. \nMETH ODOLOGY  \n A questionnaire  was designed to collect responses on the \nmotivation of software professionals to work as software testers, and to understand work- related factors in the specific context of software testing. Specifically, we asked professionals for  the probability that they would choose testing \ncareers by offering multiple choices: \u201cCertainly Yes,\u201d \u201cYes,\u201d \u201cMaybe,\u201d \u201cNo,\u201d and \u201cCertainly Not\u201d. Besides, we asked the \nrespondents to provide an open- ended but prioritized list of \nPROs and CONs, and open- ended rationale regarding their \ndecisions on taking up testing careers.   \n Our sample consisted of 220 software professionals from \nfour different countries (22 from India, 20 from Canada, 34 from China, and 144 from Cuba). While the Indian responses \nwere sought from professionals, who were attending a testing \nconference, the Canadian responses were sought from alumni \nof a software engineering program at a u niversity. The Chinese  \nresponses came from professionals, who were doing part time courses at a university . The Cuban professionals worked as \nsoftware developers and taught/studied at a university. We, \nthus, used convenience sampling both in terms of the countries as well as the professionals. Due to a varying number of \nrespondents in the four geographies, we use percentage instead \nof absolute number of responses increasing the validity of \ncomparisons.  \nA. Chances of software engineering professionals taking up \ntesting careers  \nThe percentage chances are depicted in Table I  below.  \nTABLE I.  PROBABILITY OF TAKING TESTING CAREER  \nResponse s Canada  China  Cuba  India  \nCertain  Not 15% 3% 17% n.a. \nNo 30% 23% 47% n.a. \nMay be  30% 59% 15% n.a. \nYes 10% 12% 16% n.a. \nCertain  Yes 15% 3% 6% n.a. \n \nIn the four geographic regions  surveyed, we found that \ntesting was not a popular career optio n among software \nprofessionals. Canada has the highest percentage of \nprofessionals (25% ) who wanted to take up testing careers. \nMany Chinese professionals were ambivalent and that was perhaps due to a relatively lower unemployment rates. Most of \nthe Cuban profes sionals  were very much against taking up \ntesting careers, which may be due to better employment \nprospects as software developers.  \nB. PROs of testing careers as perceived by professionals  \n The responses from each country were analyzed and \npresented in Table II below.  \n\n263 TABLE II.  PERCENTAGE OF MOTIVA TION DRIVERS FOR \nSOFTWARE TESTING PROFESSIONALS  \nMotivators  Canada  China  Cuba  India  \nLearning Opportunities  34% 36% 45% 28% \nImportant job  16% 7%  28% \nThinking job  7%   37% \nEasy job  16% 32%   \nMore jobs  13% 14%   \nMore m onetary benefits  5% 5%   \nSuitable for \u201cfreshers \u201d   16%  \nProximity to customers    16%  \nGood infrastructure    5%  \nIncrease product quality    13%  \n \nC. CONs of testing careers as perceived by professionals  \n The survey r espondents from each country were  analyzed \nand displayed  in Table III  below.   \nTABLE III.  PERCENTAGE OF DE -MOTIVATION DRIVERS \nFOR SOFTWARE TESTING P ROFESSIONALS  \nDe-motivators  Canada  China  Cuba  India  \nSecond -class citizen  24% 7% 15% 46% \nCareer development  22% 15% 7%  \nComplexity  10% 27% 20% 40% \nTedious  17% 25%  6% \nMissed development  12% 9%  6% \nLess monetary benefits  10% 9% 13%  \nFinding other\u2019s mistakes    23%  \nDetail oriented skills    17%  \n \nIII. DISC USSIONS  \nTesting offers tremendous learning opportunities as \nreported by professionals across the four countr ies. Barring \nIndian professionals, whose most voted PRO for testing being \nthinking jobs, professionals from the other three countries \nvoted that as the most common PRO. Indians professionals voted that as the second PRO. The Chinese professionals\u2019 \nsecond P RO, on the other han d, was easiness of jobs. Except \nCubans , other professionals also viewed the importance of \ntesting jobs as another PRO. The Cuban PROs were, barring \nlearning opportunities, different and included the suitability of \ntesting jobs for induc ting \u201cfreshers \u201d, proximity to customers, \nand an increase in commitment to software quality. We need to \nfurther investigate the reasons for such differences from the \nCuban contingent.  \n The most common de -motivators appeared to be the \nsecond -class citizen t reatment meted out to the testers and \ncomplexity resulting in  stress and frustration. Except  Indian \nprofessionals, others have concerns about career development \nand monetary benefits in testing tracks, and barring Cuban professionals, others were concerned  about tediousness and \nmissing development aspects of testing careers. Cuban professionals had different views and pointed out difficulties in \nfinding mistakes of others, requirement of detail oriented skills \nas CONs of testing career. In fact, \u2018 finding mi stakes \u2019 was the \nmost voted CON by the Cuban professionals.  IV. C\nONCLUSIONS  \n The general empirical findings on motivation to take up \nand continue with testing careers suggest that t esting jobs \nremain unattra ctive across the four countries . The treatment of \ntesting professionals as second -class citizen and complexities \nresulting in stressful and frustrating situations appear to be \ncommon de -motivators. Our discovery of motivators and de -\nmotivators for software testers  can help global  testin g \nmanagers and team lea ders who  are dealing with motivational \nproblems in prospective and current pr ofessionals in software \ntesting. As previously emphasized  [7], software testing is a \nhuman -dependent activity and the motivation of software \ntesters can impact  the quality of the final product and help \nguide industrial practitioners  to handle testing personnel issues  \nusing soft skills [8] . \n We have to recognize that the human factors are affecte d \nby psychological and  sociological factors  [9], and other \nenvironme ntal factors  such as  the organizational structure and \ninternal policies and processes  [10].  Practicing managers may \nbe able to attract larger numbers of professionals to testing \ncareers and retain the current testing professionals by \nunderstanding common, as well as country s pecific \nmotivational and de -motivational factors.  Finally, the testing \nprofession seems to be changing with the advent of Agile \nmethods, DevOps and other paradigms. For instance, Developer in Test is a new role in many companies and this \nrequires other com petences than that of a traditional tester from \ndecades ago. Similarly, test automation, security testing, etc, are different forms of this profession. These aspects should be \ntaken into account in the future.  \nR\nEFERENCES  \n[1] E. J. Weyuker, T. J. Ostrand, J. Br ophy, and R. Prasad, \"Clearing a \ncareer path for software tes ters,\" IEEE Software , 17(2): pp. 76 -82, 2000 . \n[2] R. E. S. Santos, C. Magalhaes, J. Correia- Neto, F. Q. B. Silva, and L. F. \nCapretz, \"Would you like to motivate software testers? Ask them how,\" \nin Em pirical Software En gineering and Measurement  (ESEM) , Toronto, \nCanada, pp. 95 -104, 2017 . \n[3] A. T. Deak, T. St\u00e5lhane, and G. Sindre \"Challenges and strategies for \nmotivating software testing personnel ,\" Information and Software \nTechnology, v ol. 73, pp. 1 -15, 2016.  \n[4] R. Florea and V. Stray, \u201cSoftware tester, we want to hire you! and \nanalysis of the demand for soft skills ,\u201d in J. Garb ajosa, X. Wang, A. \nAguiar, Eds.  Agile Processes in Software Engineering and Extreme \nProgramming, XP 2018 , LNBIP 31 4, Springer Open , pp. 54 -67, 2018 . \n[5] P. Waychal and  L. F. Capretz, \"Why a testing career is not the first \nchoice of engineers, \" 123rd Annual Conference  of the American Society \nfor Engineering Education , New Orleans , paper ID #14994 , 2016 . \n[6] L. Fern\u00e1ndez -Sanz , M. T. Villalba,  J. R. Hilera, and R. Lacuesta,  \n\"Factors with negative influence o n software testing practice in S pain: A \nsurvey ,\" Euro Conf.  on Softwar e Process Improvement , pp. 1 -12, 2009.  \n[7] S. Cruz, F. Q. da Silva, and L. F. Capretz, \"Forty years of resear ch on \npersonality in software engineering: A mapping study ,\u201d Computers in \nHuman Behavior, vol. 46, pp. 94 -113, 2015.  \n[8] F. Ahmed,  L.F. Capretz,  and P. Campbell,  \"Evaluating the demand for \nsoft skills in doftware development,\" IEEE IT Professional, 14(1):44 -49, \n2012.  \n[9] L. F. Capretz , D. Varona, and A Raza , \"Influence of personality types in \nsofware task choices ,\" Computers in Human Behavior, 52:6 -13, 2015.  \n[10] L. F. Capretz  and F. Ahmed, \"Making sesnse of software development \nand personality types ,\" IEEE IT Professi onal, 12(1):6 -13, 2010 . \n \n\n",
    "is_processed": true,
    "process_error": null,
    "content_length": 11658,
    "local_pdf_path": "data/pdfs/Studies on the Software Testing Profession_7fe062a5.pdf"
  },
  "arxiv_d2c3fe33fab4bbcd158ca684f9d8c8f3": {
    "title": "Identifying Emergent Leadership in OSS Projects Based on Communication Styles",
    "url": "http://arxiv.org/pdf/2201.11897v1",
    "source": "arxiv",
    "authors": [
      "Yuekai Huang",
      "Ye Yang",
      "Junjie Wang",
      "Wei Zheng",
      "Qing Wang"
    ],
    "published_date": "2022-01-28T02:20:44+00:00",
    "summary": "In open source software (OSS) communities, existing leadership indicators are\ndominantly measured by code contribution or community influence. Recent studies\non emergent leadership shed light on additional dimensions such as intellectual\nstimulation in collaborative communications. To that end, this paper proposes\nan automated approach, named iLead, to mine communication styles and identify\nemergent leadership behaviors in OSS communities, using issue comments data. We\nstart with the construction of 6 categories of leadership behaviors based on\nexisting leadership studies. Then, we manually label leadership behaviors in\n10,000 issue comments from 10 OSS projects, and extract 304 heuristic\nlinguistic patterns which represent different types of emergent leadership\nbehaviors in flexible and concise manners. Next, an automated algorithm is\ndeveloped to merge and consolidate different pattern sets extracted from\nmultiple projects into a final pattern ranking list, which can be applied for\nt...",
    "categories": [
      "cs.SE"
    ],
    "entry_id": "http://arxiv.org/abs/2201.11897v1",
    "meta": {
      "content_type": "academic_paper",
      "is_curated": true,
      "source_quality": 8
    },
    "content_type": "academic_paper",
    "text": "Identifying Emergent Leadership in OSS Projects Based on Communication\nStyles\nYUEKAI HUANG, Laboratory for Internet Software Technologies, Institute of Software Chinese Academy of Sciences;\nUniversity of Chinese Academy of Sciences, Beijing, China\nYE YANG\u2217,School of Systems and Enterprises, Stevens Institute of Technology, Hoboken, NJ, USA\nJUNJIE WANG\u2217,Laboratory for Internet Software Technologies, State Key Laboratory of Computer Sciences, Institute\nof Software Chinese Academy of Sciences; University of Chinese Academy of Sciences, Beijing, China\nWEI ZHENG, School of Business, Stevens Institute of Technology, Hoboken, NJ, USA\nQING WANG\u2217,Laboratory for Internet Software Technologies, State Key Laboratory of Computer Sciences, Institute\nof Software Chinese Academy of Sciences; University of Chinese Academy of Sciences, Beijing, China\nIn open source software (OSS) communities, existing leadership indicators are dominantly measured by code contribution or community\ninfluence. Recent studies on emergent leadership shed light on additional dimensions such as intellectual stimulation in collaborative\ncommunications. To that end, this paper proposes an automated approach, named iLead, to mine communication styles and identify\nemergent leadership behaviors in OSS communities, using issue comments data. We start with the construction of 6 categories of\nleadership behaviors based on existing leadership studies. Then, we manually label leadership behaviors in 10,000 issue comments\nfrom 10 OSS projects, and extract 304 heuristic linguistic patterns which represent different types of emergent leadership behaviors in\nflexible and concise manners. Next, an automated algorithm is developed to merge and consolidate different pattern sets extracted\nfrom multiple projects into a final pattern ranking list, which can be applied for the automatic leadership identification. The evaluation\nresults show that iLead can achieve a median precision of 0.82 and recall of 0.78, outperforming ten machine/deep learning baselines.\nTo demonstrate practical usefulness, we also conduct empirical analysis and human evaluation of the identified leadership behaviors\nfrom iLead. We argue that emergent leadership behaviors in issue discussion should be taken into consideration to broaden existing\nOSS leadership viewpoints. Practical insights on community building and leadership skill development are offered for OSS community\nand individual developers, respectively.\nCCS Concepts: \u2022Software and its engineering \u2192Open source model .\nAdditional Key Words and Phrases: Leadership, Communication style, Linguistic pattern, Open source software\n\u2217Corresponding author\nAuthors\u2019 addresses: Yuekai Huang, huangyuekai18@mails.ucas.ac.cn, Laboratory for Internet Software Technologies, Institute of Software Chinese\nAcademy of Sciences; University of Chinese Academy of Sciences, Beijing, China; Ye Yang, yyang4@stevens.edu, School of Systems and Enterprises,\nStevens Institute of Technology, Hoboken, NJ, USA; Junjie Wang, junjie@iscas.ac.cn, Laboratory for Internet Software Technologies, State Key Laboratory\nof Computer Sciences, Institute of Software Chinese Academy of Sciences; University of Chinese Academy of Sciences, Beijing, China; Wei Zheng,\nwzheng11@stevens.edu, School of Business, Stevens Institute of Technology, Hoboken, NJ, USA; Qing Wang, wq@iscas.ac.cn, Laboratory for Internet\nSoftware Technologies, State Key Laboratory of Computer Sciences, Institute of Software Chinese Academy of Sciences; University of Chinese Academy\nof Sciences, Beijing, China.\nPermission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not\nmade or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components\nof this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to\nredistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org.\n\u00a92021 Association for Computing Machinery.\nManuscript submitted to ACM\nManuscript submitted to ACM 1arXiv:2201.11897v1  [cs.SE]  28 Jan 2022\n\n2 Huang and Yang, et al.\nACM Reference Format:\nYuekai Huang, Ye Yang, Junjie Wang, Wei Zheng, and Qing Wang. 2021. Identifying Emergent Leadership in OSS Projects Based on\nCommunication Styles. J. ACM 37, 4, Article 111 (August 2021), 23 pages. https://doi.org/10.1145/xxxxxxx.xxxxxxx\n1 INTRODUCTION\nSteady influx of developer resource is key to healthy and sustainable OSS communities [ 4,27]. The presence of\ncommunity leaders, who both steer the development direction and motivate more developers to contribute is crucial to\nensure a successful outcome of an OSS project [ 39]. In addition, it is also reported that developer retention is highly\nassociated with the attention and treatment they receive in the project [ 31,59,70]. Therefore, it is an essential function\nfor an OSS community to effectively monitor and appropriately recognize developer contribution in timely and fair\nmanners.\nIn light of the importance of having leadership figures, many studies have investigated various developer leadership\nfactors across OSS communities. Most rely on metrics representing individuals\u2019 code contribution or community\ninfluence. Example metrics of code contribution include code size (e.g., #lines of code added/removed [ 44], #commits\n[5,16]), code structure (e.g., code instability [ 5]), code quality (e.g. #problems reported [ 44], #buggy commits [ 16]), or\ncode topics [ 41]. Example metrics of community influence include the number of followers (e.g., #followers [ 39,45])\nand influence on other developer\u2019s motivations [53].\nMost of today\u2019s OSS communities operate beneath an umbrella organization, while others are organized entirely\nindependently, and yet others follow a strategy somewhere in between [ 21]. Different OSS organizational forms\ncorrespond with different leadership structure and coordination strategies, which complicates the measurement of\nleadership effectiveness. As detailed in Section 2, we find that there is mismatch between these developers\u2019 contribution\nin issue discussion and their contributions measured by other dimensions such as code contribution or community\nfollowers. We conjecture that in OSS communities where development is highly autonomous, and explicit coordination\nand control are loose or non-existent, those who know how to communicate effectively with others will contribute\nmore in leading, coordinating, and influencing the development. This indicates the need of a new lens in identifying\nand recognizing OSS leadership behaviors corresponding to more effective and efficient issue resolution.\nTo bridge the gap, we start with constructing six categories of emergent leadership behaviors applicable to OSS\nprojects from existing leadership models [ 2,14,39,66,67,71]. These include proposal, redirection, confirmation, inquiry,\noperation, and volunteer (as show in Table 1). And then we propose an automated approach, named iLead, to mine\ncommunication styles and identify such emergent leadership behaviors in OSS communities, using issue comments\ndata. The construction of iLead consists of three steps. First, we carry out the data labelling process to identify the\ncategory of leadership per issue comment. Second, we adapt the definition of linguistic patterns in previous studies\n[17,40,58] and manually extract the heuristic linguistic patterns to express different types of communication styles in\nflexible and concise manners. Third, based on the two previous steps, we develop an automatic algorithm to merge and\nconsolidate different pattern sets extracted from multiple projects into a final pattern ranking list. When applying iLead\nfor leadership identification, the final pattern ranking list can be used to automatically match new issue comments\nand identify corresponding leadership behaviors. The evaluation is conducted on 10 popular OSS projects with 10,000\ncomments. Results show that iLead can achieve a median precision of 0.82 and recall of 0.78, outperforming ten\nmachine/deep learning baselines.\nTo demonstrate practical usefulness, we also conduct empirical analysis and human evaluation of the identified\nleadership behaviors with iLead. Results motivate the need for considering the emergent leadership behaviors in issue\nManuscript submitted to ACM\n\nIdentifying Emergent Leadership in OSS Projects Based on Communication Styles 3\ndiscussion to broaden existing OSS leadership viewpoints. Practical insights on community building and leadership skill\ndevelopment for OSS community developers are also discussed. To summarize, the main contributions of this paper are\nas follows:\n\u2022The construction of 6 categories of emergent leadership behaviors in OSS projects from issue comments data,\nadapting existing leadership models into OSS context. This is the first taxonomy of the emergent leadership\nbehaviors in issue discussions of OSS communities, which can motivate following-up studies in this direction.\n\u2022The development of iLead (with 304 defined linguistic patterns and pattern consolidation algorithm) to automati-\ncally identify emergent leadership behaviors in OSS projects from issue comments data. To our knowledge, this\nis the first study on automatic mining of emergent leadership behaviors in OSS issue discussion communications.\n\u2022The evaluation of iLead using 10,000 comments extracted from 10 popular OSS projects, achieving promising\nresults; and empirical study for revisiting the leadership landscape in OSS projects.\n\u2022Publicly accessible dataset and source code1to facilitate the replication of our study and its application in other\ncontexts.\n2 BACKGROUND AND MOTIVATION\n2.1 Leadership Models and Theories\nIt is important to note the difference between \u201cleadership\u201d and \u201cleader\u201d, in that leadership status is not necessarily\nbased on an OSS community position or designated authority, i.e., leader status [ 21,48,62]. Instead, leaders emerge\nand earn their status through incremental influences and contributions to OSS communities. In the context of this\nstudy, we adopt the Yukl\u2019s definition of leadership as \u201cinfluence exerted over other people to guide, structure, and\nfacilitate relationships in a group\u201d [ 65]. Existing work on leadership theories and styles can be largely categorized into\ntwo polarized yet important leadership styles: transformational and transnational, depending on followers\u2019 behavioral\nresponse [ 3]. Transformational leadership [ 12] requires leaders to work with followers to stimulate the enthusiasm\nof subordinates by creating a vision and motivation. Transactional leadership [ 29] is a kind of leadership behavior\npays more attention to organizational management and performance. However, both styles are more focusing on\ntraditional organizations with clear management hierarchy and team structure, which are not directly applicable to\nOSS communities.\nIn recent years, a number of new theories characterizing leadership in virtual teams were proposed, such as shared\nleadership [ 13,65] and emergent leadership [ 64]. Shared leadership [ 50] is a leadership mechanism existing in a team\nwith clear hierarchy, and it is a process in which individuals in the group influence each other and work together\ntowards the goal. Emergent leadership [ 64] is a spontaneous leadership mechanism as an emergent phenomenon that\ndevelops over time through group processes.\n2.2 OSS Community, Project and Developers\nAn OSS community is an ecosystem comprising of a set of closely-related OSS projects, which draws expertise and con-\ntributions from a pool of developers [ 33]. OSS developers usually assume certain roles by themselves according to their\npersonal interest, rather than being assigned a task by someone else [ 46]. This freedom in assuming roles/responsibilities,\nwhile significantly differing from traditional organizations, necessarily nurtures the open innovation that drives the\nsuccess of OSS. As examples of such open contribution, developers may invest effort on a specific OSS project instead of\n1https://github.com/20210827/iLead\nManuscript submitted to ACM\n\n4 Huang and Yang, et al.\nComments\nCommits                     Followers\nDev1 Dev2 Dev3\nFig. 1. Three example developers in atom\n0% 50% 50% 100%LD6LD5LD4LD3LD2LD1\nStrongly Disagree\nDisagree\nNeutralAgree\nStrongly Agree Fig. 2. Survey results\nothers, and he/she may choose to submit code contribution, or participate in issue discussions. As examples of developer\nimpact measures, the number of commits and the number of followers typically reflect a developer\u2019s relative influence\nin the OSS community. Consequently, an OSS developer\u2019s role in an OSS project may vary significantly based on his/her\ninterest, availability, and expertise. Nakakoji et. al. [ 46] proposed to classify OSS developers\u2019 roles into 8 types including\nproject leader, core member, active developer, peripheral developer, bug fixer, bug reporter, reader, and passive user.\nThe order implies the relative significance of their contribution. In addition, in measuring developer\u2019s contribution,\nthey usually play greater weight on the developer\u2019s code contribution [ 25,38], i.e., the number of commits, which is\nreadily accessible from OSS platforms such as GitHub or SourceForge.\n2.3 A Motivational Example\nTo explore differences among different leadership indicators, we compare three indicators, i.e., #commits, #followers, and\n#issue comments, across a set of contributing developers from the atom2OSS project. Figure 1 illustrates the comparison\nresults of three example developers. It is clear that developer Dev1 (id:1476) has the highest #commits and #followers\namong all three, followed by Dev2 (id:7910250) then Dev3 (ID:4525388). The first two developers, i.e., Dev1 andDev2 ,\nwill likely be considered as having greater contributions than the third one following existing leadership indicators\n[5,39,44,45] because they have more code contributions or have more followers. However, although developer Dev3\nhas less commits, he has actually published the most issue comments. Specifically, there are 267 comments made by\nDev3 , including the following examples:\n\u2022\u201cHave you tried safe mode? Try \u2013safe and see if the issue stops. \u201d\n\u2022\u201cWhat is your atom version?\u201d\n\u2022\u201cDuplicate of #1667\u201d\nThrough these communications, the developer Dev3 either provides alternative solution to the issue reporter, or\nasks clarification questions, or redirects the issue to other similar ones. These behaviors are actually representative of\nemergent leadership and managerial responsibilities, which are essential to facilitate collaborative discussion and issue\nresolution.\nTo further examine the differences of these indicators at project level, we rank all developers in atom by the number\nof comments and the number of commits, respectively, and compare the top 25% of the developers in the two rankings.\n2https://github.com/atom/atom\nManuscript submitted to ACM\n\nIdentifying Emergent Leadership in OSS Projects Based on Communication Styles 5\nNote that the number of followers is defined at the overall GitHub, therefore, we did not include it for the project level\ncomparison here. We find that large mismatch exists between these two lists. Specifically, 59% of developers on the two\nrankings are different, and those appearing in both rankings correspond with different orders as well. This indicates that\nexisting code commit metric might significantly underestimate the influences and contributions of many developers\nfrom issue discussion aspects. Besides, although the number of comments can represent the frequency of developer\u2019\nparticipation in issue discussion to a certain extent, it misses abundant semantic details reflecting underlying leadership\nbehaviors, as illustrated in the examples above. Therefore, this study is motivated to develop an effective approach to\nmine and identify such communication associated leadership, to offer a complimentary perspective to existing studies.\nAs an example, an OSS community can integrate our leadership identification tool with their issue tracking system,\nto monitor different leadership behaviors at a particular frequency. The metrics data can enable informed decisions such\nas understanding leadership dynamics and influences, recommending leadership styles for stimulating issue discussion,\nreflecting on leadership variation, etc.\n3 CATEGORIZING LEADERSHIP BEHAVIORS\nThis section presents a set of six categories of \u201cemergent leadership\u201d behaviors in collaborative issue discussion\nprocesses in OSS communities. Unlike previous studies on OSS leadership, we take a different approach in this study, by\nconsidering leadership as an influence process, not the totality of the behaviors of a particular developer. To that end,\nwe aim at examining leadership behavior at individual comment level, instead of at the developer level (e.g. measuring\nthe corpus of comments by a person). Such a conceptualization of leadership has two main advantages. First, it allows us\nto observe comment-level leadership behavior with finer granularity. Specifically, this enables us to examine immediate\nimpact of each leadership behavior on other developers (e.g., as demonstrated by responding comments from others)\nand contextual factors surrounding leadership influence process, such as stimulating downstream discussions, and/or\naccelerating issue resolution. Second, using these comment-level leadership behaviors would also allow us to aggregate\nbehaviors to the individual level. As OSS communities are constantly changing, more research is needed for aggregating\ncomment-level metrics at the individual/team level, with respect to particular usage scenarios.\nExisting leadership literature has offered many taxonomies of leadership behaviors. We build the six categories based\non reviewing transformational leadership [ 2], Yukl\u2019s comprehensive taxonomy [ 66,67], shared leadership[ 39], and\nemergent leadership[ 24]. The six leadership categories were adapted from 12 Yukl\u2019s comprehensive taxonomy [ 66,67]\naccording to the matching leadership functions in the OSS context, particularly for achieving the goal of efficient issue\nresolution. Table 1 summarizes these leadership categories with description and comment examples, along with the\nmapping with the 6 selected Yukl\u2019s categories [ 66,67]. The other 6 Yukl\u2019s categories concerns more on change-oriented,\nhierarchy and external components of leadership, which are not included in this study due to less relevance to the OSS\nissue discussion context. More specifically, the leadership included in this study is as follows:\nLD1 (Proposal). This category corresponds to the short-term planning category from Yukl\u2019s taxonomy, and refers\nto the idea proposal type of issue discussion, such as proposing ideas for resolving an issue, suggesting unexplored\nprocesses and resources to be explored. Issue discussion is an intelligence-intensive problem solving process, and LD1\ndiscussions usually shape potential issue resolution plans, and accelerate the issue resolution cycles. In addition, we\nbelieve it is also consistent with the intellectual stimulation/inspiration category in transformational leadership [ 2,47].\nLD2 (Redirection). This category corresponds to the supporting category from Yukl\u2019s taxonomy, and refers to\ncomments providing supportive information to redirect attentions to a new topic (e.g., concepts, processes, or resources)\nor to a more relevant information sources. Due to the open and interconnected nature of OSS communities, such topics\nManuscript submitted to ACM\n\n6 Huang and Yang, et al.\nTable 1. Categories of emergent leadership behaviors in OSS projects\nComment Type Description Examples Yukl\u2019s Mapping\nLD1 (Proposal) Propose a solution or alternative1. Try install Bitcoin Core 0.17.\n2. You could try to remove Homebrew\u2019s binutils.Planning\nLD2 (Redirection) Guide to other topics or places to discuss1. This is a duplicate of #17576.\n2. This should be an issue in ... repo.Supporting\nLD3 (Confirmation) Confirm an issue or opinion1. I agree with @sipa.\n2. Confirming that I got the same error on ...Recognizing\nLD4 (Inquiry) Ask for more information1. Where did you get the code from?\n2. What version of Boost are you using?Consulting\nLD5 (Operation) Suggest to close or reopen the issue report1. Going to close due to lack of information.\n2. It\u2019s just a workaround... plz reopen this.Monitoring operation\nLD6 (Volunteer) Voluntary acceptance of a task1. I would like to work on this.\n2. I will open a PR fixing this soon.Clarifying roles\nand information sources may be either internal (e.g., a related issue within the OSS project) or external (e.g., a site\noutside the OSS project).\nLD3 (Confirmation). This category corresponds to the recognizing category from Yukl\u2019s taxonomy, and refers to\nthe leadership function in confirming or reiterating an idea or opinion, which facilitates the consensus processes among\nmembers, through implicit voting or shaping shared perception among developers.\nLD4 (Inquiry). This category corresponds to the consulting category from Yukl\u2019s taxonomy, and refers to cases\nwhere developers ask for more clarification question about the issue being reported/discussed. Example follow-up\ninquiries include asking for specific project version info or issue reproduce steps. Such issue comments typically provide\nsome sort of confirmation to former opinions, and facilitate the issue discussion threads.\nLD5 (Operation) andLD6 (Volunteer) represent two distinct types of administrative functions during issue life\ncycle, corresponding to the monitoring and clarifying roles categories, respectively, from Yukl\u2019s taxonomy. LD5 refers\nto comments related to either closing or reopening an issue, and LD6 relates to volunteering in undertaking some\nwrap-up bug fixing actions, respectively.\nTo validate the representativeness of the 6 comment-level leadership categories, we design and conduct a survey to\ngather feedback from OSS developers. The main question asked is whether they agree that these categories capture\nthe relevant leadership behaviors which contribute to the issue discussion and resolution processes. We distribute the\nsurvey to the contributors of 10 popular projects (as shown in Table 2) on GitHub, and received 27 responses3. The\nresults, as shown in Figure 2, indicates that an average of 71% of developers believe that these six categories of leadership\nprovide a good representation of emergent leadership behaviors in OSS issue discussion communications. Furthermore,\neven the most controversial LD5 has no strong disagree, and the number of disagrees is only 26% (7/27). One possible\nreason for the disagreement on LD5 might be because developers tend to link leaders or leadership behaviors with\nmore technical contribution, while LD5 mostly deals with process monitoring and technical focused.\n4 APPROACH\nWhen developers explain something similar, they are likely to use recurrent textual expressions in their comments\n[63]. Existing studies frequently rely on such expressions to extract linguistic patterns in order to facilitate context\nunderstanding and task automation [ 17,40,49,58,69]. In this section, we present a novel approach, iLead, which\n3Due to space limit, we put the details of the survey on our project website.\nManuscript submitted to ACM\n\nIdentifying Emergent Leadership in OSS Projects Based on Communication Styles 7\nStep1: Manual Labelling\nLeadership\nLabelling\nFind Key \nElements\nInsert Patterns\nReorder Patterns\nPrune Patterns\nMatch Pattern \nin TurnNLP \nPreprocessing1 Step3: Patten Consolidation 3 Step2: Linguistic Patten Extraction 2 Step4: Leadership Identification 4\nProcess\n Loop Application N Construction N\nIssue\nComments\nLabelled \nData\nIdentified\nPatternsPattern \nRanking ListNew Issue\nComments\nIdentified \nLeadership\nDefined\nLeadership\nConvergence? N Y\nFind Key \nSentences\nFig. 3. iLead overview\nemploys a set of heuristic linguistic patterns to automatically mine developers\u2019 issue comments, and identify the\nemergent leadership behaviors (as described in Section 3).\nFigure 3 illustrates the overview of the iLead approach, consisting of four steps including: 1) Manual labelling of issue\ncomments, in order to establish ground truth of leadership labels (Section 4.1); 2) Extracting linguistic patterns specifying\nthe leadership behaviors from the comment in labelled data (Section 4.2); 3) Developing a pattern consolidating algorithm\nto reduce the penalty due to potential pattern over-fitting and over-loading (Section 4.3); 4) For new issue comments,\napplying the pattern ranking list output from the previous step ( Step 3 ) to identify the leadership behaviors of the issue\ncomments (Section 4.4).\n4.1 Manual Labelling\nIn this step, we will mark each issue comment with a corresponding leadership label (i.e., LD1, LD2, ..., or LD6), as\nintroduced in Section 3. Specifically, the first three authors individually label the same issue comments, then discuss\nand merge the results on each individual issue comment. The merged leadership labels serve as the ground truth in the\nlater steps, i.e., pattern consolidation and evaluation.\nTo ensure the validity of the manual labelling outcomes, we adopt a labelling process in the existing work [ 51],\nand the process includes four activities, i.e., defining a labelling schema, independently labelling by authors, group\nreviewing of individual labels, and building a final consensus corpus.\nSpecifically, the labelling schema is based on the six categories of emergent leadership behaviors, as mentioned in\nSection 3, plus an additional category (N) for comments not containing any leadership behaviors. A group discussion is\nconducted to ensure that everyone involved in labelling have a common understanding of these six leadership behaviors\nin open source issue discussion context.\nThen, each comment will be independently labelled by the first three authors and produce the label of a corresponding\nleadership behavior, or Nindicating no leadership behavior. The average Cohen\u2019s Kappa is 0.75 between each pair of\nannotators, indicating substantial agreement among the annotators.\nNext, a group meeting is held to review individual labelling results. When a discrepancy arises, each author involved\nin labelling provides rationale for his/her choice, and the group then discusses and reaches an agreement.\nFinally, after several rounds of discussions, agreements are reached for every comment and we get the final consensus\ncorpus.\nManuscript submitted to ACM\n\n8 Huang and Yang, et al.\nPattern: [AUX][you][ Inquiry_Verb ] (LD4)\nComment: Can you please post the test -suite.log.\nMatching:\n[AUX]   [you]   [ Inquiry_Verb :post|provide |\u2026] \n[Can]    [you]    please   [post]     the    test -suite.log.\nAUX    PRON   INTJ    VERB   DET      NOUN\nFig. 4. Example of leadership identification with pattern\n4.2 Linguistic Pattern Extraction\nThe second step is to manually extract linguistic patterns from the textual content of issue comment, which can be\nused for predicting each of the six leadership behaviors. For all comments with leadership labels (i.e., LD1 to LD6), we\nfirst extract the key sentence in the comments which determines it belonging to certain leadership behavior. Take the\nfollowing LD4 (Inquiry) comment as an example \u201cCan you provide more information? I\u2019ve just done a build of master\nusing the 64 bit Windows instructions and it\u2019s working correctly. \u201d The key sentence is \u201cCan you provide more information?\u201d ,\nsince the other sentences help little in identifying the leadership behaviors. After that, the more structured part of the\nsentence like \u201c...can...you...provide... \u201d will be identified and the linguistic pattern will be generated base on it. In this\nexample, a pattern containing three elements about \u201ccan\u201d ,\u201cyou\u201d and\u201cprovide\u201d will be extracted.\nThe patterns generated from the above process is relatively large, if only concrete word/phrase elements are\nconsidered. For example, \u201cCan you provide more information\u201d ,\u201cCould you give us the steps to reproduce\u201d ,\u201cWould you\nmind uploading the dockerfile\u201d and\u201cAre you sure you\u2019re not running master\u201d all have similar structures and belong to\nLD4 (Inquiry). Since the words are different, we get four patterns: \u201ccan you provide\u201d ,\u201ccould you give\u201d ,\u201cwould you mind\nuploading\u201d and\u201care you sure\u201d . This will lead to a huge pattern set, which is difficult to maintain.\nIn order to reduce the number of patterns, we follow the existing research [ 40,58] by considering not only words as\nelements of a patterns, but also the Part-of-Speech(POS) tag of the words, and use dictionary to represent a group of\nwords that have similar usage. For a pattern with Dictionary , it will be used as a template which means each word in\nthe dictionary can be applied to the corresponding positions and formulates a specific pattern. As a result, the four LD4\npatterns in the previous paragraph can be merge into \u201c[AUX(POS)] [you(word)] [Inquiry_Verb(Dictionary)]\u201d . This not\nonly reduces the total number of patterns, but also enables more sophisticated pattern matching. Figure 4 shows how\nthis pattern can be applied in leadership identification.\nTwo of the authors participate in the process and employ the open card sorting [ 54] during this process. Specifically,\nwe do not pre-define the relevant patterns and dictionaries. Each author extracts patterns independently on the collected\ndata and organize their corresponding pattern set. Then group meetings are conducted to discuss and merge the pattern\nsets. After that, the merged pattern set will be maintained by the authors together and each author can add new patterns\nto the set or refine existing patterns in their subsequent pattern extraction. Finally, we get a set of patterns that can be\nused to match comment and identify leadership. For a complete list of all linguistic patterns, please refer to our project\nwebsite on GitHub, and a total of 304 patterns are extracted for the follow-up leadership identification (see details in\nTable 3).\nManuscript submitted to ACM\n\nIdentifying Emergent Leadership in OSS Projects Based on Communication Styles 9\n4.3 Pattern Consolidation\nIn this step, we develop an iterative pattern consolidation algorithm to merge patterns extracted from individual projects,\nmonitor and tune the performance change of iLead against the newly merged pattern set in each iteration. This step is\nessential due to two main reasons: (1) patterns extracted from individual projects are at the risk of pattern over-fitting;\n(2) in cases that multiple patterns can be simultaneously applicable, appropriate priorities need to be assigned in order\nto avoid complexity and ambiguity caused by overloaded patterns. To address the pattern over-fitting and overloading\nissues, we develop an algorithm to automate the pattern merge and consolidation process. This algorithm consists\nof three sequential tasks (i.e., insert, reorder, and prune), and stops when the performance of iLead converges to a\nsatisfactory level. We will elaborate each of the three tasks next.\n4.3.1 Insert Patterns .This step takes two input: one is a target pattern ranking list (i.e., initially an empty list), and\nthe other is a new pattern set to be inserted into the target pattern ranking list.\nSpecifically, for each new pattern, the algorithm will iteratively examine the impact of merging it into the target\npattern ranking list, and only accept it when it positively contributes to the prediction performance of iLead. Following\nan existing study [ 40,58,69], we choose the F1-Score (mentioned in 5.4) as the performance metric. Specifically, the\nalgorithm will probe every candidate position in the pattern ranking list for inserting a new pattern, calculate the\nperformance of iLead in each probing, record the best performance and the corresponding optimal insertion position.\nAs a result, a new pattern will only be inserted into the merged list if it positively contributes to the performance of\niLead, and the optimal position is the one corresponds to the best performance. Otherwise, the new pattern will be\ndiscarded and will not be merged into the pattern ranking list.\n4.3.2 Reorder Patterns .We observe that, after the previous merging process, some issue comments may be incorrectly\nidentified according to a loosely relevant pattern with a higher priority, while a more relevant pattern is ranked lower\nin the list and never be applied. To address this, the algorithm reorders the ranking of patterns by examining these\nincorrectly labelled comments, to promote the overall performance on the whole dataset. The ranking update is\nconducted iteratively and dynamically in terms of each incorrectly labelled comment by current pattern ranking list.\nIn detail, for an incorrectly labelled comment (the comment mislabelled by the current pattern ranking list), we\ndefine the highest ranking pattern which correctly labels it as realwinner , while the patterns which incorrectly match it\nand higher than realwinner as the fakewinners . Iffakewinners list is not empty, algorithm will try the ranking update.\nSpecifically, algorithm will insert the realwinner ahead of the fakewinners in the pattern ranking list, and examine the\nleadership labelling performance on the whole dataset (i.e., F1-Score in Section 5.4). If the performance increases with\nthis new pattern ranking list, the update is accepted and the current pattern ranking list will change to the new pattern\nranking list. Then the algorithm iterates with the next incorrectly labelled comment found by the current pattern\nranking list until it remains unchanged. As a result, we obtain the updated pattern ranking list which will be used next.\n4.3.3 Prune Patterns .During this task, the algorithm will identify excessive patterns whose existance negatively\ncontributes to the performance of iLead. Similar to the previous task, the pattern pruning is conducted iteratively and\ndynamically by examining each incorrectly labelled comment.\nIn detail, for each incorrectly labelled comment, the algorithm first detects the realwinner (i.e., the highestly ranked\npattern which is able to correctly label the comment), as well as all fakewinners (i.e., the patterns which incorrectly\nmatch the comment and higher than realwinner ). After that, the algorithm will remove the fakewinners in the pattern\nManuscript submitted to ACM\n\n10 Huang and Yang, et al.\nranking list, and accept the update if the performance (i.e., F1-Score in Section 5.4) increases. Then the algorithm iterates\nwith the next incorrectly labelled comment found by the refined pattern ranking list until it remains unchanged.\nAfter that, we will obtain the pattern ranking list and if the patterns from a new project need to be added, the\nalgorithm will start executing from Insert Patterns again and use this list as the input (instead of the original empty list).\n4.4 Leadership Identification\nAfter completing the construction of pattern ranking list, we can use it to identify leadership behaviors. Specifically, for\na new issue comment, iLead first preprocesses it to get the words and the Part-of-Speech (POS) tags. Then, it matches\nthe preprocessed data with element(s) specified in a given pattern. We employ the following two distance constraints\nbetween elements, adapted from existing study [ 57], to promote the performance of leadership identification. The\nfirst constraint is that the latter matched element cannot appear before the prior matched element, since the pattern\nis extracted by traversing the words in sequence. The second constraint is that the distance between two matched\nelements should be no more than three, which is to avoid the mismatch of patterns since the leadership behaviors are\nusually expressed in a concise way. iLead will automatically match the comment with the patterns in the list in order,\nand following existing study [ 58], we choose the highest priority strategy which means the leadership of the comment\nis identified by the first matched pattern.\n5 EXPERIMENT DESIGN\n5.1 Research Questions\nTo evaluate the proposed approach, we answer the following three research questions:\n\u2022RQ1 (Performance Convergence) When can the generated linguistic patterns reach the state of convergence?\n\u2022RQ2 (Performance Evaluation) How effective is iLead in leadership identification on new projects?\n\u2022RQ3 (Baseline Comparison) Can iLead outperform other techniques in leadership identification?\n5.2 Subject Projects\nWe collect 10 popular open source software projects from GitHub for evaluation. The projects are selected with the\nfollowing criteria: (1) Popularity: with 10k+ stars and 1.5K+ forks; (2) Activeness: regularly updated within 1 month of\nthe data collection date; (3) Diversity: representing different OSS organizational structures from various domains. A\nbrief summary of the experimental projects are summarized in Table 2.\nFor the experimental projects, we use the GitHub\u2019s REST APIs to crawl the issues and related comments4. We only\ncrawl the comments of closed issues since they represent the complete issue life-cycle. In addition, since it is our interest\nto compare the emergent leadership behaviors with traditional leadership indicators, we also extract two indicators\nat the developer level: the number of commits and the number of followers. For each project, we randomly sample a\nportion of issues and obtain 1,000 related comments (in Table 2), and conduct manual labelling, as introduced in Section\n4.1. The overview for the ground truth of the leadership labels is shown in Table 2.\n5.3 Data Pre-processing\nWe observe that some developers would refer to the previous comments in their own comments. The referenced\ndescriptions may contain another developer\u2019s leadership, and should be removed to reduce potential noise leading to\n4The data is crawled between July 2020 and February 2021.\nManuscript submitted to ACM\n\n",
    "is_processed": true,
    "process_error": null,
    "content_length": 38086,
    "local_pdf_path": "data/pdfs/Identifying Emergent Leadership in OSS Projects Based on Communication Styles_f9d8c8f3.pdf"
  },
  "arxiv_204dcec221df4c536b5112f63c3636dc": {
    "title": "What Makes Effective Leadership in Agile Software Development Teams?",
    "url": "http://arxiv.org/pdf/2201.08058v1",
    "source": "arxiv",
    "authors": [
      "Lucas Gren",
      "Paul Ralph"
    ],
    "published_date": "2022-01-20T08:47:57+00:00",
    "summary": "Effective leadership is one of the key drivers of business and project\nsuccess, and one of the most active areas of management research. But how does\nleadership work in agile software development, which emphasizes self-management\nand self-organization and marginalizes traditional leadership roles? To find\nout, this study examines agile leadership from the perspective of thirteen\nprofessionals who identify as agile leaders, in different roles, at ten\ndifferent software development companies of varying sizes. Data from\nsemi-structured interviews reveals that leadership: (1) is dynamically shared\namong team members; (2) engenders a sense of belonging to the team; and (3)\ninvolves balancing competing organizational cultures (e.g. balancing the new\nagile culture with the old milestone-driven culture). In other words, agile\nleadership is a property of a team, not a role, and effectiveness depends on\nagile team members' identifying with the team, accepting responsibility, and\nbeing sensitive ...",
    "categories": [
      "cs.SE"
    ],
    "entry_id": "http://arxiv.org/abs/2201.08058v1",
    "meta": {
      "content_type": "academic_paper",
      "is_curated": true,
      "source_quality": 8
    },
    "content_type": "academic_paper",
    "text": "What Makes Effective Leadership in\nAgile Software Development Teams?\nLucas Gren\nVolvo Cars and Chalmers |University of Gothenburg\nGothenburg, Sweden\nBlekinge Institute of Technology\nKarlskrona, Sweden\nlucas.gren@lucasgren.comPaul Ralph\nDalhousie University\nHalifax, Canada\npaulralph@dal.ca\nABSTRACT\nEffective leadership is one of the key drivers of business and\nproject success, and one of the most active areas of man-\nagement research. But how does leadership work in agile\nsoftware development, which emphasizes self-management\nand self-organization and marginalizes traditional leadership\nroles? To find out, this study examines agile leadership from\nthe perspective of thirteen professionals who identify as agile\nleaders, in different roles, at ten different software develop-\nment companies of varying sizes. Data from semi-structured\ninterviews reveals that leadership: (1) is dynamically shared\namong team members; (2) engenders a sense of belonging\nto the team; and (3) involves balancing competing organiza-\ntional cultures (e.g. balancing the new agile culture with the\nold milestone-driven culture). In other words, agile leadership\nis a property of a team, not a role, and effectiveness depends\non agile team members\u2019 identifying with the team, accepting\nresponsibility, and being sensitive to cultural conflict.\nCCS CONCEPTS\n\u2022Softwareanditsengineering \u2192Agilesoftwaredevelopment ;\nProgramming teams .\nKEYWORDS\nagile methods, leadership, management, culture\nACM Reference Format:\nLucas Gren and Paul Ralph. 2022. What Makes Effective Lead-\nership in Agile Software Development Teams? . In44th Interna-\ntional Conference on Software Engineering (ICSE \u201922), May\n21\u201329, 2022, Pittsburgh, PA, USA. ACM, New York, NY, USA,\n13 pages. https://doi.org/10.1145/3510003.3510100\nPermission to make digital or hard copies of part or all of this work\nfor personal or classroom use is granted without fee provided that\ncopies are not made or distributed for profit or commercial advantage\nand that copies bear this notice and the full citation on the first page.\nCopyrights for third-party components of this work must be honored.\nFor all other uses, contact the owner/author(s).\nICSE \u201922, May 21\u201329, 2022, Pittsburgh, PA, USA\n\u00a92022 Copyright held by the owner/author(s).\nACM ISBN 978-1-4503-9221-1/22/05.\nhttps://doi.org/10.1145/3510003.35101001 INTRODUCTION\nLeadership is one of the key drivers of organizational and\nproject success [ 8]. However, agile software development in-\nvolves a cultural change [cf. 40,73] that flattens the organi-\nzational hierarchy, de-emphasizes managers and empowers\nteams [51]. One might therefore wonder whether there is\nleadership in agile teams at all.\nHowever, management is different from leadership. \u201cLead-\nership [involves] the articulation of an organizational vision,\nintroduction of major organizational change, providing in-\nspiration, and dealing with highly stressful and troublesome\naspects of the external environments of organizations\u201d [ 37, p.\n444]. In contrast, \u201cManagement consists of implementing the\nvision and strategy provided by leaders, coordinating and\nstaffing the components of organizations, administering the\ninfrastructures of organizations, and handling the day-to-day\nproblems that inevitably emerge in the process of strategy\nand policy implementation and ongoing organizational func-\ntioning\u201d [37, p. 445].\nPut more simply, \u201cleadership is getting group members to\nachieve the group\u2019s goals\u201d [ 35, p. 315]. Leadership is a kind\nof work. Even in self-organized and self-managed agile teams,\nsomeone is doing leadership. Indeed, many team members\ncan dynamically share the leadership work of driving the\nteam toward its goals.\nResearch on leadership in software engineering is scarce.\nOne notable exception is Kalliamvakou et al.\u2019s study of Mi-\ncrosoft managers, which concluded that \u201cwe still don\u2019t know\nwhat to look for in a great software engineering manager,\nand how to further develop their skills to support the teams\nthey manage\u201d [ 43]. A recent systematic review concluded\nthat \u201cagile leadership research needs further attention and\nthat more empirical studies are needed to better understand\nagile leadership in general\u201d [ 50]. This motivates the following\nresearch question.\nResearch question: What is the nature of leadership in\nagile software development, from the perspective of pro-\nfessionals who identify as agile leaders?\nHere, agile software development refers to both the ide-\nology laid out in the agile manifesto [ 21] and the specific\nmethodologies and practices that embody that ideology (e.g.\nExtreme Programming [ 9], Scrum [ 63], Dual-Track Develop-\nment [65]).arXiv:2201.08058v1  [cs.SE]  20 Jan 2022\n\nICSE \u201922, May 21\u201329, 2022, Pittsburgh, PA, USA Lucas Gren and Paul Ralph\nTable 1: Participant Information\nPID Org. Industry Employees Role Prior Method Reason for agile\nA1 A Consumer pack-\naged goods26,000 Agile coach Waterfall Engagement, job satisfac-\ntion, and quality\nB1 B Retail business 16,000 Project manager lead Waterfall Improve business value\nC1 C Automatic identi-\nfication/data cap-\nture1,800Project portfolio management re-\nsponsibleAd hoc process Project priorities not per-\nsonal interest\nD1 D Industrial supply\ndistribution18,400 Project Manager (initiator of ag-\nile).Waterfall Innovation in value delivery\nE1 E Personal care 56,000 Team leader sales and distr. Waterfall Improve the company\nE2 E Personal care 56,000 Lead of 25 project managers Waterfall Improve the company\nF1 F Oil and gas 82,000 Project manager (project execu-\ntion)Waterfall Read about agile methods\nG1 G Software 74,400 Scrum Master/Project Manager Started agile Speed\nG2 G Software 74,400 Scrum Master of two teams Started agile Speed\nG3 G Software 74,400 Scrum Master Started agile Speed\nH1 H Online media and\nsocial networking5,000Scrum Master/manager in first\nagile teamA culture of guessing\nwhat users likedBetter and faster feedback/\nsolve org. problem\nI1 I Training and edu-\ncation100 Multi-type supporting role Similar to agile Started as agile\nJ1 J Software consul-\ntancy35 Founder Agile principles with\nflat org. structureStarted as agile\nTo address this research question, we conducted a qualita-\ntive survey (a series of interviews) of thirteen self-described\nagile leaders from ten different organizations (see Section 2).\nSection 3 presents our findings. Next, we describe existing re-\nsearch related to our findings (Section 4), and then integrate\nour findings with this work (Section 5). Section 6 describes\nthe study\u2019s limitations and Section 7 concludes the paper\nwith some thoughts on future work.\n2 METHOD\nThis section explains our approaches to data collection and\nanalysis. Since our research question concerns the perspec-\ntives of agile leaders, we employ a qualitative survey [ 59]\ntargeting professionals who identify as agile leaders.\n2.1 Participants\nThe first author approached industry contacts\u2014with whom\nhe had no direct relationship or conflict of interest\u2014to recruit\nparticipants who identify as agile leaders (e.g., Scrum Mas-\nters, founders, agile coaches, and various project managers).\nWe focused on agile leaders rather than other professionals\nbecause we wanted to understand the leaders\u2019 perspective.\nOf course, comparing the leaders\u2019 perspective with software\nprofessionals who explicitly do not identify as leaders is a\npotential extension. We also wanted participants of different\nages, from both small and large companies, and from differ-\nent countries, to maximize sample diversity\u2014a key aspect\nof representativeness [ 7]. Moreover, we want to investigate\ncomponents of agile leadership that are similar across these\ncontextual characteristics.\nMoreformally,therecruitmentcriteriawere:(1)Employees\nwho identify as agile leaders, (2) Companies of different size,(3) Mix of age and gender, and (4) Mix of countries and\nnational cultures.\nNine men and four women between 25- and 50-years-old\nparticipated. Six participants were located in the USA, three\nin Brazil, two in Germany, one in the UK, and one in Tunisia.\nAll participants indicated that their teams use an agile ap-\nproach. Participants roles, industries, organization sizes and\nmethodological contexts varied (see Table 1). SAP America\nInc. mediated some of the contacts to the companies; four of\nthe participants were working on Agile SAP implementations,\nmeaning that they use agile methods in customizing an SAP\nproduct for an organization [ 61]. All four also worked on\nother, non-SAP projects.\n2.2 Data Collection\nThe first author completed 13, 45\u201390 minute, semi-structured\ninterviews:tenviateleconference;threeface-to-face.Hebegan\nby introducing himself and the project, getting permission\nto record the interview and emphasizing how participants\u2019\nidentities would be protected. The complete interview guide\nis available in Supplementary Material (see Data Availability).\nAll interviews were transcribed word-for-word.\n2.3 Data Analysis\nThe data was analyzed using ATLAS.ti1following the steps\nrecommended by Braun et al. [11]:\n(1) read each transcript\n(2)highlight all statements broadly related to concept\nunder investigation (i.e. leadership in this case)\n(3) sort the highlighted statements into categories\n(4) name each category\n1https://atlasti.com/\n\nWhat Makes Effective Leadership in Agile Software Development Teams? ICSE \u201922, May 21\u201329, 2022, Pittsburgh, PA, USA\n(5)for each category, re-read all of its statements together;\nreassess category cohesion and name\nThe first author began by reading all the transcripts and\ntagging all quotations related to leadership in Atlas.ti\u2014176\nin all. Next, quotations were grouped into categories and the\ncategories were iteratively refined.\nWe applied the two concepts of saturation as described by\nAldiabat and Navenec [ 1], i.e.,codeandmeaning saturation.\nWe recognized codesaturation when no new codes emerged\nfrom the last few interviews. After this step, the second au-\nthor audited the categories for coherence. The categories were\nthen revisited and rephrased again. We recognized meaning\nsaturation when we understood our themes well enough to\nsee their relationship to existing theories in social psychol-\nogy (described in Section 4). We then integrated our cate-\ngories back into existing theories (see Section 5). The three\nthemes described next emerged from this synthesis of our\ncategories with existing research. Tables showing examples\nfor all emerging themes and categories are included in Sup-\nplementary Material (see Data Availability). Two categories\u2014\n\u201ccommunication\u201d and \u201cstaffing problems\u201d\u2014were dropped as\nout of scope for this paper. The reason they were out of scope\nwas that the participants who mentioned communication\nand staffing problems discussed them as general issues, not\ndirectly related to effective agile leadership.\n3 FINDINGS\nFigure 1 and Table 2 summarize our findings. Briefly, agile\nleadership comprises three dimensions: dynamic team leader-\nship,social identity andorganizational culture .\nIn other words, we found that agile teams:\n(1)share leadership work rather than having an individ-\nual leader;\n(2)build a sense of belonging and common purpose\nacross and within organizational functions;\n(3)adapt their processes to the different cultures which\nexist simultaneously within a single organization.\n3.1 Dynamic Team Leadership\nTen out of thirteen interviewees highlighted that agile team\nleadership is only effective when it is shared by the team. All\nthe interviewees saw themselves as an active part of obtaining\na shared-leadership dynamic.\n3.1.1 Have Team Members that Take Initiative and Respon-\nsibility.Interviewees emphasized having a team where ev-\nerybody could take initiative. One interviewee stated that\nhigh-performing individuals do not make good agile team\nmembers because teamwork skills are more important than\nindividual performance. Interviewees also described how team\nmembers who were \u201cinitiators\u201d could enroll others in leader-\nship efforts and help make shared leadership a team norm.\nAnother interviewee stressed how a single team member\ncould ruin the team\u2019s effectiveness due to passiveness and\nnot being able to create an active work-mode. This finding\nmirrors prior research on dysfunctional teams [19].Intervieweesfeltthatcomplainingwasnotnecessarilydetri-\nmental to the team\u2019s effectiveness as long as the team mem-\nbers felt like they were in charge of making a change for the\nbetter. Complaining seems more infectious and destructive if\nteams do not have autonomy because they tend to complain\nabout factors beyond their control.\nOne interviewee explained that teams need some sort of\nleadership, whether or not they are agile, to solve problems\neffectively. This interviewee saw the positive effects of having\nall team members be leaders somehow but also stressed that\nmany people in industry are used to having managers that\nassume responsibility for project failures. Getting people to\nthink differently about leadership as shared was therefore\nchallenging. Interviewees\u2019 perspectives on shared leadership\nare complicated by the inability to divide projects neatly into\nagile vs. plan-driven\u2014some officially plan-driven projects\nwere described as being quite agile and vice versa.\nThe interviewees also stressed that there was often a differ-\nence in that agile methods have more onerous expectations\nfor all team members doing leadership work than plan-driven\nmethods. One interviewee was skeptical that agile is good for\nall projects because agile methods assume that team mem-\nbers are willing to accept responsibility, take initiative, and\nmake decisions.\nPeople with a mindset of doing leadership themselves ap-\npear to focus more on agile principles and less on imple-\nmenting user stories as quickly as possible. Teams with such\nmembers focused more on being collaborative, self-organized,\nand seemed more passionate about their work.\nAnother interviewee attributed the team members\u2019 active\nparticipation in driving the teamwork to the agile approach\nto projects. The motivation to lead was therefore not only\nan a priori property of individual team members but also\nan emerging team norm. The interviewee emphasized this\ndistinction because it implies that it is possible to activate\nleadership behavior by setting other group norms [72].\n3.1.2 Let Team Members Lead. Having members who want\nto take initiative is necessary but insufficient. Eight inter-\nviewees indicated that more traditional forms of leadership\n(i.e. managers) surrounding a team could undermine self-\nleadership. Teams were described as needing to feel heard\nand autonomy not only for technical or engineering practices\nbut also for team improvements and other organizational\nissues.\nAnother key skill that surfaced was a leader\u2019s ability to\ntake a step back when leadership can be shared. This was\ndescribed as being tricky because guidance was often needed\nearly on and it could be difficult to spot when an individual\nor a team is ready for increased responsibility. One interview\nexplained that, especially when leadership is a formal role,\nthe people in that role need to actively avoid taking over\nthe leadership of the team. Some interviewees believe that\nstrong, formal leadership roles prevent self-organization and\nshared leadership.\nIt was sometimes unclear to interviewees whether individ-\nual leadership remained because it was needed, or for other\n\nICSE \u201922, May 21\u201329, 2022, Pittsburgh, PA, USA Lucas Gren and Paul Ralph\nEffective \nAgile \nLeadership\nHave \nteam \nmembers \nthat \ntake \ninitiative \nand \nresponsibility\nLet \nteam \nmembers \nlead\nStep \nin, \nif \nneeded\nBuild \na \nstrong \nsocial \nidentity \nacross \nfunctions\nCreate \nan \nIT \nand \nbusiness/customer \npartnership\nBuild \na \nstrong \nteam \nidentity\nTailored \napproach\nUnderstand \nthe \ncompany \necosystem\nAdapt \nto \ncustomer \nculture\nAdjust \n\"old\" \nbehavior\nAggregation:\n\"is \npart \nof\"\nLegend:\nSocial \nIdentity\nDynamic \nTeam \nLeadership\nOrganizational \nCulture\nFigure 1: Components of effective leadership in agile software development teams.\nreasons. One interviewee described a situation where their\nteam\u2019s effectiveness was reduced by the manager\u2019s unwilling-\nness to share leadership. Another stressed that leadership,\nwhen not shared, can become destructive.\n3.1.3 Step In, If Needed. Two of the interviewees explicitly\nstated that, even if they strove for self-organization, an ex-\nperienced supervisor sometimes needed to intervene. One\nperson described this as being valued by the teams because\nthe ways in which the supervisor could intervene were clear.\nThe other interviewee expressed frustration in having to help\nteams make better decisions. They felt that the team should\nbe ready to accept responsibility faster, but were not, and\ntherefore tried to help. Having the support of a senior em-\nployee was also described as helpful since team members\ncould validate issues with that person before feeding the\nissues back to the team itself.\n3.2 Social Identity\nOf the ten organizations where our interviewees work, or-\nganizations G, I, and J, embraced agile methods from their\nfounding. In contrast, organizations A\u2013F and H are large\ncompanies with a long history of milestone-driven software\nprojects. They were organized around strong functional silos\n(e.g. marketing, production, software development, account-\ning & finance). Many participants were therefore leading\ntransitions from a functional organizational hierarchy to a\nproject-based organization, or leading cross-functional agileteams within companies that were organized around organi-\nzational functions.2\nAll of the participants viewed cross-functional teams with\nhigh levels of team spirit as advantageous because it helps\nmore employees take responsibility. The participants ex-\nplained that they obtained higher levels of team spirit, not\nonly for their own work context and field of expertise but also\nfor other important organizational functions (e.g. finance).\nNone of the participants used the term \u201csocial identity\u201d;\nhowever, they all discussed consolidating, stabilizing, and\nanchoring different social categories (e.g. business people, de-\nvelopers, testers). A person\u2019s social identity is the collection\nof social categories with which that person identifies [36].\n3.2.1 Build a Strong Social Identity Across Functions. One of\nthe most highlighted benefits of agile software development\nis increased team spirit; that is a greater sense of team-\nbelonging and social cohesion. One interviewee explained\nhow, as members come together from different functional\nbackgrounds, a strong sense of team spirit (i.e. feelings of\nbelonging) helps them on-board, integrate with the team and\nbegin contributing. As team membership becomes part of\nthe new team member\u2019s social identity, they are more willing\nto accept responsibility and do leadership work.\nAnother participant highlighted that a separation of roles\nwithin the team decreased team cohesion. They therefore\nfocused on getting team members to realize the value of\nsharing all aspects of software delivery instead of focusing on\n2Throughout this paper, \u201cfunctions\u201d refers to organizational functions\n(e.g. marketing, accounting).\n\nWhat Makes Effective Leadership in Agile Software Development Teams? ICSE \u201922, May 21\u201329, 2022, Pittsburgh, PA, USA\nTable 2: Overview of Themes and Categories with Example Quotations\nTheme Category Examples of supporting quotations\nDynamic\nteam\nleadershipHave team members\nthat take initiative\nand responsibility\u201cAnother guy said, \u2018well you won\u2019t have the time, so I\u2019m the Scrum Master now\u2019 and that was it ...they\ndon\u2019t see the Scrum Master as a person, they see it as a role that they all can take.\u201d (Participant I1)\n\u201cTeams that are doing it right ...are really thinking about being collaborative and self-organized and\nall those things. They become passionate about it and really want to do more of it.\u201d (Participant C1)\nLet team members\nlead\u201cI guess we were just really lucky with the team members we had. This was basically also my objective;\ncareful! Don\u2019t become a project manager, don\u2019t start planning stuff, don\u2019t start assigning or defining\ntasks. Stay out of that!\u201d (Participant G3)\n\u201cThere are teams that have a strong leader, and there the problem is another one which is this whole\nidea of having someone telling everybody what to do. For me, it\u2019s the leadership will make it the best\nor the worst.\u201d (Participant J)\nStep in, if needed \u201cMost of the time we have to interfere as leaders in order to help the team come together and make a\nbetter decision.\u201d (Participant J1)\n\u201cI could [force the teams to try a practice]. And I did. ...And if they don\u2019t like it, they\u2019re free to go\nback to the old one.\u201d (Participant I1)\nSocial iden-\ntityBuild a strong social\nidentity across func-\ntions\u201cA new resource from finance for example didn\u2019t used to have much to do with the other functions.\nNow with these meetings and planning, they are all one team working together and cheer each other\u2019s\naspects.\u201d (Participant F1)\n\u201cIt\u2019s very easy to see that, well, \u2018my part in the project is just coding,\u2019 but that\u2019s not quite true. They\n[the team] get less cohesive by having a clear separation of roles.\u201d (Participant H)\nCreate an IT and\nbusiness/customer\npartnership\u201cThe business partnership and engagement you create is absolutely tremendous compared to the\ntraditional approach!\u201d (Participant B1)\n\u201cSo they can again, work to be a part of and share the accountability [in agile]. I mean, for a whole\nvariety of reasons that involvement of the business partner as a part of the team, not them versus us.\u201d\n(Participant D)\nBuild a strong team\nidentity\u201cIt\u2019s interesting because when we deploy software in the middle of the day, the [people] here actually\ncall the other units and say \u2018ok, we\u2019re stopping the software for a couple of minutes for deploying.\u2019 So\nthen everyone stops. We could do a night deploy, but we prefer to do that.\u201d (Participant H1)\n\u201cThe Scrum part takes between seven to ten minutes. Then it takes another five to ten minutes to fill\nout the time, and it\u2019s in the spreadsheet, so then I got to the tab that shows the burn down. People\nwait for that! Like: \u2018Oooh let\u2019s see what the burn-down is today!\u2019 And then the third part is just an\nopen forum, an open meeting, and people sort of take care of things that will only take a short amount\nof time to discuss.\u201d (Participant G1)\nOrganizational\ncultureTailored approach \u201cI have a kind of waterfall-like representation of our sprints and the main milestones and I show that to\nthem. But then I just take care of all the requirements from the organization, you know, at a higher\nlevel. The team doesn\u2019t have to worry about that stuff.\u201d (Participant G1)\n\u201cWhat one individual pilot project starts to practice, you always have difficulty scaling that, because\nthat\u2019s what they were doing and got really good at doing exactly that specific to that project. But\nthat\u2019s not necessarily well translated into practice format across the enterprise. That needs to be more\nof the fundamentals and the process behind it.\u201d(Participant A1)\nUnderstanding the\ncompany ecosystem\u201cIf you haven\u2019t brought those people along in your agile journey, then subsequently you will have that\nhurdle to overcome because of the different culture and behaviors.\u201d (Participant D1)\n\u201cTo some people it\u2019s a subtle difference and they sometimes have a hard time grasping why we don\u2019t\njust have one list for finance, one list for sales, ops, etc. But it has been a key drive for us since we have\nshared resources, to have one cross-functional list.\u201d (Participant F1)\nAdapt to customer\nculture\u201cOften, they don\u2019t want changes as often as we could deliver them.\u201d (Participant C1)\n\u201cWe used to work mostly with start-up companies, and with start-up companies, that\u2019s a big discussion\nbecause, with a tight budget, why would you have 17 layers of tests?\u201d (Participant J1)\nAdjust \u201cold\u201d behav-\nior\u201cAllowing the team to become a high performance team without the problem of having a lot of politics\ninvolved in the execution of the project.\u201d (Participant E2)\n\u201cWaterfall approach provides some very familiar and comfortable handrails, called milestones, which\neverybody grasps and clings to for life.\u201d (Participant G1)\n\u2018\ntheir individual expertise. By sharing in different tasks, team\nmembers expanded their social identity to include belonging\nto a team that was defined by its goal, rather than its roles.\n3.2.2 CreateanITandBusiness/CustomerPartnership. Moreso\nthan previous approaches, agile software development focuses\non social identities. Transitioning to agile necessitates defin-\ning one\u2019s work identity based on social categories other than\nroles. In other words, agilists are supposed to identify with\ntheir cross-functional team instead of, or at least in addition\nto, their role. For example, employees should say \u2018I\u2019m part\nof theMass Effect team,\u2019 or \u2018I\u2019m on project Urithiru\u2019 not\u2018I\u2019m a front-end developer\u2019 or \u2018I\u2019m a requirements analyst\u2019.\nInterviewees consistently described how their teams obtained\na common social identity by sitting and working together.\nParticipants emphasized how leaders expanded their team\nmembers\u2019 responsibilities by communicating who was re-\nsponsible for what. One participant described attempting to\nenroll customers into the team\u2019s shared identity. They felt\nthat projects in which customers and developers felt like they\nwere on the same team were more successful.\nTwoparticipantsdescribedcaseswhentheydidnotsucceed\nin creating a common social identity with business people or\nother external customers. Such situations were described as\n\nICSE \u201922, May 21\u201329, 2022, Pittsburgh, PA, USA Lucas Gren and Paul Ralph\nleading to team members not feeling prioritized or sharing\naccountability for the work being done.\n3.2.3 Build a Strong Team Identity. Social identity building\nwithin the teams was also described as important. All practi-\ntioners highlighted the importance of the social ceremonies\n(oftentakenfromagileceremonieslikearetrospectivemeeting\nor daily stand-ups [ 67]) in creating a shared social category\nthat became a part of the individuals\u2019 social identity. One\nparticipant described a ceremony that was possible to con-\nduct more efficiently, but the team preferred deploying code\nin the middle of the day so that everyone could get together\nand get an important sense of belonging in the team.\nBuilding a strong and common social identity was also\ndescribed as being easier for co-located teams, which is consis-\ntentwithpriorresearch[ 44].Twooftheparticipantsdescribed\nputting extra effort into online ceremonies to engender a sense\nof belonging in their distributed teams.\n3.3 Organizational Culture\nMany large companies do not really want an agile transition.\nThey just want to increase speed and productivity by adopt-\ning some elements of agile while retaining their functional\nsilos and tyrannical power hierarchies. Agile leaders, not only\nwithin these large companies but also within smaller organiza-\ntions beholden to them, therefore have to balance conflicting\norganizational cultures\u2014the new agile culture and the old,\nmilestone-driven culture. This balancing involves tailoring\nthe agile approach, understanding the company ecosystem,\nadapting to customer culture, and adjusting \u201cold\u201d behaviors.\nAll of the participants repeatedly contrasted effective lead-\nership in an agile context to other leadership behavior they\nhad also observed or experienced.\n3.3.1 Tailored Approach. One common topic was the diffi-\nculty of scaling up small agile pilot projects to other contexts,\neven within the same company. The larger companies tended\nto want a standard set of agile practices, but participants\nreported that the diversity of contexts hinders a standardized\napproach. Some participants manage this conflict between di-\nversity and standardization by focusing on the agile principles\nwhile tailoring the practices for each, or a few, teams.\nOne strategy described by three participants was to trans-\nlate the agile principles into the company\u2019s context rather\nthan rigidly implementing agile practices and rituals. One\nparticipant described tweaking the waterfall model to make\nit more incremental as a first step toward agile. Another\ninterviewee claimed that agile was not appropriate for some\nphases in their development\u2014it simply did not fit where\nthe company was at the time of the interview. Returning to\nthe idea of balancing opposing cultures, another participant\nsuggested that agile leaders should shield the team from the\ncontrol needs of their organizations so that the team can\nfocus on delivering value.\n3.3.2 Understand the Company Ecosystem. With large-scale\nagile, one participant highlighted the issues with having onlyone product owner for each team since that person strug-\ngled to set priorities for the teams since that person alone\ncould not balance many different functions (e.g. stakehold-\ners, finance, line management). They instead focused on the\nfunction and purpose of product ownership, and created a\nbusiness council where up to seven people from different\norganizational functions set the priorities together. One rep-\nresentative from each department (e.g. one from finance, one\nfrom marketing, one from operations, etc.) met every three\nweeks to review all projects and their previous priorities. The\ncouncil then created one single list of company priorities\nacross the organizational functions and, through the creation\nof that list, removed silos and forced collaboration across the\ncompany. This appeared to improve consensus that IT was\nworking on the most important projects for the company.\nAnother participant emphasized that some companies they\nworked with as customers did not understand that transition-\ning to agile development entails a cultural change. Balancing\ntwo conflicting cultures was described as very important\nwithin the participant\u2019s own organization, but also to cus-\ntomize teams for customer culture. This internal adaptation\nrequired much effort because customers that did not incorpo-\nrate and focused on agile principles did not obtain as much\nadded values as the ones that did, which was described as\nfrustrating but necessary.\nParticipants not only had to see to the teams\u2019 need to\ncontextualize but also to balance other functions within the\nsame company, all of them with a different culture. One\nexample being that a development team could have an agile\nfinancial department integrated into their project so that\nthey could make rapid changes to what was being built,\nwhile others had a more milestone driven external financial\ndepartment hindering their agility.\n3.3.3 Adapt to Customer Culture. All participants discussed\nbalancing their internal organizational cultures with their\ncustomers\u2019 organizational cultures. One participant claimed\nthat their team could deliver updates much more often than\nthe customer could handle them. Therefore, the participant\nfelt that they had to be less agile to adapt to their customers.\n(The implication that agility is determined by release schedule\nis questionable [ 81] but many participants seem to think agile\nmeans delivering fast and often, rather than being responsive\nto change).\nOne participant said that agile teams and their stake-\nholders meet and synchronize their expectations instead of\nspecifying requirements and then controlling delivery. They\nfelt that this synchronization nurtured more discipline and\ncommitment in stakeholders.\nAnother cultural tension concerned contracting. One par-\nticipant complained that traditional fixed-price contracts\nhampered agile ways of working, which is consistent with pre-\nvious research [e.g. 41]. The contracts instead defined what\ntype of collaboration was possible with the customers, and\npartly determined how the two different cultures could be\nbalanced. What this participant described was contracting\nbased on the agile principles, i.e. fixed time, fixed cost, but\n\nWhat Makes Effective Leadership in Agile Software Development Teams? ICSE \u201922, May 21\u201329, 2022, Pittsburgh, PA, USA\nflexible scope. They also had fully dedicated teams for each\nproject and avoided developers in multiple teams.\n3.3.4 Adjust \u201cOld\u201d Behavior. The dialectic tension between\nthe old, milestone-driven culture and the new agile culture,\nincluding power, values, and principles of working, exists\nat both the organizations individual levels. All participants\ndescribed old habits and old ways of working resurfacing\ncontinuously in the new agile environments. Agile leaders\ntherefore felt that they needed to guard new work principles\nand continuously adjust deviating behaviors.\nOne participant explained that they were so used to the old\nways of working that many employees struggled to follow the\nreasoning behind the new ways of working. They described\npartially losing control of their project and having to let go\nof aspects of control that used to be key for them to know\nhow to do their job.\nAll participants described working hard to change behavior.\nOne participant claimed that changing the behavior of people\nintheirorganizationwasthemostchallengingpartofcreating\na more customer value driven company.\nAll interviewees mentioned how effective leadership meant\nletting go of control and reporting, while trusting teams\nand focusing on incremental delivery of customer value. Par-\nticipants reported varying results with about half of their\ncompanies having reasonably successful translations while\nthe other half were still struggling.\n3.4 Summary\nIn summary, participants identified three broad capabilities\nnecessary for effective leadership in modern software devel-\nopment:\n(1)The ability to share responsibility and leadership work\nwith other team members.\n(2)The ability to get team members from different func-\ntional silos to identify as members of a cross-functional\nteam.\n(3)The ability to manage ongoing tension between the\ncompeting logics of the old, milestone-driven culture\nand the new agile culture.\n4 RELATED WORK\nThis section summarizes existing literature on leadership in\nsoftware engineering and social psychology. Then, in Section\n5, we will integrate the findings from Section 3 with the\nexisting theory and research reviewed in this section.\n4.1 Research on Leadership in Software\nEngineering\nIn software development, agilityhas at least three meanings:\n(1) the ability to act and react quickly and easily;\n(2)adherence to the principles laid out in the agile mani-\nfesto [15];\n(3)the extent to which a team implements the practices\nassociated with one or more ostensibly agile methods.Some agilists believe that agile principles must be imple-\nmented using specific agile practices tailored to their own\ncontext [80]. However, instead of providing empirical evidence\nthat these practices increase a team\u2019s ability to act quickly\nand easily, proponents of agile simply redefined agilityas\nadhering to their methods [81].\nEven if we accept that adopting ostensibly agile practices\nincreases a team\u2019s agility, neither the agile manifesto nor\npopular books espousing agile practices [e.g 10,63] address\nleadership in-depth or explain how what type of leadership\nbehaviorisneededovertime.Scrum,inparticular,promotesa\nfacilitating role\u2014the \u201cScrum Master\u201d\u2014and does not acknowl-\nedge the necessity of adapting one\u2019s leadership style to one\u2019s\nsocial context [ 64]. In reality, many companies use a mixture\nof methods and adopt agile methods incrementally [44].\nMost leadership research in software engineering views\nleadership as an individual role [e.g. 22,43]). Studies also\nshow how some agile roles include leadership behavior, e.g.,\nScrum Masters [70] and agile coaches [6].\nSome studies investigate specific leadership styles. For ex-\nample, Veiseh et al. [ 76] showed that agile leaders are more\ntransformational. Garcia et al. [ 22] found that the effective-\nness of different leadership styles are independent of the\nsoftware development process (e.g. agile, waterfall). Other\nstudies have investigated how leadership styles change as\nteams mature [ 25,27]. What leadership behavior is needed\ndepends on individual readiness [ 29] and the group\u2019s devel-\nopment stage [ 79]. Leadership roles typically become more\ndistributed as a team matures [68, 69].\nAndrias et al. [ 3] found three leadership styles\u2014Tigers,\nCranes,andElephants\u2014inInformationSystemsDevelopment\nprojects. Przybilla et al. [ 56,57] suggests a research plan and\na theoretical model where they want to investigate individual\ntraits (represented by personality traits and cognitive ability)\nand the perceived leadership distribution to explain self-\norganization. They hypothesize that many individuals would\nbe perceived as leaders in agile teams. Meanwhile, Moe et\nal. [54] argue that agile teams should be trained in leadership.\nThe same authors later studied challenges of shared decision-\nmaking in agile teams, including \u201calignment of strategic\nproduct plans with iteration plans, allocation of development\nresources, and performing development and maintenance\ntasks in teams\u201d [52].\nWe did not find any software engineering studies that\ninvestigate social identity (see Section 4.2) and leadership\ntogether. However, developers\u2019 social identities play a key\nrole in the effectiveness of software projects [5].\nIn contrast, much research investigates agile teams\u2019 self-\norganization and self-management [e.g. 31,32,53,60]. Fur-\nthermore, Kakar [ 42] showed that agile teams have higher\ndegrees of self-organization than teams in a more traditional\nteam setup. We extends these works by differentiating leader-\nship from management and organization. Only one study has\ninvestigated explicit leadership aspects of getting teams to\nself-organize [ 26], but from the perspective of an appointed\nagile leader.\n\nICSE \u201922, May 21\u201329, 2022, Pittsburgh, PA, USA Lucas Gren and Paul Ralph\nAs early as 2003, scholars argued for including cultural\naspects in software process improvement efforts [ 55]. Later\nstudies confirmed that considering culture improves outcomes\nin software process improvement [ 66]. Others argued that\nsocial norms, values and beliefs are all important when de-\nploying systems development methodologies in general [ 39]\nand agile software development in particular [ 71]. Our theme\nof participants balancing conflicting cultures resonates with\nthese prior studies.\n4.2 Research on Leadership in Social Psychology\nEarly (19thcentury) conceptions of leadership were dom-\ninated by the Great Man Theory [34].3It posits that the\nsuccess of nations, organizations, and endeavors is largely\ndetermined by leaders\u2014amazing individuals who changed\nthe world using inherent talent for leading. This theory is\nno longer taken seriously because both of its premises are\nfalse: leadership is a learnable set of skills rather than an\ninnate talent [ 14], and that the fate of nations is determined\nby multitudinous factors rather than individuals. Criticism\nof theGreat Man Theory is not new; in 1869 Tolstoy wrote:\n\u201cTo elicit the laws of history we must leave aside kings, min-\nisters and generals, and select for study the homogeneous,\ninfinitesimal elements which influence the masses\u201d [ 74, p.\n977].\nHogg et al. [ 35] categorize 20th-century leadership research\ninto seven different focus areas:\n(1)Personality traits and individual differences (including\nthe Great Man Theory): a body of research that views lead-\nership as \u201cinnate or acquired individual characteristics\u201d [ 35,\np. 316].\n(2)Situational perspectives : a body of research that views\nleadership as a product of a context, which is considered\noversimplifiedbecausethecharacteristicsofindividualleaders\ncan also matter [35].\n(3)What leaders do : a body of research that investigates\nthe actual behaviors of leaders and typically divides leaders\ninto task-focused or relationship-focused [ 35]. This is problem-\natic because it ignores the interplay between leader behavior\nand context.\n(4)Contingency theories : a body of research that connects\nsituational and behavioral factors. The main problem with\nthese theories is that they are rather static [ 35] and only focus\non one specific leadership behavior in one specific context at\na time.\n(5)Transactional leadership : a body of research that fo-\ncuses on \u201cthe transaction of resources between the leader\nand the followers\u201d [ 16]. These ideas were extended to the\nleader-member exchange (LMX) theory [ 23], which posits\nthat leader-follower groups proceed through a series of phases\nsimilar to Tuckman\u2019s stages of group development [ 75]. Trans-\nactional leadership theories are criticized for failing to appre-\nciate that leadership is a group process [33].\n3We preserve the original, gender-specific name here because it high-\nlights how out-dated this theory is.(6)Transformational leadership : a body of research that\nfocuses on how leaders can transform goals into action using\ncharisma. This work posits that leaders should offer employ-\nees an identity within the organization such that employees\ntake personal responsibility for the success of the company\nand see company failures as their own [ 8]. Transformational\nleadership improves follower performance at the individual,\nteam and organizational levels [ 78]. However, immoral charis-\nmatic leaders may use power only for personal gain or to pro-\nmote their own personal vision, censure critical or opposing\nviews, demand unquestioning acceptance of their decisions,\nuse one-way communicatio, and ignore followers\u2019 needs [38].\n(7)Leader perceptions : a body of research built on social\ncognition , a branch of cognitive psychology that focuses on\nhow people process, store, and apply information about other\npeople and social situations [ 35]. For instance, Leader Cate-\ngorization Theory posits that our perception of leadership\ninfluences our selection and endorsement of leaders [48].\nIn summary, the first three areas do not have much ex-\nplanatory power [ 14]. Transactional leadership has merit,\nwhile transformational leadership is quite effective but open\nto abuse. Understanding perceptions of leadership also helps\nto explain who people choose to endorse as leaders.\nMost of the leadership studies in software engineering fit\ninto one or more of Hogg et al.\u2019s categories; for example,\nleadership as an individual role [ 22,43], or the style of being\na transformational leader [ 76]. However, leadership research\nin the 21stcentury has taken new directions. As we describe\nnext, leadership is now seen as dynamic and integrated into\nthe social process of group formation.\n4.3 Dynamic Team Leadership\nRecent studies of team effectiveness suggest that appointed\nleaders of complex projects create, maintain, and refine col-\nlective systems of meaning and expectation, which, in turn,\nguide the behavior of individuals [ 45]. This different perspec-\ntive of leadership entails less control and direction and more\nof the leader\u2019s \u201cdevelopmental and instructional capabilities\napplied over time\u201d [45].\nMembersofeffectiveteamsshareleadershipdynamically[ 46];\nthat is, the distribution of leadership work among team mem-\nbers is constantly in flux. The team constantly adjusts (based\non their circumstances) what leadership work is being done,\nwho is doing it and how they are doing it. Ford [ 20] suggests\nreplacing the term leadership withleadingship to capture the\nfact that it is a shared property of the team rather than a\nproperty of designated \u201cleaders\u201d.\nThese ideas have existed in parallel with some of the\nprevious leadership theories described above\u2014for example,\nCranach [ 77] suggested that leadership is a function of group\naction in 1986.\nIn summary, leadership is a kind of work\u2014a shared func-\ntion of driving the work forward toward the team\u2019s goal\u2014\nwhich teams share. Teams constantly adjust their shared\nleadership work to their changing circumstances.\n\nWhat Makes Effective Leadership in Agile Software Development Teams? ICSE \u201922, May 21\u201329, 2022, Pittsburgh, PA, USA\n4.4 Social Identity Theory\nAbove, we described Hogg et al.\u2019s seven historical areas of\nleadership research. Hogg et al.\u2019s point, in categorizing leader-\nship research thusly, is to contrast these historical views with\na contemporary, Social Identity Theory of leadership [ 34].\nWhereas all seven historical areas assume that leadership\nis an individual role; Social Identity Theory models leader-\nship as a relationship where group members can influence\neach other to adopt (and perceive as their own) new values,\nattitudes and goals.\nA person\u2019s social identity is the part of their sense of\nself that derives from group membership; that is their self-\ncategorization into different social groups [ 36]. Effective lead-\nership transforms individual action into group action that\ndefines group membership. Leadership is an identity func-\ntion: it consolidates, stabilizes, and anchors the group\u2019s iden-\ntity [34]. For example, the congruence between the social\nidentities of leaders and followers leads to higher ratings of\ntransformational leadership [4].\nSocial identities also play an important role in how peo-\nple collaborate. To collaborate effectively, teams need to\ncreate a common social category. Team members do not\nhave to abandon their prior social categories to identify with\nthe team; rather, they create a new social category for the\ncross-functional team [ 18]. For example, if some members\nof a software development team are also part of group that\npromotes DevOps across the organization; they need not sup-\npress that part of their social identity to feel like part of the\nsoftware team as well. Furthermore, the new social category\ndoes not require commonalities beyond team membership\nto take hold. For example, the team members can all have\ndifferent hobbies, nationalities, belief systems or interests.\nHowever, the more a person identifies with one social\ncategory\u2014be it a role or a team\u2014the more they exhibit inter-\ngroup bias; that is, favoring the groups we are part of (the\n\u201cin-group\u201d) over others (\u201cthe out-group\u201d) [ 30]. Inter-group\nbias has both positive and negative effects; for example, inter-\ngroup bias can magnify team member\u2019s motivation, but it\ncan also lead employees to put their team\u2019s best interests\nahead of the organization\u2019s [30].\n4.5 Organizational Culture\nOrganizational culture refers to \u201cthe pattern of beliefs, val-\nues and learned ways of coping with experience that have\ndeveloped during the course of an organization\u2019s history, and\nwhich tend to be manifested in its material arrangements\nand in the behaviours of its members\u201d [ 12]. Culture is widely-\nstudied in many fields including anthropology, management,\npolitical science, and sociology. For the purposes of this paper,\nhowever, the key point is that leadership (and social identity)\nare inseparable from culture [62].\nOrganizational culture is \u201ca particularistic system of sym-\nbols shaped by ambient society and the organization\u2019s history,\nleadership and contingencies, differentially shared, used and\nmodified by actors in the course of acting and making sense\nout of organizational events\u201d [ 2, p. 216]. Rather than a single,monolithic culture, organizations can have a mishmash of\nconflicting cultural views [ 24]. Any nuanced understanding\nof leadership in agile teams therefore must be situated in the\norganization\u2019s ongoing cultural conflict.\n4.6 Summary\nIn summary, leadership research has evolved considerably\nsince the 19thcentury. Three recent trends in leadership re-\nsearch help explain leadership in agile software development:\n\u2219social identity helps explain how leaders get individuals\nto feel like part of a team and accept responsibility;\n\u2219dynamic team leadership helps explain how leadership\nwork is shared among team members;\n\u2219the idea that leadership is inextricable from culture\nhelps explain how leaders balance conflicting cultures\nassociated with agile and milestone-driven processes.\nMore broadly, increased focus on people and their inter-\nactions is a core dimension of transitioning to, and main-\ntaining, agile software development. Leadership is part of\nthis increased focus on human factors. Next, we will further\nintegrate our findings back into recent leadership research.\n5 DISCUSSION\nThe main contributions of this paper\u2014the concepts illus-\ntrated by Figure 1\u2014resonate well with recent studies on\nleadership in social psychology, most of which have not pre-\nviously been applied to the software engineering context.\n5.1 Dynamic Team Leadership\nOur findings suggest that leadership in cross-functional agile\nteams is dynamically shared: many team members accept\nresponsibility, take initiative, do leadership work; and fur-\nthermore, who does what leadership work changes over time.\nThis resonates with research on dynamic team leadership,\nwhich has found that effective leaders develop and guide team\nmembers instead of controlling or directing them [ 45]. Agile\nteams appear to need leadership that consistently adapts to\ntheir evolving situation; agile team members need to actively\ndrive teamwork.\nOur results suggest that self-appointed agile leaders let\nother team members take on leadership work when they (the\nothers) are ready to do so. Not allowing team members to\ntake on leadership work and drive the teamwork forward\nappears to inhibit the development of the desired agile team\ndynamic[ 46].Havingtraditionalmanagersinoraroundteams\ncan therefore prevent them from becoming agile.\nAgile methods frequently prescribe self-managed teams\nrun without interference from external leaders. However,\nboth our findings and existing research on dynamic team\nleadership suggest that external or appointed leaders creating,\nmaintaining, and refining expectations for the team can be\nbeneficial [45].\n\nICSE \u201922, May 21\u201329, 2022, Pittsburgh, PA, USA Lucas Gren and Paul Ralph\n5.2 Social Identity\nOur findings suggest that building a strong social identity\nacross functions, such that employees identify with their new\nteam in addition to their old role, is important for effective\nagile leadership. Initially, participants added to their col-\nleagues\u2019 identities by simply designing cross-functional teams.\nHaving team members from different functions collaborating\nwas described as one key to breaking the silos and focusing\non increased customer value.\nOur results are consistent with prior findings in psychology\nthat designing teams is a kind of leadership behavior [ 34].\nThe positive effects of cross-functional teams are also well\nknown and include increased organizational learning, job\nsatisfaction, and overall effectiveness [ 17]. The agile leaders\nwe interviewed described creating a sense of belonging and\nshared responsibility not only within teams but also with\ncustomers and other organizational functions.\nOur interviewees\u2019 emphasis on building a strong team\nidentity (i.e. clearly defining a social category for the team)\nis consistent with the main premise of social identity theory:\nour membership in groups is a major part of who we are and\nhowwefitintooursocialworld.Ourinterviewees\u2019descriptions\nof how employees identify with different roles and teams are\nconsistent with the idea that an individual\u2019s social identity\ncomprises many social categories [30, 36].\nFurthermore, synthesizing prior literature with our findings\nsuggests the following recommendation. New team members\ndonothavetoabandontheirpriorsocialcategoriestoidentify\nwith their new team. Instead of trying to remove a person\u2019s\nprior social category (e.g. a software tester), we simply add\nthe cross-functional team identity (e.g. \u201cI\u2019m a member of\nteam Eta\u201d). The different categories do not interfere with\neach other, and trying to suppress aspects of a person\u2019s\nsocial identity is problematic. Moreover, developing employ-\nees\u2019 social identities can decrease inter-group bias and make\ncollaboration more effective across the organization [e.g. 17].\n5.3 Organizational Culture\nLike prior software engineering research on culture [ 40,73],\nour findings suggest that transitioning to agile software de-\nvelopment is inextricable from sifting organizational cultures.\nRealizing the benefits of agile software development requires\nmore than just implementing agile practices and process\nimprovements\u2014the organizational culture has to change from\none of individual leaders commanding and controlling to one\nof decentralized, dynamic team leadership. That is why our\nparticipants focused on implementing agile principles, tai-\nlored to their specific contexts, rather than inflexibly rolling\nout a standard set of agile practices.\nFurthermore, the agile leaders saw themselves as shields\nbetween the new agile cultures of their teams and the old,\nmilestone and function-oriented cultures in their surrounding\ncompany ecosystems. This shielding resonates with prior\npsychological literature on how understanding organizational\nculture is essential to making sense of the organization\u2019s\nhistory, its leadership, and events [ 2]. Even the participantsfrom the smaller companies contrasted effective leadership in\nagile teams to other leadership behavior.\nConsistent with prior research on agile transitions [ 40,73],\nour results show that agile leaders perform a cultural bal-\nancing act across the organizational functions to facilitate a\ntransition toward agile processes. More general research on\norganizational culture similarly shows that a multitude of\norganizational cultures existing simultaneously within large\norganizations. Multicultural models are needed because large\norganizations have problems of \u201ccross-cultural\u201d conflict [ 24].\nWhen a company adopts agile, the new agile culture must\ntherefore be balanced with existing, and sometimes conflict-\ning, cultures. For example, some of our participants described\nadaptedtotheircustomers\u2019culturebydecreasingtheirrelease\nfrequency.\n5.4 Answering our Research Question\nThis study sought to address the question, what is the na-\nture of leadership in agile software development, from the\nperspective of professionals who identify as agile leaders? Put\nsimply, our answer is as follows.\nAgile leadership is dynamically shared among team mem-\nbers, engenders a sense of belonging to the cross-functional\nteam, is inextricable from organizational culture, and of-\nten requires balancing competing organizational cultures.\n5.5 Implications\nThe above findings have several implications for researchers,\nprofessionals and educators.\nFutureresearchonleadershipinsoftwareengineeringshould\nbe more connected to recent research in social psychology and\norganizational behavior. \u201cWhat makes a good agile leader?\u201d\nis the wrong question because effective agile teams share\nleadership work. Counter-intuitively, to understand \u201cwhat\nto look for in a great software engineering manager, and\nhow to further develop their skills to support the teams\nthey manage\u201d [ 43], we need to conceptualize leadership as\na property of a team, rather than an individual. Once we\nunderstand that leadership is a kind of work, rather than\na kind of person, we can recognize that the effectiveness of\nsoftware engineering managers depends on their ability to\n(1) get employees to identify as part of team, (2) get team\nmembers to accept greater responsibility, and (3) manage\ncultural conflict. Indeed, transitioning to agile development\nmay increase the importance of these aspects of leadership.\nThe proposed model explains that, as organizations grad-\nually shift to agile, they must balance competing cultures,\nincluding conflicts between teams, within teams, and even\nwithin individuals. Practitioners may benefit from collabo-\nrating with academics on this because theories of leadership\nare challenging to digest and apply.\nMeanwhile, educators may find the proposed model use-\nful for teaching agile project management\u2014a problematic\nsubject for many software engineering educators [cf. 58]\u2014\nespecially at the graduate level. The model can be used both\nto explain to students the relationship between management\n\n",
    "is_processed": true,
    "process_error": null,
    "content_length": 55821,
    "local_pdf_path": "data/pdfs/What Makes Effective Leadership in Agile Software Development Teams__3c3636dc.pdf"
  },
  "arxiv_a1d43ba2465375823e2b39402131db67": {
    "title": "Effective Delegation and Leadership in Software Management",
    "url": "http://arxiv.org/pdf/2405.01612v1",
    "source": "arxiv",
    "authors": [
      "Star Dawood Mirkhan",
      "Skala Kamaran Omer",
      "Hussein Mohammed Ali",
      "Mahmood Yashar Hamza",
      "Tarik Ahmed Rashid",
      "Poornima Nedunchezhian"
    ],
    "published_date": "2024-05-02T14:16:05+00:00",
    "summary": "Delegation and leadership are critical components of software management, as\nthey play a crucial role in determining the success of the software development\nprocess. This study examined the relationship between delegation and leadership\nin software management and the impact of these factors on project outcomes.\nResults showed that effective delegation and transformational leadership styles\ncan improve workflow, enhance team motivation and productivity, and ultimately\nlead to successful software development projects. The findings of this study\nhave important implications for software management practices, as they suggest\nthat organizations and software managers should prioritize the development of\neffective delegation and leadership practices to ensure the success of their\nsoftware development initiatives. Further research is needed to explore the\ncomplex interplay between delegation and leadership in software management and\nto identify best practices for improving these processes.",
    "categories": [
      "cs.SE"
    ],
    "entry_id": "http://arxiv.org/abs/2405.01612v1",
    "meta": {
      "content_type": "academic_paper",
      "is_curated": true,
      "source_quality": 8
    },
    "content_type": "academic_paper",
    "text": " \n Effective Delegation and Leadership in Software \nManagement  \nStar Dawood Mirkhan1, Skala Kamaran Omer2, Hussein Mohammed Ali3, Mahmood Yashar Hamza4, Tarik Ahmed Rashid5, and \nPoornima Nedunchezhian6 \n1Computer Science and Engineering, University of Kurdistan Hewler,  Kurdistan Region,  Iraq - E-mail: satar.dawood@ukh.edu.krd  \n2Computer Science and Engineering, University of Kurdistan Hewler,  Kurdistan Region,  Iraq - E-mail: skala.kamaran@ukh.edu.krd  \n3Computer Engineering Department, Tishk International University, Kurdistan Region, Iraq - E-mail: hussein.mohammed@tiu.edu.iq  \n4Computer Engineering Department, Tishk International University, Kurdistan Region, Iraq - E-mail: mahmood.yashar@tiu.edu.iq  \n5Computer Science and Engineering, University of Kurdistan Hewler, Kurdistan Region, Iraq - E-mail: tarik.ahmed@ukh.edu.krd  \n6Computer Science and Engineering, Vellore Institute of Technology, V ellore, India \u2013 E-mail: dr.poornimanedunchezhian@gmail.com  \n* Corresponding author: Computer Science and Engineering, University of Kurdistan Hewler , Kurdistan Region, Iraq. Tel: +9647 507330321  \nAbstract  \nDelegation and leadership are critical components of software management, as they play a crucial role in determining the succ ess of \nthe software development pr ocess. This study examined the relationship between delegation and leadership in software management \nand the impact of these factors on project outcomes. Results showed that effective delegation and transformational leadership  styles \ncan improve workflow, enha nce team motivation and productivity, and ultimately lead to successful software development projects. \nThe findings of this study have important implications for software management practices, as they suggest that organizations and \nsoftware managers should  prioritize the development of effective delegation and leadership practices to ensure the success of their \nsoftware development initiatives. Further research is needed to explore the complex interplay between delegation and leadersh ip in \nsoftware manageme nt and to identify best practices for improving these processes.  \nKeywords:  Delegation, Leadership, Software, Project Management  \n \n1. Introduction  \nEffective management of software projects is crucial, in today\u2019s organizations as it encompasses the development, \nimplementation , and maintenance of software systems. A strong leader with the ability to delegate tasks efficiently \nplays a role in ensuring software management  (Weerasinghe , 2022) . This paper investigates the interplay between \ndelegation and leadership within the context of software management. How these behaviors impact software \ndevelopment outcomes. The study has two objectives , first, to analyze how delegation and leadership practices \ninfluence software development results , second to identify the factors that shape these practices and strategies \nemployed by software managers to lead their teams effectively and delegate tasks  (Zhang, et al., 2009) . The \nstructure  of the paper is organized as follows : Section 2 provides a background on the importance of delegation \nand leadership in the paced realm of software management , Section 3 presents a review of relevant studies and \nexisting literature related to the topic , Section 4 explores various theories underpinning delegation and leadership \nestablishing a theoretical foundation for our research , in Section 5 delve s into different types of leadership styles \nand delegation techniques considering their applicability, within software management contexts , in sec tion 6 \npresents the techniques and methods on how to enhance the delegation and leadership, in Section 7 presents  the \ndifficulties that arise when delegating responsibilities and leading in the software industry. It also sheds light on \nstrategies and recommendations to successfully overcome these challenges.  Section 8 goes into the individuals \nwho benefit from delegation in the software industry and explores the impact of delegation and leadership, on \nsoftware management. The conclusion  of the paper is in s ection 9 , which presents the findings of our study, \nhighlights takeaways , and suggests research avenues  and it will wrap up by discussing how our research contributes \nto theory and practice.  And the last section is the future work and studies.  \n2. Background  \nIn the evolving  world of software management, where constant innovation and quick development  require  strong \nleadership and effective delegation , which become crucial factors. Software projects are known for their \ncomplexity demanding skills and expertise to navigate through the intricacies of design, development, testing , and \nmaintenance  (F.A.Z & R.D.F.S.M, 2020) . As technology advances at a pace software management continuously \nfaces challenges to adjust and thrive . Also, the types of leadership and their characteristics are shown in Table  1 \n\n \n (Li, Tan, & Teo, 2012) . \nTable  1. Types of Leadership and Their Characteristics.  \nLeadership  Style  Characteristics  \nTransformational  Inspires,  motivates,  and sets a clear  vision  \nAutocratic  Makes  decisions  unilaterally  \nDemocratic  Involves  the team  in decision -making  \nLaissez -faire Offers  limited  guidance  \nServant  Leadership  Focuses  on serving  the needs  of others  \n \n2.1 The Dynamic Nature of Software Management  \nManaging software involves overseeing the conception, creation , and maintenance of software systems that drive \nindustries and applications. Whether it 's developing cutting -edge apps, handling enterprise software , or building \nembedded systems for emerging technologies software management is a dynamic and diverse field. In this \nchanging environment , successful software projects require not only technical expertise but also effective \nleadership and delegation. Given the evolution of technology , software managers must be flexible and responsive, \nto evolving client  needs emerging development methods , and shifting market dynamics  (Clark, Jones, & \nArmstrong, 2007) , also represented in Table  2. \n \nTable  2. Steps in Effective Delegation.  \nSteps  in Effective  Delegation  \nTask  Identification  \nTeam  Member  Selection  \nClear  Communication  \nSupport  and Guidance  \nPerformance  Assessment  \n \n2.2 The Role of Delegation  \nIn the realm of software management , delegation is a method, for distributing tasks that aims to maximize project \nresults. By assigning responsibilities to team members or subordinates\u2019 managers can leverage their strengths and \nexpertise , leading to a more streamlined workflow. Delegation empowers managers to concentrate on choices, \nsuch, as defining project objectives allocating resources , and shaping the overall course of software development \nefforts.  \nEffective delegation plays a role, in software management. It involves steps that managers need to follow. First,  \nthey must carefully identify tasks that can be delegated, considering  the capabilities and expertise of their team \nmembers. Selecting the individuals for these tasks is equally important requiring an understanding of their skills \nand experiences. Communication is key throughout the process with precise articulation of task objectives, \ndeadlines , and expected outcomes. Managers also need to establish expectations regarding quality, timelines,  and \ndeliverables. Providing support and guidance is essential as tasks progress, including addressing any questions or \n\n \n concerns that arise offering feedback , and resolving challenges along the way. Regular performance assessments \nallow managers to provide feedback on team members ' progress and gain an understanding of their performance \nwhile identifying areas, for improvement  (Goericke, 2020) . \n2.3 The Significance of Leadership  \nEffective software management leadership extends beyond assigning tasks , it involves motivating and directing \nteams towards shared objectives. Leaders establish the path that offer s guidance and foster a nurturing environment \nthat empowers teams to accomplish project goals and improve their performance.  Table 3 illustrates some of the \nattributes of effective leadership  (Popa, Mihele, F\u0103g\u0103r\u0103\u0219an, & P\u00eesl\u0103, 2021) . \n \nTable 3. Attributes of Effective Leadership.  \nLeadership  Attributes  \nMotivation  and Inspiration  \nEffective  Communication  \nStrategic  Decision -Making  \nSupportive  Environment  \n \nIn the realm of software management, effective leadership involves several key attributes:  \n\u2022 Motivation and Inspiration : Leaders motivate and inspire team members, instilling a sense of purpose \nand commitment.  \n\u2022 Effective Communication : Communication is paramount, ensuring that project objectives and \nexpectations are conveyed.  \n\u2022 Strategic Decision -Making : Leaders make strategic decisions that drive project success and \norganizational growth.  \nTransformational leadership has shown its effectiveness in software management. This style of leadership \nemphasizes inspiration, motivation, and intellectual stimulation, aligning team members with a shared vision and \npurpose  (Peesker, Ryals, Rich, & Boehnke, 2019) . \n2.4 The Interplay Between Delegation and Leadership   \nDelegation and leadership go hand in hand in software management working together to create a relationship  for \nan ideal software project environment (Weerasinghe , 2022) . Effective delegation allows leaders to focus on their \nrole of guiding and motivating teams while strong leadership fosters an environment of trust, motivation , and \ncollaboration that enables delegation. The importance of this interplay, between delegation and leadership cannot \nbe overstated within the context of software management. They contribute significantly to improved efficiency, \nteam motivation, project s uccess , and overall organizational growth. However,  the success of this interplay also \nrelies on the culture which can either support or hinder the implementation of these practices  (Li, Tan, & Teo, \n2012) . \nIn the paced world of software management,  it is crucial to understand how delegation and leadership work \ntogether synergistically to drive project outcomes and achieve success. This paper aims to delve into these \ndynamics by exploring their influence, challenges, best practices,  and implications within the realm of software \nmanagement. By shedding light on the role played by delegation and leadership it seeks to provide insights and \nguidance, for organizations striving to thrive in this ever-evolving  lands cape (Zhang, et al., 2009) . \n3. Literature Review  \nIn this section , we present an examination of the literature and research regarding the relationship, between \ndelegation and leadership in the software management domain. Our review of existing studies aims to establish an \nunderstanding of the importance of these concepts  their influence on project results and the current state of research, \nin this area.  \n\n \n 3.1 Delegation in Software Management  \nDelegation, an element of software management has attracted the interest of both researchers and professionals. In \nthe initial research conducted by (Baird & Maruping, 2021) , they emphasize the significance of delegation, in \nassigning tasks and optimizing software development projects. Delegation enables managers to assign \nresponsibilities to team members leveraging their expertise and skills to enhance project efficiency and q uality.  \nEffective communication has been identified as an aspect of delegation according  (Morrison -Smith & Ruiz, 2020) . \nWhen team members understand  their assigned tasks, objectives,  and deadlines it minimizes the chances of \nmisunderstandings and delays, in project completion.  (Al-Saqqa, Sawalha, & AbdelNabi, 2020)  emphasize the \nsignificance of providing support and guidance to individuals who are delegated tasks. Effective software \nmanagers do not assign  responsibilities. Also , ensure that team members have the necessary resources and \nassistance to fulfill their duties efficiently.  \n3.2 Leadership in Software Management  \nBeing a leader, in software management involves more than assigning tasks. It entails the capacity to inspire, guide , \nand create an environment that promotes team success. Valuable findings from the research indicate that \ntransformational leadership, as suggested by  (Popa, Mihele, F\u0103g\u0103r\u0103\u0219an, & P\u00eesl\u0103, 2021)  has gained recognition in \nthe field of software management. Transformational leaders can inspire and motivate their team members instilling \na sense of purpose and dedication, towards project objectives.  (Spiegler, Heinecke, & Wagner, 2021)  highlight the \nimportance of leadership, in adapting to emerging technologies and promoting innovation within software \ndevelopment teams. Good leaders foster. Offer support for teams to explore new and inventive solutions. The \nimpact of culture on the effec tiveness of leadership, in software management has been extensively studied . \nOrganizational culture can impede the implementation of leadership approaches and delegation strategies  \n(Goericke, 2020) . \n3.3 Interplay Between Delegation and Leadership  \nThe literature also delves into the interconnectedness of delegation and leadership, in software management. \nResearch has shown that effective delegation is often supported by leadership styles as they foster an environment \nthat promotes trust, motivation,  and collaboration  (Spiegler, Heinecke, & Wagner, 2021) . The synergy between \ndelegation and leadership plays a role in attaining success, in projects.  \n3.4 Current Gaps in the Literature  \nAlthough the current body of literature offers perspectives, on software management there are still some areas that \nrequire attention. The existing research tends to concentrate on aspects like personality traits and skills when \ndiscussing delegation and l eadership often neglecting the influence of organizational culture, team dynamics , and \ntechnology. Furthermore,  there is a lack of studies exploring the lasting effects of effective delegation and \nleadership indicating the need, for further investigation  (Athey, 1998) . The sections  will expand on this literature \nreview to explore how delegation and leadership intertwine in software management , it will also examine  their \neffects, on project outcomes, team performance , and employee satisfaction.  \n4. Delegation and Leadership Theories  \nThese theories encompass aspects of delegation and leadership within the realm of software management. Trait \ntheory focuses on the qualities that effective leaders possess, such as intelligence and charisma. Transformational \nleadership revolves around leaders\u2019  ability to inspire and motivate teams, towards shared goals. Transactional \nleadership involves using rewards and consequences to drive performance. Situational leadership suggests that \nleadership styles should adapt to team maturity and specific situa tions. Lastly , the path-goal theory highlights the \nrole of leaders in clarifying paths to success and providing support. Together these theories guide our exploration \nof delegation and leadership, which allow s us to understand their dynamics deeply  (Zhang, et al., 2009) . \n5. Types of Leadership and Delegation  \nThis section will delve into leadership and delegation styles. Discuss their importance and suitability, in the realm \nof software management. Each style possesses traits and consequences, for software development projects.  \n5.1 Leadership Styles  \nDifferent leadership styles have an impact, on how teams function make decisions , and achieve project goals. The \nfollowing Table  4 provides a summary of leadership styles and their important characteristics:  \n\n \n Table  4. Leadership Styles.  \nLeadership  Style  Description  \nAutocratic  Leadership  The leader  makes  decisions  unilaterally  with minimal  team  input.  \nTransformational  Leadership  Inspires  and motivates  teams  towards  shared  goals.  \nServant  Leadership  Focuses  on serving  the needs  of team  members  and their growth.  \nLaissez -faire Leadership  Provides  autonomy  to the team  with minimal  guidance.  \n \nThere are leadership styles that can be applied in situations. For instance,  when there\u2019s a need, for decision making \nan autocratic leadership style may be appropriate. On the other hand , if the goal is to encourage team innovation a \ntransformational leadership style can be beneficial. Lastly when promoting autonomy, among team members is \nimportant a laissez -faire leadership style can be effective. Software managers have the opportunity to select a \nleadership style that aligns with their project goals and the dynamics of their team  (Wong, 2003) . \n5.2 Delegation Styles  \nDelegation plays a role, in the management of software. In Table  5 you'll find an overview of delegation styles \nalong, with their specific characteristics : \nTable  5. Delegation Styles.  \nDelegation  Style  Description  \nDirective  Delegation  The delegate  is provided  with specific  instructions  on task execution.  \nSupportive  Delegation  The delegate  is given  resources  and support  to perform  tasks.  \nEmpowerment  Delegation  The delegate  is granted  authority  to make  decisions  independently.  \nDelegation  by Objectives  The delegate  receives  specific  objectives  and autonomy  for execution.  \n \nDifferent delegation styles have purposes ranging from providing instructions, for tasks (directive) to fostering \ninitiative (empowerment). When it comes to delegation software managers must  choose the style that aligns with \nthe nature of the tasks at hand and the abilities of their team members.  By understanding these styles , software \nmanagers can make informed decisions that contribute to team performance and successful project outcomes. The \ntables presented offer an overview of each style\u2019s  characteristi cs, which can assist software managers in selecting \nthe suitable approach, for their specific software development projects  (Klein, Ziegert, Knight, & Xiao, 2006) . \n6. Enhancing Delegation in Software Management  \nDelegation in software management is a critical practice that empowers teams to efficiently tackle complex \nprojects and distribute responsibilities effectively. It involves entrusting specific tasks or decision -making authority \nto team members based on the ir expertise and skill sets. Effective delegation in software management should begin \nwith a clear understanding of project objectives and team members' strengths and weaknesses. Project managers \nshould identify the right individuals for each task and prov ide them with a well -defined scope of work, timelines, \nand expectations. Regular communication and feedback loops are essential to monitor progress and ensure \nalignment with project goals. Delegation not only fosters a sense of ownership and accountability  among team \nmembers but also allows managers to focus on higher -level strategic planning, ultimately contributing to the \n\n \n overall success of software development projects. Nevertrheless, improved project efficiency is a cornerstone of \neffective delegation in software management. When tasks are strategically distributed to team members based on \ntheir qualifications and experti se, it ensures that the right people are handling the right responsibilities. This not \nonly minimizes bottlenecks but also fosters a smoother workflow throughout the project lifecycle. By harnessing \nthe strengths of individual team members, delegation opti mizes resource allocation, prevents overburdening of \nany single team member, and enables a more streamlined execution of tasks. Consequently, project efficiency is \nsignificantly enhanced as team members are empowered to work on tasks that align with their skills and knowledge, \nleading to faster delivery, reduced rework, and ultimately, the successful completion of software development \nprojects within time and budget constraints.  \nEnhancing project efficiency through effective delegation in software management requires a thoughtful approach. \nThe following points help achieving more effective delegation in software managemen:  \n- Task Analysis and Matching: Begin by conducting a thorough analysis of project tasks and their \nrequirements. Then, match these tasks to team members based on their skills, experience, and domain \nexpertise. Academic research can help identify optimal task -team member pairings.  \n- Clear Communication: Emphasize the importance of clear and precise communication when delegating \ntasks. Academic studies on communication strategies can inform how to articulate expectations, deliver \ninstructions, and establish channels for feedback.  \n- Delegation Criteria: Develop criteria and guidelines for delegation that take into account task complexity, \ncriticality, and the capabilities of team members. Research can help determine the factors to consider \nwhen making delegation decisions.  \n- Empowerment and Accountability: Encourage a culture of empowerment and accountability within the \nteam. Academic literature on leadership and team dynamics can provide insights into fostering a sense of \nownership among team members.  \n- Monitoring and Feedback: Establish mechanisms for monitoring task progress and providing regular \nfeedback. Research on performance evaluation and feedback loops can guide the design of effective \nmonitoring systems.  \n- Risk Management: Incorporate risk assessment into delegation decisions. Academic studies on risk \nmanagement in software projects can help identify potential risks associated with task assignments and \nhow to mitigate them.  \n- Training and Skill Development: Support ongoing training and skill development for team members. \nAcademic resources on professional development and training methodologies can inform strategies for \nenhancing team members' capabilities.  \n- Delegation Tools and Technologies: Explore academic literature on project management tools and \ntechnologies that can facilitate delegation and task tracking. Leveraging the right software tools can \nstreamline the delegation process.  \n- Performance Metrics: Define and measure key performance metrics related to project efficiency and \ndelegation effectiveness. Academic research on project metrics can provide guidance on what to measure \nand how to interpret results.  Adaptation and Continuous Improvement: Encourage a culture of adaptation \nand continuous improvement in delegation practices. Academic studies on agile methodologies and \niterative project management can offer insights into adapting to changing project needs . \n7. Challenges and Best Practices  \nThis segment will delve  into the difficulties that frequently arise when it comes to delegation and leadership, in \nthe software industry. Additionally,  it will offer insights, into the approaches that can alleviate these challenges \nand promote successful software management.  \n7.1 Challenges in Delegation and Leadership  \nDifficulties, with delegation and leadership , can have an impact, on the effectiveness and accomplishments of \nsoftware management. The following Table  6 provides a summary of the challenges. How they can affect outcomes  \n(Overton & Lowry, 2013) . \nTable  6. Challenges in Delegation and Leadership.  \nChallenge  Impact  \nResistance  to Change  Hinders  adoption  of delegation  and trust.  \n\n \n Trust  and Confidence  This may lead to hesitation  in delegating  tasks.  \nMonitoring  and Evaluation  Complicates  assessment  of delegation  effectiveness.  \nPoor  Communication  Resulting  in misunderstandings  and conflicts.  \nConflicts  of Interest  Divergent  priorities  impede  seamless  delegation.  \nInadequate  Skill Sets Undermines  task execution  and delegation  success.  \nLack  of Support  and Resources  Impedes  effective  delegation  efforts.  \n \n7.2 Best Practices for Effective Delegation and Leadership  \nEffective  delegation and leadership play s a role  as shown in Table  7. By implementing the following practices \nsoftware managers can overcome challenges  (Nordb\u00e4ck & Espinosa, 2019) . \nTable  7. Best Practices for Delegation and Leadership.  \nBest  Practice  Description  \nClear  Goal  setting  Comprehensive  delineation  of project  objectives.  \nFostering  Trust  Consistent  support,  mentorship,  and guidance  to team  members.  \nEffective  Communication  Open  and frequent  exchanges  between  managers  and teams.  \nTask -Skill Alignment  Matching  responsibilities  with individual  expertise.  \nSetting  Realistic  Expectations  Unambiguous  guidelines,  standards,  and quality  expectations.  \nProvision  of Resources  and Support  Adequate  training,  tools,  and information  access  for teams.  \nRegular  Task  Progress  Monitoring  Constructive  feedback  and performance  assessment.  \nOutcome  Evaluation  Continual  assessment  and process  optimization.  \n \nBy incorporating these recommended techniques software managers can strengthen their abilities to delegate tasks \nand lead effectively resulting in enhanced project efficiency increased productivity and successful software \nmanagement.  \n8. Beneficiaries and Implications  \nDelegation plays a role in the software industry leading to advantages and important consequences.  \n8.1 Beneficiaries of Delegation  \nBoth  individual programmers and entire organizations benefit from the practice of delegation. For individuals\u2019  \ndelegation provides opportunities to develop skills grow personally and find the most satisfactory jobs . It enables \nthem to take on challenges acquire abilities and contribute to innovative solutions. At this level , delegation \npromotes increased efficiency, collaboration, innovation,  and risk management. This leads to engaged teams \nultimately resulting in higher productivity and successful project outcome s (Steffel , Williams, & Perrmann -\nGraham, 2016) . \n8.2 Implications for Software Management  \nThe significance of delegation and leadership, in software management reaches far and wide. It highlights the \nvalue of communication, building trust , and embracing transformational leadership approaches. These actions play \na role in enhancing project efficiency, team productivity , and overall organizational achievements. However,  it's \n\n \n important to acknowledge that delegation should be customized for every software project while considering the \nrequirements and dynamics of the team  (F.A.Z & R.D.F.S.M, 2020) . \n9. Conclusion  \nIn this concluding section , it will present the outcomes of this study , summarize the insights , and outline directions, \nfor future research. It will also discuss the implications of our research for both understanding and practical \napplication.  This study delved into the intricacies of delegation and leadership within software management. \nNotably , the findings highlighted that effective delegation is crucial in enabling managers to focus on higher -level \ntasks , while also fostering the growth and development of team members. This success heavily relies on \ncommunication, transparent expectations , and building trust between managers and their teams. Among leadership \nstyles examined transformational leadership  is also essential , which are  characterized by inspiration and guidance. \nEmerged as an effective approach in software management. Additionally , organizational culture was found to play \na role in shaping how delegation and leadership practices are adopted.  The implications of this research carry \nimportance for both understanding and practical implementation. Firstly,  the study underscores the role played by \ndelegation in enhancing efficiency and nur turing team growth. Clear communication and trust building are factors \nensuring delegation within organizations. Furthermore,  the findings highlight that transformational leadership is \nhighly preferred in software management emphasizing the importance of inspiring others while providing guidance. \nDespite these insights gained from this research efforts , there remains a gap for further exploration, within this \ndomain.  To gain an understanding for future study,  should explore how cultural and organizational f actors, long-\nterm investigations and different leadership approaches affect the management of software. It is also important to \ninvestigate the effects of delegation and leadership, on the end users\u2019  satisfaction and their overall software \nexperience.  In conclusion, this study contributes to the intricacies of delegation and leadership, in software \nmanagement this comprehensive guide provides insights to enhance and optimize software management practices \nin a manner.  By embracing effective delegation and transformational leadership, organizations can enhance project \nefficiency, team productivity, and overall success.  \n10. Future Work  \nFuture work regarding this paper offers an exciting avenue for in -depth exploration of each of the the points \nmentioned in section 6. Firstly, a deeper investigation into task analysis and matching can involve developing \nsophisticated algorithms or AI -based systems to automate the task allocation process, taking into account not only \nskills but also team members' preferences and workload. Secondly, the realm of clear communication could benefit \nfrom studies on the impact of different communication mediums a nd tools, as well as the cultural aspects that \ninfluence effective communication in diverse software development teams. Thirdly, the establishment of \ndelegation criteria could be refined through statistical models that consider historical project data and its correlation \nwith delegation outcomes. Moreover, empirical studies might unveil the nuances of empowerment and \naccountability, shedding light on the psychological factors that influence team members' sense of ownership. \nAdditionally, research could delv e into innovative ways of monitoring and feedback using advanced analytics and \nnatural language processing techniques. Risk management might benefit from predictive analytics models that \nforecast potential risks based on historical patterns and project att ributes. The exploration of training and skill \ndevelopment could involve designing personalized learning paths based on individual team members' learning \nstyles and preferences, leveraging insights from educational psychology. For delegation tools and tech nologies, \nfuture work may involve the development of AI -driven tools that not only assist in task allocation but also facilitate \nreal-time resource allocation and optimization. The definition and measurement of performance metrics could be \nfine-tuned throu gh comprehensive benchmarking studies, while adaptation and continuous improvement could be \ninformed by agile maturity models and organizational change management theories. These directions for future \nresearch would contribute to a more comprehensive under standing of effective delegation in software management \nand provide actionable insights for practitioners aiming to enhance project efficiency.  \n \nReferences  \n- Al-Saqqa, S., Sawalha, S., & AbdelNabi, H. (2020). Agile software development: Methodologies and trends. International Journal \nof Interactive Mobile Technologies, 14 (1), 36 -43. \n- Athey, T. (1998). Leadership challenges for the future [of the software industry]. IEEE Software , 72-77. doi:10.1109/52.676747  \n- Baird, A., & Maruping, L. (2021). The Next Generation of Research on IS Use: A Theoretical Framework of Delegation to and \nfrom Agentic IS Artifacts. MIS quarterly, 45 (1), 315 -341. \n- Clark, T. J., Jones, M., & Armstrong, C. (2007). The dynamic structure of management support systems: theory development, \n\n \n research focus, and direction. MIS quarterly , 579 -615. \n- F.A.Z, G., & R.D.F.S.M, R. (2020). Leadership and performance of the software development team: Influence of the type of \nproject management. Revista Brasileira de Gest\u00e3o de Neg\u00f3cios, 21 , 970 -1005.  \n- Goericke, S. (2020). The future of software quality assurance.  Springer Nature.  \n- Klein, K. J., Ziegert, J. C., Knight, A. P., & Xiao, Y. (2006). Dynamic Delegation: Shared, Hierarchical, and Deindividualize d \nLeadership in Extreme Action Teams. Administrative Science Quarterly, 51 (4), 590 -621. \n- Li, Y., Tan, C. -H., & Teo, H. -H. (2012). Leadership characteristics and developers\u2019 motivation in open source software \ndevelopment. Information & Management, 49 (5), 257 -267. \n- Morrison -Smith, S., & Ruiz, J. (2020). Challenges and barriers in virtual teams: a literature review. SN Applied Sciences. SN \nApplied Sciences, 2 , 1-33. \n- Nordb\u00e4ck, E., & Espinosa, J. (2019). Effective coordination of shared leadership in global virtual teams. Journal of Management \nInformation Systems, 36 (1), 321 -350. \n- Overton, A. R., & Lowry, A. C. (2013). Conflict management: difficult conversations with difficult people. Clin Colon Rectal Surg, \n26(4), 259 -264. doi:10.1055/s -0033 -1356728  \n- Peesker, K., Ryals, L., Rich, G., & Boehnke, S. (2019). A qualitative study of leader behaviors perceived to enable salespers on \nperformance. Journal of Personal Selling and Sales Management, 39 (4), 319 -333. \ndoi:DOI:10.1080/08853134.2019.1596816  \n- Popa, O., Mihele, C., F\u0103g\u0103r\u0103\u0219an, C., & P\u00eesl\u0103, A. (2021). Leadership approach towards Agile, Waterfall and Iterative \nimplementation of the software development products. IOP Conference Series: Materials Science and Engineering, \n1169 (1), 1 -10. \n- Spiegler, S. V., Heinecke, C., & Wagner, S. (2021). An empirical study on changing leadership in agile teams. Empirical Softw are \nEngineering. Empirical Software Engineering, 26 , 1-35. \n- Steffel , M., Williams, E. F., & Perrmann -Graham, J. (2016). Passing the buck: Delegating choices to others to avoid responsibility \nand blame. Organizational Behavior and Human Decision Processes, 135 , 32-44. \n- Weerasinghe , T. (2022). Importance of effective delegation in a startup or small -scale IT organizations. International Conference \non Engineering and Emerging Technologies (ICEET) , 1-5. \n- Wong, P. T. (2003). An opponent -process model of servant leadership and a typology of leadership styles. Servant Leadership \nRoundtable at Regent University, Virginia Beach . \n- Zhang, S., Tremaine, M., Egan, R., Milewski, A., O\u2019Sullivan, P ., & Fjermestad, J. (2009). Occurrence and effects of leader \ndelegation in virtual software teams. International Journal of e -Collaboration (IJeC), 5 (1), 47 -68. \n \n\n",
    "is_processed": true,
    "process_error": null,
    "content_length": 34486,
    "local_pdf_path": "data/pdfs/Effective Delegation and Leadership in Software Management_2131db67.pdf"
  },
  "arxiv_497758b3d18f58533fefbf55e255b7cb": {
    "title": "Software Development Industry In East Africa: Knowledge Management Perspective And Value Proposition",
    "url": "http://arxiv.org/pdf/1504.02017v1",
    "source": "arxiv",
    "authors": [
      "Karanja Evanson Mwangi",
      "Lawrence Xavier Thuku",
      "John Patrick Kangethe"
    ],
    "published_date": "2015-04-08T16:06:27+00:00",
    "summary": "Increased usage of the internet has contributed immensely to the growth of\nsoftware development practice in East Africa. This paper investigates the\nexistence of formal KM (Knowledge Management) initiatives in the Software\nindustry such as creation of virtual communities (Communities of practice and\ncommunities of interest); expert localization and establishment of knowledge\ntaxonomies in these communities; the knowledge transfer and sharing processes;\nincubation and Mentorship; collaborative software development and their role in\ncreating entrepreneurship initiatives and providing a building block towards\nthe knowledge economies. We propose a hybrid framework for use in KM initiative\nfocusing on Software Development in East Africa.",
    "categories": [
      "cs.SE",
      "cs.CY"
    ],
    "entry_id": "http://arxiv.org/abs/1504.02017v1",
    "meta": {
      "content_type": "academic_paper",
      "is_curated": true,
      "source_quality": 8
    },
    "content_type": "academic_paper",
    "text": "Africa Casebook  - Synergies in African Business and Management Practices                         ISBN 978-9966-1570-0-326\nAJBUMA Publishing, University of Nairobi - School of Busines VOL . I, 2012CHAPTER TWO\nSOFTWARE DEVELOPMENT INDUSTRY IN EAST AFRICA: KNOWLEDGE \nMANAGEMENT PERSPECTIVE AND V ALUE PROPOSITION\nKaranja Evanson Mwangi,  Lawrence Xavier Thuku and John Patrick Kangethe\nkaranjae@gmail.com; lthuku@symphony.co.ke; karanjae@gmail.com\nAbstract.\nIncreased usage of internet has contributed immensely to the growth of software devel -\nopment practice in East Africa. This paper  investigates   the existence of formal KM \n(Knowledge Management) initiatives in the Software industry  such as creation of virtual \ncommunities ( Communities of practice and communities of interest); expert localization \nand establishment of knowledge taxonomies in these communities; the knowledge transfer \nand sharing  processes;  incubation and Mentorship;  collaborative software development    \nand their  role in creating entreprenuership intiatives  and providing a building block to -\nwards the  knowledge economies.  We propose a hybrid framework for use in KM intiative \nfocusing on Software Development in East Africa.\nIntroduction\nResearchers in the field of knowledge management acknowledges the complexity of iso -\nlating and defining knowledge, its constituents  and their dependencies (Bergeron, 2003), \n(Bouthillier & Shearer, 2002) . Due to the interdisciplinary nature of Knowledge Manage -\nment (KM), the attempts to define these various concepts and constituents slightly differ \ndepending on the discipline of influence and context.   For the purposes of this paper, we \nidentified the following constituents:  Data, information, knowledge and instrumental un -\nderstanding.  A review on KM literature shows that there exists   variances and overlaps \nin the definitions of these constituent across the authors.(Meadow, Boyce, & Kraft, 2000)  \ndefines data as strings of elementary symbols, such as digits and letters. As they argue \nthat information is generally made up of evaluated or useful data. Knowledge has higher \ndegree of validity and has \u201ccharacteristics of information shared and agreed by a commu -\nnity\u201d. Meadow, et al. relates instrumental understanding to intelligence which they define \nas a measure of reasoning capacity.(Wiig, 1999) defines information as organized data and \nknowledge as a set truth and belief. (Bergeron, 2003) argues that data are numerical quan -\ntities drawn from observation, experiment or calculation whereas Information is applied \ndata: - \u201ccollection of data and associated explanations, interpretations, and other textual \nmaterial concerning a particular object, event, or process\u201d. Bergeron introduces metadata \nas a link between information and knowledge, which he defines as: \u201cinformation about the \ncontext in which information is used\u201d.  Knowledge is illustrated as a mix of metadata and \nawareness of the context which metadata can successfully be applied.\n\nAfrica Casebook  - Synergies in African Business and Management Practices                         ISBN 978-9966-1570-0-327\nAJBUMA Publishing, University of Nairobi - School of Busines VOL . I, 2012(Zack, 1999) defines data as observations and fact out of a context that has no direct \nmeaning and information is data within a meaningful context.  (Liew, 2007), (Govil, \n2007) observed that data must be processed (to be put into  meaningful context) to ob -\ntain information that a decision can be based on. Knowledge is derived from validated \ninformation and differentiated through experience whereas instrumental understanding \nis the utilization of accumulated knowledge.  Therefore, there is need  for proper data \nmanagement, information management and knowledge management in their hierarchical \nrelationship so as to realize the aim of KM (Govil, 2007; Hick, 2006).\nIn general the above definitions highlight the overlap   between the constituents of knowl -\nedge.  There seems to be a consensus among the authors on three  issues namely;  the \nrelationship between adjacent constituents, the validity of constituents is dependent on \nthe context  and the  hierarchical direction (Data at the bottom of the hierarchy  and in -\nstrumental understanding at the top) as illustrated in Figure 1 above (Knowledge con -\ntinuum).\nBackground Study of Knowledge Management\nThe Multi- Facet nature of Knowledge Management \nThe practice of KM has been there for a long time mainly in the informal way (Pandya \n& Xiaoming, 2003). There are numerous working definitions of  KM  (Bouthillier & \nShearer, 2002) cited  the work of    (Hlupic, Pouloudi, & Rzevski, 2002)  which identified \n18 definitions of KM in different contexts . The working definition used by the authors \nof this paper is: \u201cIs the ability of a community to create, validate, audit, share knowledge \nusing appropriate technologies to gain competitive advantage\u201d\nThe KM thinking and praxis is informed and influenced by various disciplines. (Kak -\nabadse, Kakabadse, & Kouzmin, 2003) study infers as follows on the nature and sources \nof influence: \u201c philosophy, in defining knowledge; cognitive science (in understanding \nknowledge workers); social science (understanding motivation, people, interactions, cul -\nture, environment); management science (optimizing operations and integrating them \nwithin the enterprise); information science (building knowledge-related capabilities); \nknowledge engineering (eliciting and codifying knowledge); artificial intelligence (auto -\nmating routine and knowledge-intensive work) and economics (determining priorities).\u201d\nKnowledge management is a multi- facet discipline stretching across numerous economic \n\nAfrica Casebook  - Synergies in African Business and Management Practices                         ISBN 978-9966-1570-0-328\nAJBUMA Publishing, University of Nairobi - School of Busines VOL . I, 2012sectors.  Organizations within those sectors have differing approaches based on theoreti -\ncal perceptions or practical experiences on how knowledge can be effectively managed i.e \ncreated, validated, transferred and re-used. \nKm And Intellectual Capital\nAs organization in these sectors  attempt to move the knowledge realms from cognitions \nand abilities of individuals to a vital transitional asset , they are faced with the challenge \nof organizing and leveraging its intellectual capital faster than their  competition (Bontis, \n2001) . Different studies on intangible assets identify three major components of intel -\nlectual capital namely; human capital, customer capital, and structural capital. (Bergeron, \n2003), (Jos\u00e9, 2003) , (Edvinsson & Malone, 1997), (Sullivan, 2000), (Sveiby, 1997), (Ka -\nplan & Norton, 1996). \nPike, Rylander, & Roos,( 2002) uses the term relational capital to refer to customer capital.   \nVanBuren, (1999), Hsu & Mykytyn, (2006) isolates the  structural capital to innovation \ncapital and process capital and argues that there exist an intuitive link between the various \ncomponents of intellectual capital.  The effective management of these intellectual capital \ncomponents and their inter-relationship is an important step towards organizational learn -\ning and market leadership. \nNumerous researchers have investigated the KM and Intellectual capital issues from an \norganizational perspective.  In this paper we extend the concept of intellectual capital and \nKM beyond the organization view to a community view of knowledge that spans among \ndifferent organizations and individuals who practice or have interest in software develop -\nment. Recent advances in software development especially emergence of active commu -\nnities (localized or virtual) have necessitated critical consideration of KM as an integral \npart of the practice and success of software industry (Hemetsber ger & Reinhardt, 2003). \nKnowledge Management practice in East Africa\nThe East Africa Region is made up of three nations; Kenya, Uganda and Tanzania.  KM \nhas been going on informally and intuitively in the East African region.  Empirical study  \nbased on a Kenyan perspective that shows of KM initiatives are firm based (Mosoti & \nMasheka, 2010).    Organizations  in the East Africa region uses  in-house approaches or \nstrategic partnerships as  ways of realizing  Knowledge management, however to measure \nthe effectiveness of these practices is difficult due existing organizational culture and vo -\ncational reinforcers that induce the notion that knowledge sharing among organizations \nin the similar or complementary industries  may reduce their competitive advantage and  \nmarket leverage.  Formal KM is an emergent area with great value proposition in Africa \n(Karanja, 2010) .  Knowledge Management Africa (KMA) is one of the new initiatives \nthat aim at driving KM initiatives in Africa. \nThe African Medical and Research Foundation (AMREF) is an organization headquar -\ntered in Nairobi \u2013 Kenya with operations in seven African countries i.e.  Kenya, Uganda, \nEthiopia, Somalia, Tanzania, South Sudan, and South Africa. AMREF is facilitating a \ncommunity participatory approach to knowledge Management in the health sector. AM -\n\nAfrica Casebook  - Synergies in African Business and Management Practices                         ISBN 978-9966-1570-0-329\nAJBUMA Publishing, University of Nairobi - School of Busines VOL . I, 2012REF has partnered with local communities, health system formulators and governments \nwith an aim of realizing right to health for all (Ireri & Wairagu, 2007). \nKora, (2006) evaluates the viability of Information and Communication Technologies \n(ICT) as a KM strategy in rural development in Tanzania.  None of the KM research \ninitiatives in East Africa has formally focused on Software development, despite being a \nprominent contributor in the region\u2019s emerging knowledge economy. \nKnowledge Management  Models  \nKakabadse et al., (2003) while extending  the work of Swan & Newell, (2000) provided \nfor Five useful models of KM , where each model treat  KM initiatives differently. They \nidentified the models as follows:\nPhilosophy based model \u2013 it\u2019s concerned with the epistemology of knowledge or what \nconstitutes knowledge, the relationship of the constituents and other notions such as truth, \njustification, causation, doubt and revocability.  The model provides a high level perspec -\ntive that requires reflections in areas of practice. It\u2019s mainly grounded on Socratic view \nof knowledge as justified true belief and wisdom as highest constituent in the knowledge \ncontinuum. Proponents of this model argue that KM needs not be technology centred.\nCognitive Model \u2013: this model is rooted on recognition of knowledge as an economic \nasset. It focuses on organisational perspective of knowledge and considers ICT as an \nenabler of the knowledge management process.  (Swan & Newell, 2000), (Zack, 1999) \nquestions the application of this model and its variants such as  SECI Model (Social -\nization, Externalization, Combination, Internalization) proposed by (Nonaka & Konno, \n1998)  in rapidly changing environment characterized by  technology discontinuity   such \nas  software development. \nNetwork model is based on socialization of knowledge and relationships of actors; the \nmodel highlights the role of social patterns between individuals and interest groups in \nknowledge creation, sharing and transfer. It has the advantage of focusing on external \nsources of knowledge through interest and practice   networks.  It inoculates the collab -\norative aspect  of creating knowledge and sharing which is a key factor in software devel -\nopment especially in geographically dispersed teams (Hemetsberger & Reinhardt, 2003). \nCommunity of practice (CoP) model  -:  the term CoP was coined by Jean Lave and \nEtienne Wenger, who described it as \u201cgroups  of people informally bound together by \nshared expertise and passion for a joint enterprise\u201d(Wenger & Snyder, 2000) .The work \nof  (Sharratt & Usoro, 2003) differentiated CoP from usual work teams and organizational  \nfunctional units in that  they are self organizing systems  and their existence is guided by \nmembership perceived gains. These communities are not constrained by time and space \nand can span beyond organizational boundaries.\n \nSwan & Newell, (2000) contend that trust based rules of engagement are a critical factor \nto the success of this model. This model provides a good background for KM initiatives \nin software engineering especially open source development.\n\nAfrica Casebook  - Synergies in African Business and Management Practices                         ISBN 978-9966-1570-0-330\nAJBUMA Publishing, University of Nairobi - School of Busines VOL . I, 2012Quantum Model  is  based on recent advances in quantum computing , the assumes that \napplication of quantum computing to the constituents of knowledge will lead to high level  \ncomplexity and improved rationality in decision making   as actors in given scenarios in \na the context of application.  This model is not appropriate for use in low resourced com -\nmunities.\nKnowledge Management in Software Development \nThere are  two scenarios on human generated uncertainty in the software development \n(Dekhtyar, Hayes, & Goldsmith, 2007). They include:\nUncertainty on the process which includes issues like : How long will it take?, what is the \nmost efficient development methodology?, the choice of language and environment\nUncertainty on the product which includes issues like: How much of security features is \nrequired (the tradeoff between usability and security).There is increasing use of  Global \nSoftware Development (GSD) teams inform of  globally distributed subsidiaries  of the \nsame organization, outsourced companies, open source communities or  collaborating  \nvirtual companies  which are  distributed globally working on complex software projects \n(Avram, 2007; Hemetsberger & Reinhardt, 2003).  Integration of KM in the Software de -\nvelopment environment context can be used to improve on the quality of the product (pro -\ncess output), the process quality itself and reduce on uncertainty associated with software \ndevelopment. Software development regardless of the nature and the level of uncertainty \nis collaborative and requires intensive human decision especially when adaptive develop -\nment methodologies are used (Dekhtyar et al., 2007).  Throughout the software develop -\nment lifecycle, collaboration is among actors with differing expertise. \nWe formulate three scenarios that illustrate the different levels of differing expertise that \nresult from level of experience gained through practice and/or Interest: Scenario 1:  Where \nthe customer is a research hospital in need of Hospital Management software, the cus -\ntomer may understand his domain well i.e.  medicine and hospital management but may \nhave zero knowledge on software domain. The customer may even have the knowledge \non the application of softwares in his domain but not the development of softwares. Sce-\nnario 2 :  In an open source community developing antivirus software may have medical \ndoctors with interest (Community of Interest) in the study of computer viruses and other \nmalicious software, they may have Zero knowledge on the software development but their \ndomain expertise on viruses is necessary for the success of the project. Scenario 3:   In a \nGlobal Software Development (GSD) all stages in the software development lifecycle are \ncarried in culturally diverse environments,   the software engineers may have differing \nexperiences in the practice of software engineering.\nThe Hybrid Framework for KM in Software Engineering\nTo cater for these unique circumstances as illustrated through the three scenarios given \nabove, for example, the presence of both communities of interest and communities of \npractice. We therefore, propose a hybrid framework for KM process that blends philo -\nsophical, cognitive, CoP and network models and   can be effective in software develop -\nment environment. \n\nAfrica Casebook  - Synergies in African Business and Management Practices                         ISBN 978-9966-1570-0-331\nAJBUMA Publishing, University of Nairobi - School of Busines VOL . I, 2012The Figure below shows the proposed hybrid framework. The stages of knowledge man -\nagement in software development within the framework are: Knowledge Creation ; Vali -\ndation and Audit; Transfer; Consolidation  of best practices; Documentation\nIn the next sub-sections, we discuss the granules that make up each of the stages and \nhighlight its building blocks of achieving a comprehensive KM process in the software \ndevelopment and its probable implementation in East Africa.\nKnowledge Creation\nKnowledge creation is the most important area of focus within knowledge management  \nsince this  stage inputs  have  far reaching effects on the preceding stages of the KM \nframework  (Wickramasinghe, 2006). \nKnowledge can be created  by people and/or technologies or be embedded in processes as \nshown in the Figure below KM Triad adapted from  (Wickramasinghe, 2006). \nIn GSD, knowledge creation involves virtual teams each made up of the three aspects \npeople, technologies and processes who can either be localized or distibuted.  The knowl -\nedge creation process in group environment has be dealt with in depth by (Drach-Zahavy \n& Somen, 2001; Gibson, 2001; Mitchell & Nicholas, 2004, 2006) (Mitchell & Nicholas, \n2006).Their  studies identifies four group knowledge creating processes . The first process \nis accumulation of knowledge on individuals originating from their functional areas or \npractice. The authors identify only the communities of practice as the probable affiliation \nof these individuals. In software development, the communities of interest have signifi -\ncant role in building shared knowledge base. These individuals who have interest in the \n\nAfrica Casebook  - Synergies in African Business and Management Practices                         ISBN 978-9966-1570-0-332\nAJBUMA Publishing, University of Nairobi - School of Busines VOL . I, 2012software environment are not bounded by practice but context of interest.  In our proposed \nframework both communities are considered.\nThe second Process is Interaction; this involves team sharing the accumulated individu -\nalistic knowledge to create new individual and team knowledge. Since Knowledge is \ncontext dependant, members of localized or virtual teams are influenced by their inter -\nest to participate in this process. In software development and virtual teams this process \ninvolves collaborative technologies such as groupware. Analysis is the third process of \ngroup knowledge creation; in this process group members explore their experiences in \ncomparison with other team members.  Group analogical   reasoning  in software engi -\nneering  have numerous applications across the development lifecycle  such as require -\nments engineering  where customers view the system largely  from the usability perspec -\ntive (usability requirements) are  able to share with developers .\nThe fourth process is integration and creation which encapsulates consensus building \non the experiences and analogies. It can be facilitated through story telling. To sustain \nthe group knowledge creation and the preceding stages of the hybrid framework, two \nmajor continuous activities are   initiated:Laying foundation for building   knowledge \ntaxonomies.(Whittaker & Breininger, 2008) provides a detailed approach on building \ntaxonomies;Community Social Network Analysis (SNA) for measuring centrality and \nexpert localization. The study by  (Dekker & Hendriks, 2006) lay much emphasizes on \nSocial Network Analysis. \nKnowledge Validation and Audit \nVarious roles and tools are emergent in the process of building taxonomies and expert \nlocalization. Using  an organizational perspective of KM, there are various roles and tools \nthat may emerge in the organization to carry out key steps in KM validation and audit \n(Modification, translation and Repurposing (Rao, 2005).  (See Figure below: Madanmo -\nhan Rao on Roles online Communities)  \nThere are other authors who discuss an organizational and a community view of knowl -\nedge management (Bourhis, Dub\u00e9, & Jacob, 2005; Fontaine, 2001). They illustrate  vari -\nous roles in knowledge validation and audit,  highlighting the role of leadership as a \ncritical pillar in Online Community Knowledge Validation and audit   see Figure below; \nTypology of community roles .adapted from (Bourhis et al., 2005; Fontaine, 2001)\n\nAfrica Casebook  - Synergies in African Business and Management Practices                         ISBN 978-9966-1570-0-333\nAJBUMA Publishing, University of Nairobi - School of Busines VOL . I, 2012\nTechniques such as members\u2019 contribution valuation through community assessment, rat -\ning/ ranking/ scoring can be used. This is a common practice in existing online user com -\nmunities. \nKnowledge Transfer \nEffective transfer of Knowledge between knowledge  workers is one of the key chal -\nlenges in KM (Alavi & Leidner, 2001; Joshi, Saonee.Sarker, & Sarker, 2004) . (Jacobson, \n2006) defines knowledge transfer as: \u201cAn exchange of knowledge in which the focus is \non structural capital (knowledge that has been built into processes, products, or services) \nand on the transformation of individual knowledge to group knowledge or organizational \nknowledge\u201d\nIn tandem with our proposed framework  , (Jacobson, 2006)  definition  reinforces the \nview that there must  exist a normative  structure that provides for  knowledge flow in the \nintended community.  (King, 2006) gives an organizational view in the transfer process \nand argues that knowledge transfer is effective if the sender and receiver are in homoge -\nneous contexts.  Self motivation of knowledge workers, awareness and acceptance of the \ntransfer goals are some of factors positively influence knowledge transfer . \nDocumentation and consolidation of best practices.\nThese stages cater for the future use of assimilated knowledge. In software development, \nknowledge reuse can be seen as an extension of components re-use that reduce on new \nsoftware development costs.  Lesson learnt systems can be used to catalogue the expe -\nriences gained through all the stages of knowledge management for knowledge reuse.\nKnowledge  calibration  is the correspondence between  accuracy of knowledge and con -\nfidence of knowledge  as a reliable  base where knowledge workers can confidently base \ntheir decision (Goldsmith & Pillai, 2006). A detailed literature   on  knowledge calibration \nis available  in  (Goldsmith & Pillai, 2006). \n\nAfrica Casebook  - Synergies in African Business and Management Practices                         ISBN 978-9966-1570-0-334\nAJBUMA Publishing, University of Nairobi - School of Busines VOL . I, 2012Conclusions and Areas of Further Research  \nThe paper begins with an introduction to KM and a brief review of KM initiatives. Then \nan exploratory literature study on existence of KM initiative is carried out on software \ndevelopment in East Africa which focuses beyond the organizational view. The study es -\ntablishes there is no formal study or open initiative for KM in   software development in \nthe region. Based on these findings, we explored the existing major models of KM on their \nviability and application in software development. Following an assessment of individual \nmodels, we propose a generic framework that blends the four major models. The proposed \nframework is intended to be the starting point for KM initiative among stakeholders in the \nsoftware industry in East Africa. The authors discuss the various stages of this framework \nand their output. We confer that the   use of this framework can help the software develop -\ners in East Africa create, use and share valuable experiences that will give them competi -\ntive advantage in the global market. What remains to be seen is how this framework can \nbe incorporated to formalize the KM initiative among the software development commu -\nnity. We suggest research be undertaken for determining: Comparative effectiveness of \nthe proposed framework in the development of local mobile content; The benchmarking \nstandards for best practices. An empirical study can be conducted; The viability of devel -\noping and using open source technologies that extends beyond cultural barriers such as \nuse of natural language processing facilities at various stages of this framework. \nReferences\nAlavi, M., & Leidner, D. E. (2001). Knowledge management and knowledge manage -\nment systems - conceptual foundations and research issues. MIS Quarterly, 25 (1).\nAvram, G. (2007). Knowledge Work Practices in Global Software Development. The \nElectronic Journal of Knowledge Management, 5 (4), 347-356.\nBergeron, B. (2003). Essentials of knowledge management . Hoboken, New Jersey: John \nWiley & Sons, Inc.\nBontis, N. (2001). A Review of the Models Used to Measure Intellectual Capital. Inter -\nnational Journal of Management Review, 3 (1), 41-60.\nBourhis, A., Dub\u00e9, L., & Jacob, R. (2005). The Success of Virtual Communities of Prac -\ntice: The Leadership Factor. The Success of Virtual Communities of Practice: The \nLeadership Factor, 3 (1), 23-34.\nBouthillier, F., & Shearer, K. (2002). Understanding knowledge management and infor -\nmation management: the need for an empirical perspective. Information Research, \n8(1), 141.\nDekhtyar, A., Hayes, J., & Goldsmith, J. (2007). Uncertainty as the Source of Knowl -\nedge Transfer Opportunity, Software  Engineering.  Paper presented at the 1st Inter -\nnational Workshop on Living with Uncertainties (IWLU01), Atlanta, GA.\nDekker, D. J., & Hendriks, P. H. J. (2006). Social Network Analysis. In D. Schwartz \n(Ed.), Encyclopedia of knowledge management  (pp. 818-825): Idea Group.\nDrach-Zahavy, A., & Somen, A. (2001). Understanding team\u2019s innovation: The role of \nteam processes and structures. Group dynamics, 5 (2), 111-123.\n\nAfrica Casebook  - Synergies in African Business and Management Practices                         ISBN 978-9966-1570-0-335\nAJBUMA Publishing, University of Nairobi - School of Busines VOL . I, 2012Edvinsson, L., & Malone, M. S. (1997). Intellectual Capital: Realizing Your Company\u2019 s \nTrue Value by Finding Its Hidden Brainpower  (1 ed.): HarperBusiness.\nFontaine, M. (2001). Keeping communities of practice afloat. Knowledge Management \nReview, 4 (4), 16-21.\nGibson, C. (2001). From knowledge accumulation to accommodation: cycles of collec -\ntive cognition in work groups. Journal of Organizational Behavior, 22 (2), 121-134.\nGoldsmith, R. E., & Pillai, K. G. (2006). Knowledge Calibration. In D. Schwartz (Ed.), \nEncyclopedia of Knowledge  (pp. 311-316): Idea House.\nGovil, R. (Ed.) (2007). The World of Knowledge Management.\nHemetsberger, A., & Reinhardt, C. (2003). Sharing and Creating Knowledge in Open-\nSource Communities .The case of KDE.  Paper presented at the Proceedings of The \nFifth European Conference on Organizational Knowledge, Learning, and Capabili -\nties (OKLC) 2003, Innsbruck.\nHick, R. C. (2006). The Five Tier Knowledge Management Hierarchy. Journal of \nKnowledge Management Practice, 10 (1), 19-27.\nHlupic, V ., Pouloudi, A., & Rzevski, G. (2002). Towards an integrated approach to \nknowledge management: \u2018hard\u2019, \u2018soft\u2019, and \u2018abstract\u2019 issues. Knowledge and Pro -\ncess Management, 9 (2), 90-102.\nHsu, H., & Mykytyn, P. (2006). Intellectual Capital. In D. Schwartz (Ed.), Encyclopedia \nof knowledge management  (pp. 274-280): Idea Group.\nIreri, J. W., & Wairagu, A. M. (2007). Bridging the \u2015Knowledge-how and the \u2017Knowl -\nedge-do Gap in Public Health in Africa: From Traditions to E:AMREF\u2018s Role \nand Experiences in Health Information Dissemination . Paper presented at the The \nKnowledge Management Africa (KMA) second biennial conference. \nJacobson, C. M. (2006). Knowledge sharing between individuals In D. Schwartz (Ed.), \nEncyclopedia of Knowledge  (pp. 507-514): Idea Group.\nJos\u00e9, M. V . M. (2003). In Search of an Intellectual Capital General Theory. Electronic \nJournal on Knowledge Management, 1 (2), 213- 226.\nJoshi, K., Saonee.Sarker, & Sarker, S. (2004). Knowledge transfer among face-to-face \ninformation systems development team members: Examining the role of knowl -\nedge, source, and  relational context.  Paper presented at the 37th Hawaii Interna -\ntional Conference on System Sciences.\nKakabadse, A., Kakabadse, N., & Kouzmin, A. (2003). Reviewing the knowledge man -\nagement literature: towards a taxonomy. Journal of Knowledge Management, 7 (4), \n75.\nKaplan, R. S., & Norton, D. P. (1996). The Balanced Scorecard: Translating Strategy \ninto Action  (1 ed.): Harvard Business Press.\nKaranja, M. (2010, 6 May ). Knowledge management: The next big job in Africa . \nBusiness Daily from http://www.businessdailyafrica.com/Knowledge%20man -\nagement%20The%20next%20big%20job%20in%20Africa/-/539444/912686/-\n\n",
    "is_processed": true,
    "process_error": null,
    "content_length": 28975,
    "local_pdf_path": "data/pdfs/Software Development Industry In East Africa_ Knowledge Management Perspective And Value Proposition_e255b7cb.pdf"
  },
  "arxiv_6cb567090782fa1d7b0fd567340091e0": {
    "title": "Female Leadership in Software Projects: A Preliminary Result on Leadership Style and Project Context Factors",
    "url": "http://arxiv.org/pdf/1709.07676v1",
    "source": "arxiv",
    "authors": [
      "Anh Nguyen-Duc",
      "Soudabeh Khodambashi",
      "Jon Atle Gulla",
      "John Krogstie",
      "Pekka Abrahamsson"
    ],
    "published_date": "2017-09-22T10:17:51+00:00",
    "summary": "Women have been shown to be effective leaders in many team-based situations.\nHowever, it is also well-recognized that women are underrepresented in\nengineering and technology areas, which leads to wasted efforts and a lack of\ndiversity in professional organizations. Although studies about gender and\nleadership are rich, research focusing on engineering-specific activities, are\nscarce. To react on this gap, we explored the experience of female leaders of\nsoftware development projects and possible context factors that influence\nleadership effectiveness. The study was conducted as a longitudinal multiple\ncase study. Data was collected from survey, interviews, observation and project\nreports. In this work, we reported some preliminary findings related to\nleadership style, team perception on leadership and team-task context factors.\nWe found a strong correlation between perceived team leadership and task\nmanagement. We also observed a potential association between human-oriented\nleading app...",
    "categories": [
      "cs.SE",
      "cs.CY"
    ],
    "entry_id": "http://arxiv.org/abs/1709.07676v1",
    "meta": {
      "content_type": "academic_paper",
      "is_curated": true,
      "source_quality": 8
    },
    "content_type": "academic_paper",
    "text": "Female Leadership in Software Projects \u2014A Preliminary Result on Leader-\nship Style and Project Context Factors.\nByNguyen-Duc A., Khodambashi S., Gulla J .A., Krogstie J., Abrahamsson P\nThis is th e author's version of the work.\nThe definite version was published in: Nguyen-Duc A., Khodambashi S.,\nGulla J.A., Krogstie J., Abrahamsson P. (2018) Female Leadership in Soft-\nware Projects \u2014A Preliminary Result on Leadership Style and Project Con-\ntext Factors. In: Kosiuczenko P., Madeyski L. (eds) Towards a Synergistic\nCombination of Research and Practice in Software Engineering. Studies in\nComputational Intelligence, vol 733. Springer, Cham .\nhttps://doi.org/10.1007/978 -3-319-65208-5_11\n\nThis is th e author's version of the work. The definite version was published in: Nguyen-Duc A., Khodambashi S., Gulla J.A., Krogstie J., Abrahamsson P. (2018) Female Leadership in Software Projects \u2014A\nPreliminary Result on Leadership Style and Project Context Fac tors. In: Kosiuczenko P., Madeyski L. (eds) Towards a Synergistic Combination of Research and Practice in Software Engineerin g. Studies in\nComputational Intelligence, vol 733. Springer, Cham .https://doi.org/10.1007/978 -3-319-65208-5_11\nFemale leadership in software projects \u2013A preliminary result on\nleadership style and project context factors\nAnh Nguyen -Duc1,2,Soudabeh Khodambashi1, Jon Atle Gulla1,John\nKrogstie1,Pekka Abrahamsson1,3\nAbstract: Women have been shown to be effective leaders in many team -based situations . However, it is\nalso well -recognized that women are underrepresented in engineering and technology areas , which leads to\nwasted efforts and a lack of diversity in professional organizations. Although studies about gender and\nleadership are rich, research focusing on engineering -specific activities, are scarce. To react on this gap, w e\nexplored the experience of female leaders of software development projects and possible context factors that\ninfluence leadership effectiveness. The study was conducted as a longitudinal multiple case stud y. Data was\ncollected from survey, interviews, observation and project reports. In this work, we reported some preliminary\nfindings related to lea dership style, team perception on leadership and team -task context factors. We found a\nstrong correlation between perceived team leadership and task management. We also observed a potential\nassociation between human -oriented leading approach in low custome r involvement scenarios and task -\noriented leading approach in high customer involvement situations .\nKeywords :female leadership, software engineering, contingency model, project contextual factors, team coordination,\nteam performance\n1 Introduction\nThe rise of female workforce has recently gained attention as an upcoming par-\nadigm shift in modern organizations and professional teams. Women have been\n1A. Nguyen -Duc, S.Khodambashi , J.Atle Gulla , J.Krogstie, P.Abrahamsson\nNorwegian University of Science and Technology\nDepartment of Computer and Information Science\ne-mail:{anhn,soudabeh, jon.atle.gulla, john.krogstie, pekkaa}@ntnu.no\n2A. Nguyen -Duc\u2019s second affiliation\nUniversity College of Southeast Norway\nDepartment of Business Administration and Computer Science\n3P.Abrahamsson \u2019s second affiliation\nUniversity of Jyv\u00e4skyl\u00e4\nFaculty of Information Technology\n\nThis is th e author's version of the work. The definite version was published in: Nguyen-Duc A., Khodambashi S., Gulla J.A., Krogstie J., Abrahamsson P. (2018) Female Le adership in Software Projects \u2014A\nPreliminary Result on Leadership Style and Project Context Fac tors. In: Kosiuczenko P., Madeyski L. (eds) Towards a Synergistic Combination of Research and Practice in Software Engineerin g. Studies in\nComputational Intelligence, vol 733. Springer, Cham .https://doi.org/10.1007/978 -3-319-65208-5_11\nfound to be effective leaders in team -based, consensually -driven organizational\nstructures that are becoming more and more popular [1, 6]. In STEM (Science,\nTechnology, Engineering and Mathematics), however, women are still under -\nrepresentative. Averaged across the globe , women accounted for less than a third\n(28.4%) of those employed in scientific research and d evelopment (R&D) in 2013\n[4].Although women holdclose to45%all jobs in the U.S. economy, they take\nless than 25% of STEM jobs [5].The underrepresentation of women in STEM is\nproblematic as it results in the waste of talent s, gender diversity and creat ivity in\nprofessional workplaces.\nDespite of a rich literature on gender studies, research seems still inconclusive\nabout the reasons for the underrepresentation of women in STEM, and more im-\nportantly, how to deal with that. Many scholars believe that the existence of gen-\nder stereotypes is one of the main reasons [8 -10], as the traditional male -biased\npractices and leadership norms function to exclude women [12].There is an in-\ncreasing attention to the gender topic in IT, i.e. Software Engineering (SE) area .A\nsearch in theScopus database at 21stMarch, 2017 gave us 88 peer -reviewed publi-\ncations about gender -related topics in SE area. This number is very modest com-\npared to gender studies in other fields, i.e. Business and Management.\nWith the important role of software in modern informational and cyber -\nphysical products, understanding human factors of software development, includ-\ning the gender perspective, is essential to design a processes, practices and guide-\nlines that best utilize t he available workforces. To react on this abovegap, we\nconducted a research on female leadership in software development projects,with\nthe aim of understanding the relationship between SE -specific context factors,\ngender stereotype and leadership. Inheriting from a body of knowledge o n gender\nand leadership, we do not focus on differentiating male and female leadership be-\nhaviors. Instead, we would like to know if there are project situations that best\nsupports female leadership. Our general research quest ion is:How can we char-\nacterize the female leadership under different software project situations?\nThe paper presents our research design and preliminary results for analyzing\nwomen leadership styles and their leading situations in term of team and task\ncharacteristics .\nThe paper is organized as follow s: Section 2 briefly presents background on\nleadership and gender studies, and state -of-the-art on gender study on SE. While\nSection 3 presents research methodology , Section 4 describes our preliminary\nfindings and discussion. Section 5 is the conclusion and future work.\n\nThis is th e author's version of the work. The definite version was published in: Nguyen-Duc A., Khodambashi S., Gulla J.A., Krogstie J., Abrahamsson P. (2018) Female Leadership in Software Projects \u2014A\nPreliminary Result on Leadership Style and Project Context Fac tors. In: Kosiuczenko P., Madeyski L. (eds) Towards a Synergistic Combination of Research and Practice in Software Engineerin g. Studies in\nComputational Intelligence, vol 733. Springer, Cham .https://doi.org/10.1007/978 -3-319-65208-5_11\n2   Background\n2.1.Gender and leadership\nLeadership: a clear definition of what \u201cleadership\u201d r emains somewhat elusive\nas numerous definitions of \u201cleadership\u201d has been found in literature. We found\nsome definitions that apply well to understand female leadership in our context\nsetting: \u201cbehavior of an individual . . . directing the activities of a group toward a\nshared goal \u201d[43], and \u201c \u2026 ability of an individual to influence, motivate, and en-\nable others to contribute toward the effectiveness and success of the organization\n\u2026\u201c [3]\nGender stereotyping: researchhas produced various theories about whether\nleadership traits and behaviors differ between men and women a s distinctive bio-\nlogical group s. First of all, one needs to understand gender a multidimensional\npersonality characteristic most commonly described by the difference in term of\n(1) biology and sex, (2) gender role, (3) causal factors and (4) attitudinal drivers\n[15].Gender stereotypes aresomewhat culturally shared beliefs that dictate expec-\ntations about how women and men are and how they ought to behave [20]. Thus,\nstereotypes can be both descriptive and prescriptive in nature. Perceived feminine\ncompetences, which are required in STE M, include, for instance, communication\ncompetences, customer and workplace relationship competences, and creativity\n[16, 17]. Technical competences, such as programming software architecture, are\nperceived as being fundamentally attached to male [18, 19].\nLeadership style :such asrelationship -oriented and task -oriented styles [30],\ntransformational and transactional styles[1, 2, 15], and directive and participative\nleadership [38] have been an important topic in literature of gender and leadership.\nContingency approach suggests that not only the traits and behaviors of a leader\ncan explain for leadership effectiveness, but also the situation that the leader is at\n[30, 41, 42]. Fiedler developed the LPC Contingency Model, which focuses on the\nrelationship between a trait termed the \u201cleast preferred coworker\u201d (LPC) score and\nleadership effectiveness. Heconcluded that the mos t favorable situations for lead-\ners were those in which they were well liked (good leader -member relations), di-\nrected a well -defined job (high task structure), and had a powerful position (high\nposition power) [30, 41, 42] .\nGender and leadership: other style category describes gender difference in\nterm of transformational and transactional leadership [21]. Transformational lead-\ners are characterized as inspiring, motivating, being attent ive to and intellectually\nchallenging their followers, wheretransaction al leaders are described as contrac-\ntual, corrective, and critical in their interactions with employees [21]. Female\nleaders were found to be more transformational than male leaders and also en-\ngaged in more of the contingent reward behaviors that are a comp onent of transac-\n\nThis is th e author's version of the work. The definite version was published in: Nguyen-Duc A., Khodambashi S., Gulla J.A., Krogstie J., Abrahamsson P. (2018) Female Le adership in Software Projects \u2014A\nPreliminary Result on Leadership Style and Project Context Fac tors. In: Kosiuczenko P., Madeyski L. (eds) Towards a Synergistic Combination of Research and Practice in Software Engineerin g. Studies in\nComputational Intelligence, vol 733. Springer, Cham .https://doi.org/10.1007/978 -3-319-65208-5_11\ntional leadership [1].Overall, researchers have asserted that there is no \u201c one style\nfits all\u201d solution to leadership issues and that the efficacy of various styles is con-\ntextual [22,23]. While there are some differences between men and w omen when\nit comes to style, these differences do not lead to a clear advantage of either gen-\nder across contexts [ 2].\n2.2. Gender lens in SE\nSE research on gender is heavily driven by theories of gender stereotyping. In\nrequirement engineering tasks, f emale performances are associated with personal\nfactors. Less success is expected and achievements are less attributed to the own\nabilities[24]. Multiple case studies on women in course -based software projects\ncharacterize the collaborative learning environme nts for women participating [28].\nThe authors identified four common themes: working with others; productivity;\nconfidence; and interest in IT careers. One key finding was that c ollaboration ,\nemerging from face -to-face meetings ,helps female students tobuild confidence\nvia higher quality products andto reduce amount of time spent on assignments\n[28].\nSE researchalso focuses on howmenandwomenwork differently regarding to\nspecialized SE tasks. In term of coding, it is found to be different compatibilit y\nand communication level sbetween same gender pair and mixed gender pair [25].\nWomenwere found to often develop deficient elements and inappropriate strate-\ngies in complex problem solving. Womentend to use bottom -up strategies while\nmenare more risk prone and use more top -down strategies [ 29].Regarding to\nquality assurance and testing, female developers expressed a lower level of self-\nefficacy than males did about their abilities to debug [26]. Further, womenwere\nless likely than male s were to accept the new debugging features. Although there\nwas no gender difference in fixing the seeded bugs, womenintroduced more new\nbugs\u2014which remained unfixed. There was also evidence on the difference be-\ntween programming environments as to which fe atures men and women use and\nexplore [27].\n3. Research approach\n3.1. Conceptual framework\nStarting from the demand of understanding women\u2019s participation in SE, we\ngathered several factors that were found to be relevant to leadership effectiveness\n\nThis is th e author's version of the work. The definite version was published in: Nguyen-Duc A., Khodambashi S., Gulla J.A., Krogstie J., Abrahamsson P. (2018) Female Leadership in Software Projects \u2014A\nPreliminary Result on Leadership Style and Project Context Fac tors. In: Kosiuczenko P., Madeyski L. (eds) Towards a Synergistic Combination of Research and Practice in Software Engineerin g. Studies in\nComputational Intelligence, vol 733. Springer, Cham .https://doi.org/10.1007/978 -3-319-65208-5_11\nand team performance, as illustrated in Figure1.  The factors were found from lit-\nerature as influencing factors to team performance. Based on the situational lead-\nership appr oaches [30, 41], we identify factors related to leaders\u2019 characteristics:\n\uf0b7Leadership style :leadership styles, such as human-oriented style and task -\noriented style [30], transformational and transactional styles[1, 2, 15], and di-\nrective and participative leadership [38] is an important variable in literature of\ngender and leadership .In this study, we do not focus on exploring the differ-\nence of leadership styles between women and men as it has been extensively\nresearched. To simplify the identification of leadership style, we adopted the\nFiedler LPC Contingency model [30, 41, 42].\n\uf0b7Leaders\u2019 experience : personal characteristics, such as females\u2019 interest in IT\ncareers[28], previous experience with leadership [39], personality [39] can in-\nfluence the leadershi p effectiveness in a given situation. It is found that if\nwomenhave no task -specific experience, theydo not feel confident while\nmales apply general knowledge for specific tasks [ 29].We expect to gather as\nmuch information about leadership\u2019s characteris tics as possible via interviews\nand informal discussions.\n\uf0b7Leadership self -perception on herability of decision making, inter -personal\nmanagement and task management could give a proxy to understand leadership\nbehavior and indirectly team performance.\nResearch has also shown that women are more likely to be in problematic or-\nganizational circumstances [44], as in smooth situations, agentic character istics\nmattered more for leader selection, whereas in times of crisis, interpersonal attri b-\nutes were deemed more important [44].To relate the problematic situation in SE\nproject context, we identify the product complexity, task clarity and change\nproneness as they have been used in literature as proxies for project context fac-\ntors:\n\uf0b7Product complexity :IEEEstandarddefines software complexity as \u201c the de-\ngree to which a system or component has a design or implementation that is\ndifficult to understand and verify \u201d[31]. The complexity reflects how difficult\nto understand the requirement, and to provide the solution .\n\uf0b7Taskclarity: ambiguous requirements can lead to different interpretations\namong developers that lead to mistakes and confusion and consequently wasted\nefforts. Requirement clarity describes how clearly are requirements are pre-\nsented to and understood am ong project stakeholders in the early phases of pro-\njects.\n\uf0b7Change proneness : characterizes how likely a requirement will change over\ntime. For a non -experience development team, frequent changes might intro-\nduce difficulty in completing requirements and achi eving customer satisfaction.\nLearning from a previous work [28], we identify team dynamic as an important\nfactor to understand female leadership behavior.\n\nThis is th e author's version of the work. The definite version was published in: Nguyen-Duc A., Khodambashi S., Gulla J.A., Krogstie J., Abrahamsson P. (2018) Female Le adership in Software Projects \u2014A\nPreliminary Result on Leadership Style and Project Context Fac tors. In: Kosiuczenko P., Madeyski L. (eds) Towards a Synergistic Combination of Research and Practice in Software Engineerin g. Studies in\nComputational Intelligence, vol 733. Springer, Cham .https://doi.org/10.1007/978 -3-319-65208-5_11\n\uf0b7Team communication : can occur in various forms, such as face -to-face meet-\nings, pair programming and social conversations. The frequency, richness of\ncommunication is within our concern.\n\uf0b7Coordination mechanism : as a mechanism to synchronize activity and infor-\nmation among team members, is also related to team performance [34, 36]. We\nidentify whether coor dination mechanism used is mechanistic ( task organiza-\ntion, task assignment, schedules, plans, project controls and specifications, rou-\ntine meetings ) or organic ( informal discussions, developer\u2019s comments, and\nbug reports ) [35]\n\uf0b7Team relationship :as female leadership is commonly perceived with commu-\nnication competences, customer and workplace relationship competences, and\ncreativity [16, 17], it is important to understand team members, external stake-\nholders and their relationships to team leaders.\nTeam perfo rmanceand perceived leadership effectiveness : we identify both\nsubjective team performance (feedbacks from team members and leader herself\nabout how good are they as a team) and objective team performance (external\nevaluation of teamwork as project outcom es). Team performance evaluation is of-\nten used as a proxy of leader\u2019s effectiveness [2]. Besides, female leadership might\nbe perceived differently due to prejudice and discrimination directed against\nwomen as leaders [6].\nFigure1: The conceptual framework\n3.2.Study design\nTo explore the prototyping practices, w e conducted a multiple exploratory case\nstudy[33].According to Yin [33], a case study design is appropriate when (a) the\nfocus of the study is to answer \u201chow\u201d and \u201cwhy\u201d questions; (b) there is probably\nhigh influence of contextual factors on the studied phenomenon. Exploratory case\nstudies are suitable to explain the presumed causal links in real -life interventions .\nA multiple case study enables the researcher to explore differences within and be-\ntween cases.\n\n\nThis is th e author's version of the work. The definite version was published in: Nguyen-Duc A., Khodambashi S., Gulla J.A., Krogstie J., Abrahamsson P. (2018) Female Leadership in Software Projects \u2014A\nPreliminary Result on Leadership Style and Project Context Fac tors. In: Kosiuczenko P., Madeyski L. (eds) Towards a Synergistic Combination of Research and Practice in Software Engineerin g. Studies in\nComputational Intelligence, vol 733. Springer, Cham .https://doi.org/10.1007/978 -3-319-65208-5_11\nThe underlying case swere based on softwaredevelopment projects in the Cus-\ntomer Driven Project course atthe Norwegian University of Science and Technol-\nogy (NTNU). Students in the course wererandomly divided into groups of five to\nseven members. E ach group hasto carryouta three-month-long project for real\ncustomers from software companies, governmental agencies or research institutes .\nThe project idea reflects a recognized need from the customer and can lead to t he\ndevelopment of a new solution or a component of an existing one. The goal is to\ngive the students practical experience in carrying out project development and\nmanagement activities in a context as close to industry as possible . A typical pro-\nject involve s customers, end -users, advisor sfrom the university and any relevant\nthird parties. The success of the project is evaluated by a board of a course respon-\nsible, an external examiner and a team supervisor. The evaluation criteria are\nbased on the quality of the deliverables, customer satisfaction and teamwork.\nTo establish the intervention, we put a female student as a leader of each pro-\nject team. In Fall 2015, we observed 13 female -lead teams of 79 students. Since\neach student spends about 20 hours per week on the project in one semester, a typ-\nical project of 6 students corresponds to about 2,000 person hours. In the scope of\nthis study, we will present research conducted in Fall 2015.\n3.3.Data collection\nThe data collection instrument was designed to cover the conceptual elements,\nas described in Table1.Data source triangulation was ensured by using both qual-\nitative(interviews, documents, observation) and quantitative data (survey).\nTable1: Matrix of conceptual elements and collection instrument\nConceptual element/ Instru-\nmentI1I2I3I4I5I6\nLeadership style\nLeaders self reflection\nLeader\u2019s experience\nTask clarity\nChange proneness\nTeam collaboration\nTeam relationship\nTeam communication\nTeam coordination\nPerceived team performance\nInstrument 1 :Leadership style survey . We utilized the Fie dlerLPCques-\ntionnaire to identify the leadership style [32].The survey design is based on Field-\ner contingency model, which proposed that a leader's effectiveness is based on the\n\n\nThis is th e author's version of the work. The definite version was published in: Nguyen-Duc A., Khodambashi S., Gulla J.A., Krogstie J., Abrahamsson P. (2018) Female Le adership in Software Projects \u2014A\nPreliminary Result on Leadership Style and Project Context Fac tors. In: Kosiuczenko P., Madeyski L. (eds) Towards a Synergistic Combination of Research and Practice in Software Engineerin g. Studies in\nComputational Intelligence, vol 733. Springer, Cham .https://doi.org/10.1007/978 -3-319-65208-5_11\nmatch between \"leadership style\" and \"situational favorableness \u201d [30]. The survey\nresponses were collected in the first two weeks of the project.\nInstrument 2 :Project plan . Within the course setting, each team provided\ntheir project plan with descriptions of team structure , roles, and preliminary study\nabout the product requirements and time plan.\nInstrument 3: Team meeting observation notes .Each team was assigned a\nsupervisor who will assist the team from a coursework perspective. The supervisor\nmeeting with teams offere d an opportunity for research team to observe team be-\nhavior during meetings. Observation focused on team\u2019s ability to perform collec-\ntive problem solving, relationship among team members and with team leader and\nteam collaboration and coordination practices .\nInstrument 4 :Leadership performance survey . We designed a second sur-\nvey to collect team\u2019s perception on their own teamwork and leadership. The sur-\nvey used a five -point Likert scale to collect leaders and team member\u2019s opinions\non (1) their own performan ce, (2) collective decision making, (3) team leadership\nand (4) task management practices.\nInstrument 5: Leader interview . Interview with team leader was a valuable\ndata to understand in -depth about the perception of team leader about the team\nperformance, their experience on leading and working in SE tasks. The interview\nwas designed as semi -structured interview that allows surprise development of the\ninterview scenario to interesting results.\nInstrument 6 :Final project report . Each team delivered a 150 -200 pages\nproject report describing project planning and management, product requirement\nand architecture, testing and delivery. Especially, a final part of the report consist-\ned of team reflection on project mandate, teamwork and supervision.\nThe process of data collection was described as in Figure2. The data collection\nperiods was done from Aug 2015 to Nov 2015. While I1 and I4 were mainly done\nby the first authors, I3 and I5 were jointly collected by all co -authors and other su-\npervisors in the course. I2 and I6 were collected as a part of the course delivery.\nFigure2: Data collection process\n\n\nThis is th e author's version of the work. The definite version was published in: Nguyen-Duc A., Khodambashi S., Gulla J.A., Krogstie J., Abrahamsson P. (2018) Female Leadership in Software Projects \u2014A\nPreliminary Result on Leadership Style and Project Context Fac tors. In: Kosiuczenko P., Madeyski L. (eds) Towards a Synergistic Combination of Research and Practice in Software Engineerin g. Studies in\nComputational Intelligence, vol 733. Springer, Cham .https://doi.org/10.1007/978 -3-319-65208-5_11\n3.4.Data analysis\nAt this phase, we limited ourselves in simply qualitative and quantitative analy-\nsis. The major part of analysis was done by the first author and revised by the rest.\nNarrative analysis : is a simple form of qualitative analyzing data from i.e. in-\nterview transcripts, observation notes and textual descriptions [41]. Narratives or\nstories occur when one or more speakers engage in sharing an experience, which\nis suitable material for abstracting the project experience from our team leaders.\nWe performed a simplified version of the analysis to extract from each project sto-\nrycategorical information. For instan ce, the level of team structure and task struc-\nture in the project will be extracted and interpreted from project report (I6). In the\nend of this step, we came up with a list of ordinal variables representing project\ncontext factors.\nDescriptive analysis :quantitatively summarize characteristics of project, team\nand leader of our sample. The statistical summary was provided for leadership\nstyle (Section 5.2) and team reflection on leadership (Section 5.3).\nCorrelation analysis :investigates the extent to wh ich changes in the value of\nan attribute are associated with changes in another attribute .Thoughacorrelation\nbetween two variables does not necessarily result in causal effect [ 40], it is still an\neffective method to select candidate variables for causa tion relationship. We find\nSpearman\u2019s rank correlation is suitable in our case as the test does not haveany\nassumptions about the distribution of the data and is the appropriate correlation\nanalysisin case of ordinal variables.\n4.Preliminary r esults and Discussion\n4.1. Leadership style\nIn our sample, the LPC score ranges from 47 to 109, with median value is 67,\nas shown in Figure3. An interpretation approach considers the score 57 or below\nas a task-oriented leader and score 64 to above as a relationship -oriented leader\n[48]. Consequently, in general, our sample biases towards relationship -oriented\nleadership style. We identified five groups with task -oriented leaders, six groups\nwith relationship -oriented leaders and two groups with mixed leaders.\n\n",
    "is_processed": true,
    "process_error": null,
    "content_length": 26718,
    "local_pdf_path": "data/pdfs/Female Leadership in Software Projects_ A Preliminary Result on Leadership Style and Project Context_340091e0.pdf"
  },
  "arxiv_c765ff60f0856631fdf3ab830e3f384b": {
    "title": "A perspective to navigate the National Laboratory environment for RSE career growth",
    "url": "http://arxiv.org/pdf/2209.02610v1",
    "source": "arxiv",
    "authors": [
      "William F Godoy"
    ],
    "published_date": "2022-09-06T16:04:53+00:00",
    "summary": "This paper shares a perspective for the research software engineering (RSE)\ncommunity to navigate the National Laboratory landscape. The RSE role is a\nrecent concept that led to organizational challenges to place and evaluate\ntheir impact, costs and benefits. The premise is that RSEs are a natural fit\ninto the current landscape and can use traditional career growth strategies in\nscience: publications, community engagements and proposals. Projects funding\nRSEs can benefit from this synergy and be inclusive on traditional activities.\nStill, a great deal of introspection is needed to close gaps between the\nrapidly evolving RSE landscape and the well-established communication patterns\nin science. This perspective is built upon interactions in industry, academia\nand government in high-performance computing (HPC) environments. The goal is to\ncontribute to the conversation around RSE career growth and understand their\nreturn on investment for scientific projects and sponsors.",
    "categories": [
      "cs.SE"
    ],
    "entry_id": "http://arxiv.org/abs/2209.02610v1",
    "meta": {
      "content_type": "academic_paper",
      "is_curated": true,
      "source_quality": 8
    },
    "content_type": "academic_paper",
    "text": "arXiv:2209.02610v1  [cs.SE]  6 Sep 2022A perspective to navigate the National Laboratory\nenvironment for RSE career growth\nWilliam F. Godoy\nComputer Science and Mathematics Division\nOak Ridge National Laboratory\nOak Ridge, TN, USA\ngodoywf@ornl.gov\nAbstract \u2014This paper shares a perspective for the research\nsoftware engineering (RSE) community to navigate the Natio nal\nLaboratory landscape. The RSE role is a recent concept that l ed\nto organizational challenges to place and evaluate their im pact,\ncosts and bene\ufb01ts. The premise is that RSEs are a natural \ufb01t\ninto the current landscape and can use traditional career gr owth\nstrategies in science: publications, community engagemen ts and\nproposals. Projects funding RSEs can bene\ufb01t from this syner gy\nand be inclusive on traditional activities. Still, a great d eal of\nintrospection is needed to close gaps between the rapidly ev olving\nRSE landscape and the well-established communication patt erns\nin science. This perspective is built upon interactions in i ndustry,\nacademia and government in high-performance computing (HP C)\nenvironments. The goal is to contribute to the conversation\naround RSE career growth and understand their return on\ninvestment for scienti\ufb01c projects and sponsors.\nIndex Terms \u2014RSE, National Lab, career growth, HPC, scien-\nti\ufb01c software\nI. I NTRODUCTION\nWhile the term \u201cresearch software engineer\u201d (RSE) is\nrelatively new, the role has existed for decades [1]. In rece nt\nyears, important conversations around scienti\ufb01c software stew-\nardship1and cultural challenges [2] elevate the value of RSE\nroles. The United States Department of Energy (DOE) has a\nrich history in funding high-performance computing (HPC)\nsoftware projects to accomplish its scienti\ufb01c mission [3],\n[4]. Future trends present a great opportunity to rethink\ncodesign [5] and HPC software [6] as a more dynamic and\nmultidisciplinary endeavor [7]. RSEs are at the core of the\nDOE mission as stewards of the software that allow for\nscienti\ufb01c discovery.\nThe present document lists aspects of well-established\nchannels in the scienti\ufb01c community that RSEs can adopt\ntowards a sustainable career growth path. These views come\nfrom collected personal experiences and observations in HP C\nenvironments in industry, government and academia that cou ld\nbe extended to other scienti\ufb01c communities with similar cha l-\nlenges.\nII. C AREER GROWTH ASPECTS\nThe list presented in this section comes up from personal\ninteractions with members of the scienti\ufb01c community when\ndiscussing RSE roles. They provide a simple context on how\nRSEs\u2019 careers can develop within a scienti\ufb01c setting.\n1https://github.com/tgamblin/ascr-software-stewardsh ip-r\ufb01-responsesa) De\ufb01ne your science: RSE work can be varied and,\nmany times, not directly related to novel scienti\ufb01c discov-\nery: e.g. addressing bugs, consultant work, tracking issue s,\netc. Nevertheless, the answer to the question that comes up\nfrequently: what exactly is your science? should be effec-\ntively communicated. While RSEs with closer expertise in\na scienti\ufb01c domain or those who have had these discussions\nare able to answer this question, others may start thinking\nabout answers in terms of value. Use the scienti\ufb01c method\nby providing empirical evidence for how RSE work impacts\nthe science-funded initiative. The latter requires a conve rsation\nwith stakeholders to \ufb01gure out what needs to be measured that\nis important to them.\nb) The importance of publications: peer-reviewed sci-\nenti\ufb01c publications are a cornerstone of science. Scholarl y\nwork is how careers are built and it is the language used by\nscientists. Metrics such as the h-index measure the impact\nof individuals on the scienti\ufb01c community [8]. RSEs have\npublication venues that provide citable sources and profes -\nsional societies, such as US-RSE2to disseminate their work\neffectively. Project stakeholders should consider priori tizing\nRSE involvement in publications and proposals following\nethical, organizational and national security guidelines with\nthe goal of retaining valuable contributors. This becomes e ven\nmore relevant as much of the software produced in government\norganizations might not fall under the free and open source\n(FOSS) category. Using this very same language will ease the\ncommunication of the impact of RSE activities in the broader\nscienti\ufb01c community.\nc) Scienti\ufb01c software as specialized equipment: scienti\ufb01c\nsoftware can have little resemblance to products in the broa der\nsoftware landscape. Therefore, the role might be closer to\nthose building \u201cspecialized equipment\u201d in novel scienti\ufb01c\nfacilities, this is even more palpable in HPC and experiment al\nans observational science (EOS). Scienti\ufb01c project stakeh old-\ners may establish a similar synergy that understands and val ues\nthe complexities of RSE and traditional science activities .\nAt the same time, project stakeholders should consider that\nmethods applied in the broader \u201ccommodity-like\u201d software\nlandscape might incur in extra overheads for scienti\ufb01c soft -\nware ( e.g. agile management, enterprise software solutions,\n2https://us-rse.org/\n\nparadigms, etc.). Their real cost/bene\ufb01t must still be prov en\nscienti\ufb01cally with empirical evidence, ideally in peer-re view\npublications. Scienti\ufb01c software is messy and unpredictab le by\nde\ufb01nition, requirements are not always known at developmen t\ntime, so a great deal of \ufb02exibility is needed to achieve scien ti\ufb01c\ndiscovery goals.\nd) Develop community: this is a crucial aspect as one\nof the important metrics of science is how your community\nperceives your work and participation. External recogniti on\nin professional societies and organizations ease the path f or\ninternal career growth. Prioritizing these aspects pays of f as\nit builds trust in the RSE community. Identify key members\nin your community that can recommend your work. Value\nprevious and new contributors from multiple disciplines th at\nenable RSE work. While promote and mentor new members\nof your community through your network. Overall, careers ar e\nbuilt through the synergies of enabling people, not always b y\nparticular technologies. Build upon community-based cons en-\nsus decisions rather than those based on an appeal to authori ty\nby a few individuals to align with science endeavors. Work\nside-by-side, not head-to-head, including and listening t o all\nstakeholders, regardless of hierarchical structures. Sof tware is\na rapidly changing environment, so early advisory activiti es\nfrom all stakeholders is crucial for decision making.\ne) Identify critical paths: RSE tasks can carry signi\ufb01cant\noverhead to project goals that do not necessarily lead to car eer\ngrowth. Thus, RSEs may prioritize activities with a higher\nreturn on investment that will propagate through the \u201ccriti cal\npath\u201d of a project, organization, sponsor, and your communi ty.\nFocus on reportable activities that go beyond one or two\nlayers across these paths: papers, highlights, tutorials, meeting\norganizations, mentoring, awards, proposals etc. Observe the\ncareer evolution of more senior members in your organizatio n\nand ask related questions, so RSEs can establish similar\nconversations with those stakeholders that are more likely to\npromote their community members. Identify and minimize\nengagements that are not on the critical path for career grow th.\nf) Scienti\ufb01c impact and software quality trade-offs:\nSoftware quality is not free. By embracing imperfection and\nfocusing on the value of the return in terms of scienti\ufb01c\noutputs, RSEs can focus on career growth through diversifyi ng\ntheir portfolio of investments beyond software speci\ufb01c act iv-\nities. Not all software quality activities lead to high rese arch\nimpact so understanding the potential cost/bene\ufb01t is impor tant.\nIn addition, since not all requirements are always known at\ndevelopment time, a high investment in quality might in fact\nbe counterproductive.\ng) Promote your work along with the software: RSEs\nmay be dedicated to particular products or technologies.\nUltimately, projects are funded for scienti\ufb01c discovery so\nsustainability aspects always come as a question for potent ial\nadopters. Be ready to answer questions like: \u201cwhat happens\nafter funding ends?\u201d, or \u201cwho supports this software in the\nlong-term?\u201d. People behind a product are the ones building\nthe trust among stakeholders.h) Embrace senior roles: RSE work in early career\nstages is heavily de\ufb01ned by development related activities .\nAs professionals advance in their career the impact on other s\nbecome more relevant. Software is a rapid evolving landscap e,\nso learning from every generation that grew up with differen t\ntechnologies is extremely bene\ufb01cial. Therefore, embracin g\ntasks beyond development such as, mentoring, learning and\npromoting other RSEs is required for career growth.\nIII. C ONCLUSIONS\nThe positions presented on this paper argue that RSEs are\na natural \ufb01t in and an important part of the codesign process\nas scienti\ufb01c projects become more multidisciplinary in nat ure.\nRSEs can bene\ufb01t from traditional scienti\ufb01c metrics: papers ,\nservice, and proposals, by building a diversi\ufb01ed portfolio\nof activities that impacts their scienti\ufb01c communities. Fo r\nthe RSE role to be seen as the new wave of \u201ca discipline\non its own\u201d, the scienti\ufb01c community should do a great\ndeal of introspection and learn from the \u201cnew\u201d science and\nengineering disciplines of the past that established a scie nti\ufb01c\nframework for successful career paths for its members. Ulti -\nmately, research software engineering is a human activity t hat\nwould not be possible without rewarding its stakeholders.\nREFERENCES\n[1] R. Baxter, N. C. Hong, D. Gorissen, J. Hetherington, and I . Todorov, \u201cThe\nresearch software engineer,\u201d in Digital Research Conference, Oxford ,\n2012, pp. 1\u20133.\n[2] D. S. Katz, L. C. McInnes, D. E. Bernholdt, A. C. Mayes, N. P . C.\nHong, J. Duckles, S. Gesing, M. A. Heroux, S. Hettrick, R. C. J imenez,\nM. Pierce, B. Weaver, and N. Wilkins-Diehr, \u201cCommunity orga nizations:\nChanging the culture in which research software is develope d and\nsustained,\u201d Computing in Science & Engineering , vol. 21, no. 2, pp. 8\u201324,\n2019.\n[3] B. L. Buzbee, W. J. Worlton, G. Michael, and G. Rodrigue, \u201c DOE\nresearch in utilization of high-performance computers,\u201d 1 2 1980.\n[Online]. Available: https://www.osti.gov/biblio/6711 815\n[4] Dongarra, Jack et al. , \u201cThe International Exascale Software Project\nroadmap,\u201d The International Journal of High Performance Computing\nApplications , vol. 25, no. 1, pp. 3\u201360, 2011.\n[5] J. Ang, A. A. Chien, S. D. Hammond, A. Hoisie, I. Karlin,\nS. Pakin, J. Shalf, and J. Vetter, \u201cReimagining codesign for advanced\nscienti\ufb01c computing: Unlocking transformational opportu nities for\nfuture computing systems for science,\u201d 10 2021. [Online]. A vailable:\nhttps://www.osti.gov/biblio/1822198\n[6] P. Beckman, R. Brightwell, M. Gokhale, B. R. de Supinski, S. Hofmeyr,\nS. Krishnamoorthy, M. Lang, B. Maccabe, J. Shalf, and M. Snir ,\n\u201cExascale operating systems and runtime software report,\u201d 12 2012.\n[Online]. Available: https://www.osti.gov/biblio/1471 119\n[7] J. C. Carver, L. M. Hochstein, D. Cruzes, V . R. Basili, J. K .\nHollingsworth, M. V . Zelkowitz, and F. Shull, \u201cUnderstandi ng the high-\nperformance-computing community: A software engineer\u2019s p erspective,\u201d\nIEEE Software , vol. 25, no. 04, pp. 29\u201336, jul 2008.\n[8] L. Bornmann and H.-D. Daniel, \u201cWhat do we know about the h i ndex?\u201d\nJournal of the American Society for Information Science and technology ,\nvol. 58, no. 9, pp. 1381\u20131385, 2007.\nACKNOWLEDGEMENT\nThis manuscript has been authored by UT-Battelle,\nLLC, under contract DE-AC05-00OR22725 with the\nUS Department of Energy (DOE). The publisher\nacknowledges the US government license to provide\npublic access under the DOE Public Access Plan\n(https://energy.gov/downloads/doe-public-access-pla n)\n\n",
    "is_processed": true,
    "process_error": null,
    "content_length": 11845,
    "local_pdf_path": "data/pdfs/A perspective to navigate the National Laboratory environment for RSE career growth_0e3f384b.pdf"
  },
  "arxiv_5e6951da8c175951e92c1a0df73d58d2": {
    "title": "A Perspective-Based Understanding of Project Success",
    "url": "http://arxiv.org/pdf/2101.05425v1",
    "source": "arxiv",
    "authors": [
      "Laurie McLeod",
      "Bill Doolin",
      "Stephen G. MacDonell"
    ],
    "published_date": "2021-01-14T02:25:51+00:00",
    "summary": "Answering the call for alternative approaches to researching project\nmanagement, we explore the evaluation of project success from a subjectivist\nperspective. An in-depth, longitudinal case study of information systems\ndevelopment in a large manufacturing company was used to investigate how\nvarious project stakeholders subjectively perceived the project outcome and\nwhat evaluation criteria they drew on in doing so. A conceptual framework is\ndeveloped for understanding and analyzing evaluations of project success, both\nformal and informal. The framework highlights how different stakeholder\nperspectives influence the perceived outcome(s) of a project, and how project\nevaluations may differ between stakeholders and across time.",
    "categories": [
      "cs.SE"
    ],
    "entry_id": "http://arxiv.org/abs/2101.05425v1",
    "meta": {
      "content_type": "academic_paper",
      "is_curated": true,
      "source_quality": 8
    },
    "content_type": "academic_paper",
    "text": "Full citation: McLeod, L., Doolin, B., & MacDonell, S.G. (2012) A perspective-based understanding of project success, Project Management Journal 43 (5), pp. 68-86. doi:10.1002/pmj.21290 A Perspective-Based Understanding of Project Success Laurie McLeod1, Bill Doolin2 and Stephen G. MacDonell1 1SERL, School of Computing & Mathematical Sciences  2Business School Auckland University of Technology Auckland, New Zealand lauriemcleod@xtra.co.nz, bill.doolin@aut.ac.nz, stephen.macdonell@aut.ac.nz   Abstract Answering the call for alternative approaches to researching project management, we explore the evaluation of project success from a subjectivist perspective. An in-depth, longitudinal case study of information systems development in a large manufacturing company was used to investigate how various project stakeholders subjectively perceived the project outcome and what evaluation criteria they drew on in doing so. A conceptual framework is developed for understanding and analyzing evaluations of project success, both formal and informal. The framework highlights how different stakeholder perspectives influence the perceived outcome(s) of a project, and how project evaluations may differ between stakeholders and across time. Keywords - project evaluation; project success criteria; stakeholder perspectives; longitudinal case study; outsourced information systems development I.  INTRODUCTION As a general concept, project success has received considerable attention within the project management research literature over the last three decades (Ika, 2009; Pinto & Slevin, 1988). As our understanding of project success has evolved and matured (Jugdev & M\u00fcller, 2005), we have come to recognize the complexity and ambiguity that surrounds it, both in terms of its definition and its measurement (Baccarini, 1999; Fowler & Walsh, 1999; Hyv\u00e4ri, 2006; Ika, 2009; Jugdev & M\u00fcller, 2005; Thomas & Fernandez, 2008). Project success is now regarded as a multidimensional construct, with interrelated technical, economic, behavioral, business, and strategic dimensions (Bannerman, 2008; Cao & Hoffman, 2011; Ika, 2009; Jugdev & M\u00fcller, 2005; Jugdev, Thomas, & Delisle, 2001; Shenhar, Dvir, Levy, & Maltz, 2001; Thomas & Fernandez, 2008), although this is not always evident in the application of project success measurement. Prior empirical studies of project success have generally been quantitative, often involving surveys comprising exploratory or evaluative questions with Likert scales, analyzed using statistical techniques, and in which success is measured using a simple formula that is unequivocal and easy to apply (Ika, 2009). These studies are grounded in an objectivist tradition, in which it is assumed that a universal, objective set of success criteria exists in practice (Ika, 2009), to be measured using scientific method and quantitative techniques (Fitzgerald & Howcroft, 1998). Several authors have expressed concern over the predominance of objectivist project management research (Fincham, 2002; Ika, 2009; Packendorff, 1995; S\u00f6derlund, 2004). In particular, Cicmil and Hodgson (2006) argue that, despite the level of research attention that project success has received, the characterization of project outcomes as successes or failures remains problematic and, in general, the development of project management knowledge has been fragmented and incomplete. Moreover, attempts by the project management research community to remedy any knowledge shortcomings continue to rely almost exclusively on objectivist approaches (Cicmil & Hodgson, 2006), even if they encompass a more complex or contingent view of projects and project outcomes (Fincham, 2002; Ika, 2009). These authors call for the emergence of alternative theoretical and methodological approaches to studying project management in order to create \u201cnew possibilities for thinking about, researching, and developing our understanding of the field as practiced\u201d (Cicmil & Hodgson, 2006, p. 111; see also Alderman & Ivory, 2011; Fincham, 2002; Ika, 2009; Packendorff, 1995; S\u00f6derlund, 2004). In particular, Ika (2009) suggests that a subjectivist research approach offers a viable alternative avenue of research to the objectivist tradition dominating project management research. From a subjectivist viewpoint, project success and failure are social phenomena, subjectively and intersubjectively constructed by individuals and groups of individuals (Alderman & Ivory, 2011; Ika, 2009; Packendorff, 1995). A focus on sense-making and the interpretation of meaning encourages the use of idiographic approaches and qualitative techniques (Fincham, 2002; Fitzgerald & Howcroft, 1998; Ika, 2009). A subjectivist approach to project management research is consistent with calls for more empirical studies (Cicmil & Hodgson, 2006), especially in-depth, longitudinal case studies that address the \n\ndynamic nature and social context of projects and project management (Packendorff, 1995; S\u00f6derlund, 2004). Such studies can give us deeper knowledge of how different stakeholders perceive projects and their outcomes. In this article, we address these calls relating to project management research by providing an empirical analysis of a contemporary information systems (IS) project from a subjectivist perspective. Following Ika (2009), we are interested in understanding how the various project stakeholders subjectively perceived project outcomes and the evaluation criteria they drew on in doing so. In undertaking this research, our motivation is to challenge the way researchers and practitioners view project outcomes and how they evaluate projects. A broad and inclusive understanding of success is also important for senior management and project managers, the latter of whom \u201care constantly trying to define and manage project success in both subjective and objective ways\u201d (Jugdev & M\u00fcller, 2005, p. 19), in order to answer questions about their project\u2019s progress. We focus on an IS project as a research setting for two reasons. First IS projects have become a significant and frequently studied setting in the project management literature (Ika, 2009; Kloppenborg & Opfer, 2002; Rivard & Dupr\u00e9, 2009; Urli & Urli, 2000). Second, contemporary IS development projects frequently involve the active participation of a wide range of internal and external stakeholders (each having their own motivations and goals, and thus potentially their own criteria for success), and the views of some of these groups have not necessarily been considered in prior research (Cicmil & Hodgson, 2006; Haried & Ramamurthy, 2009). The remainder of the article is structured as follows. In the next section, we consider current thinking on evaluating project outcomes within the project management literature in general, drawing on prior research relating to the IS domain when appropriate. We then describe the case study and methods used in data collection and analysis. Next, we present our empirical findings, before discussing the results of our analysis. The article concludes with the implications of our study for research and practice. II. LITERATURE REVIEW In the project management literature, the outcome of a project is frequently conceived of in terms of \u201csuccess\u201d or \u201cfailure\u201d\u2014although identifying just what constitutes these can be problematic. In general, there is a lack of consensus on how to define success, lack of success, and failure, and despite their frequent use, such terms are perceived to be vague and difficult to measure (Baccarini, 1999; Fowler & Walsh, 1999; Hyv\u00e4ri, 2006; Ika, 2009; Jugdev & M\u00fcller, 2005; Thomas & Fernandez, 2008). Further, success (or failure) is not an absolute or \u201cblack and white\u201d concept (Wateridge, 1998). Projects may be viewed as successful to varying degrees, depending on which success criteria are met (Baccarini, 1999; de Wit, 1988). In this section, we map out some of the elements that contribute to the conceptual and definitional ambiguity of project success. These include issues of multidimensionality, scope, temporality, perspective, and context. There have been various attempts over the history of project management to define suitable criteria against which to define and measure project success. Perhaps the most well recognized of these is the long established and widely used \u201ciron triangle\u201d of time, cost, and quality (Atkinson, 1999; Cooke-Davies, 2002; de Wit, 1988; Ika, 2009; Jugdev & M\u00fcller, 2005; Jugdev et al., 2001). Although the definition of quality is potentially very broad (Ika, 2009) in relation to the iron triangle, it is often restricted to meeting scope or functional and technical specifications (Agarwal & Rathod, 2006; Baccarini, 1999; Bannerman, 2008; Ika, 2009; Wateridge, 1998). Expressed by the mnemonic \u201con time, within budget and to specification\u201d (Turner, 1993, p. 76), these criteria constitute economic and technical dimensions of project success. They are popular, particularly in the engineering, construction, and information technology (IT) fields (Ika, 2009) because they can be made objective, tangible, and measurable (Baccarini, 1999; Ika, 2009); they fall within the ambit of the project organization (Pinto & Slevin, 1988); they are short-term, ending upon project delivery (Baccarini, 1999; Ika, 2009; Pinto & Slevin, 1988); and they can be used to evaluate a project manager\u2019s performance (Jugdev & M\u00fcller, 2005; Wateridge, 1998). However, as a number of commentators have pointed out, the iron triangle dimensions are inherently limited in scope (Atkinson, 1999; Ika, 2009; Wateridge, 1998). Indeed, a project that satisfies these criteria may still be considered a failure; conversely, a project that does not satisfy them may be considered successful (Baccarini, 1999; de Wit, 1988; Ika, 2009). In particular, the iron triangle has been criticized for its exclusive focus on the project management process and for not incorporating the views and objectives of all (both internal and external) stakeholders (Atkinson, 1999; Baccarini, 1999; Bannerman, 2008; de Wit, 1988; Jugdev & M\u00fcller, 2005; Wateridge, 1998). Even if the focus is on the manner in which the project was conducted, several authors have suggested that meeting time, cost, and quality specifications are not the only relevant criteria; for example, project management efficiency and effective project team functioning are also important (Baccarini, 1999; Shenhar & Dvir, 2007; Toor & Ogunlana, 2010). Within the project management literature, researchers have progressively widened the scope and constituency of what is meant by project success, recognizing that project success is more than project management success, and that it needs to be measured against the overall objectives of the project (Baccarini, 1999; Cooke-Davies, 2002; Ika, 2009; Jugdev & M\u00fcller, 2005). This reflects a distinction between the success of a project\u2019s process and that of its product (Baccarini, 1999; Markus & Mao, 2004; Wateridge, 1998). Focusing on the latter may lead to consideration of criteria such as product use, user or client satisfaction, and benefits to users or clients (Baccarini, 1999; Bannerman, 2008; DeLone & McLean, 2003; Shenhar, Dvir, Levy, & Maltz, 2001; Wateridge, 1998). \n\nBannerman (2008) also suggests that within individual project disciplines there are discipline-specific processes and practices to which success measures may be attributed, such as project governance, risk management, change management, and quality management. Project success has also been extended to encompass the achievement of a broader set of organizational objectives, involving benefits to a wider range of stakeholders, including senior managers and project sponsors (Baccarini, 1999; Ika, 2009; Jugdev & M\u00fcller, 2005). In particular, attention has focused on the immediate and direct impact of the project on the organization, including whether the business case and objectives for the project investment have been met and benefits to the business realized (Bannerman, 2008; DeLone & McLean, 2003; Markus & Mao, 2004; Shenhar et al., 2001). Project success may even be extended further to include the accomplishment of more strategic objectives and benefits, including impacts on markets and competitors, business development or expansion, and ability to react to future opportunities or challenges (Bannerman, 2008; Jugdev & M\u00fcller, 2005; Norrie & Walker, 2004; Shenhar et al., 2001; Toor & Ogunlana, 2010). For example, Cooke-Davies (2002) and Ika (2009) discuss measuring the success of organizational portfolios or programs of projects that are aligned with corporate strategy. Project success criteria that focus beyond the project management process constitute behavioral, business, and strategic dimensions. While such criteria can support a more holistic and inclusive definition of success (Jugdev & M\u00fcller, 2005), they tend to be subjective, intangible, and difficult to measure (Baccarini, 1999; Ika, 2009; Jugdev & M\u00fcller, 2005). Such criteria are particularly important in the IS/IT domain, where considerable emphasis is placed on subjective issues, such as user satisfaction (DeLone & McLean, 2003; Jugdev & M\u00fcller, 2005; Petter, DeLone, & McLean, 2008; Wateridge, 1998). Table 1 summarizes the various criteria proposed as the scope of what constitutes project success has expanded. While project success is a multidimensional construct, in practice not all criteria may be considered relevant on all projects, and different criteria may be emphasized on different types of projects (Bannerman, 2008; Shenhar et al., 2001; Wateridge, 1998). Temporality is an element of the evaluation of project success in two ways. First, the different foci of consideration discussed earlier are meaningful in relation to organizational processes and practices that operate over different time frames. Thus, project management success and its criteria are relevant over the time frame of a project; once a product or service is delivered, product success and its criteria become increasingly relevant as the product or service is used (or not) within its operational environment; while business success and strategic benefits and their criteria are relevant over even longer time frames (Baccarini, 1999; Bannerman, 2008; Jugdev & M\u00fcller, 2005; Pinto & Slevin, 1988; Shenhar et al., 2001). Second, individual or collective opinions and evaluative assessments of a project are not necessarily static and may change over time as situations evolve and contexts change (Lanzara, 1999). A project that initially may be deemed a success can subsequently come to be regarded as a failure, or vice versa (de Wit, 1988; Ika, 2009; Wilson & Howcroft, 2002). In recognition of the temporality of project success, various authors suggest that multiple evaluations should be undertaken at different points in time for different purposes (Atkinson, 1999; Jugdev & M\u00fcller, 2005; Karlsen, Andersen, Birkel, & Odegard, 2005; Khang & Moe, 2008; Pinto & Slevin, 1988; Wateridge, 1998).  \n A number of authors have highlighted the subjective and perceptual nature of project evaluations, and that a person\u2019s perception of an outcome is dependent on his or her perspective or viewpoint   (Agarwal & Rathod, 2006; Baccarini, 1999; Bannerman, 2008; Fowler & Walsh, 1999; Ika, 2009; Shenhar et al., 2001; Wateridge, 1998; Wilson & Howcroft, 2002). Given that a project has a range of stakeholder groups, each with a particular viewpoint (Baccarini, 1999), individuals or groups are likely to differ in their assessments of the extent to which a project is successful. Taken to an extreme, a success for one group may be perceived as a failure by others (de Wit, 1988; Riley & Smith, 1997). In an IS project, the stakeholders may include senior management, organizational project management office staff, the project manager, the project governance group, the project sponsor, the project owner, project team members, developers, and various user stakeholder groups. While many IS project stakeholders are internal to the organization commissioning the project, some may be external\u2014for example, external consultants, vendors, or developers in an outsourced context (McLeod & MacDonell, 2011). Each stakeholder group will have its own view of project success, judging it according to different criteria (Agarwal & \n\n\nRathod, 2006; Baccarini, 1999; Riley & Smith, 1997; Wateridge, 1998). For example, in an IS project, the project manager and project governance team may focus on the success of the project process, while users are likely to concentrate on the operation and implementation of a project product, considering success in relation to the impact of the IS on their work and organizational roles. Project sponsors may be concerned with the survival of their project (Wilson & Howcroft, 2002) or the activity it was intended to support, while senior management may be interested in the achievement of business objectives and the strategic benefits delivered by the project (Bannerman, 2008; Wateridge, 1998). Technical staff such as developers on the project may view success in terms of product quality and functionality or the opportunities for new skill acquisition and learning that can be carried forward to future projects (Agarwal & Rathod, 2006; Linberg, 1999; Riley & Smith, 1997). External contractors may be concerned with containing project costs and duration (Bryde & Robinson, 2005), and securing further work.  The criteria used to evaluate project success are based on stakeholders\u2019 particular expectations of the project (Jiang, Chen, & Klein, 2002; Lim & Mohamed, 1999), with success reflecting the extent to which these expectations are perceived to have been met. In turn, expectations derive from and express value-based beliefs and desires about how a project will serve stakeholders\u2019 interests and/or needs whether role-related or personal (Baccarini, 1999; Bannerman, 2008; Lyytinen, 1988; Lyytinen & Hirschheim, 1987). Thus, the assessment of project success is a value judgment (Seddon, Staples, Patnayakuni, & Bowtell, 1999), and \u201csuccess\u201d becomes a subjective evaluation from a person\u2019s perspective rather than an objective description based on independent criteria (Mitev, 2005). Different values, interests, needs, and expectations become relevant to particular stakeholders\u2019 interpretations depending on the social, economic, historical, and organizational context in which a project is situated (Bartis & Mitev, 2008; Lyytinen & Hirschheim, 1987). When confronted with a complex problem such as evaluating a project outcome, individuals engage in sense making, seeking, and interpreting information in order to construct meaning in relation to the project (Galliers & Swan, 2000). This meaning is constantly shaped in response to new knowledge, changing contextual elements, the behavior of others, and an individual\u2019s engagement with the project and its product (Constantinides & Barrett, 2006; Giddens, 1984; Walsham, 1993). The individual and shared stocks of knowledge and systems of meaning that individuals use to help them interpret and make sense of a project are based on their past experiences and participation in social processes and professional groups (Kjaergaard, Kautz, & Nielsen, 2007; Luckmann, 2008; Walsham, 1993). Thus, an individual\u2019s evaluation of a project outcome may be influenced by (possibly competing) organizational commitments, sectional interests, or professional affiliations (Butler, 2003). Further, any development of a shared understanding of the project outcome necessarily involves the communication and negotiation of individual and collective perceptions, expectations, and evaluations.  This makes the formal evaluation of a project outcome a negotiated, and often political, process. Rather than being discrete, objective outcomes, success and failure are constructed as contested subjective interpretations that may be modified in response to political maneuvering, persuasion, or changes in the organizational and technological context (Bartis & Mitev, 2008; Fincham, 2002; Mitev, 2000; Wilson & Howcroft, 2002). Any apparent definitional closure surrounding a particular project outcome does not necessarily represent consensus or shared interests and values, as not all interpretations or viewpoints may be afforded equal status (Bartis & Mitev, 2008; Riley & Smith, 1997; Walsham, 1993; Wilson & Howcroft, 2002). While some expectations (e.g., client or user expectations) are expressed as project goals and requirements, other expectations may remain unarticulated or only vaguely expressed. The latter may result from the unclear nature of an expectation, the sheer number and diversity of stakeholders involved, or an inability or lack of opportunity for them to voice their expectations (Lyytinen & Hirschheim, 1987). As Thomas and Fern\u00e1ndez (2008, p. 733) note, \u201chow success is defined and who evaluates success therefore affects the final judgment of success and failure.\u201d Formal evaluations are doubly political, in that the \u201cofficial narrative\u201d may be used to confer status or stigma, legitimize particular behaviors or courses of action, justify large or risky projects, or distance the future from the past (Bartis & Mitev, 2008; Cicmil & Hodgson, 2006; Fincham, 2002). However, irrespective of the formal evaluation of a project outcome, other informal evaluations that various individuals and stakeholder groups make along the way, based on their specific interests and expectations, influence their decisions and actions, and thus the unfolding project (Walsham, 1993). In summary, labeling a project outcome as a \u201csuccess\u201d or \u201cfailure\u201d is convenient but overly simplistic. A degree of conceptual and definitional ambiguity surrounds project success. Further, evaluations of project success are necessarily perceptual and (inter)subjectively constructed. This suggests that a subjectivist approach to studying project outcomes would be fruitful; it provides an understanding of how the wide range of project stakeholders in contemporary IS development make sense of a project in relation to their various perspectives, interests, and expectations. The project case study that follows draws on extensive empirical evidence to illustrate this. III. THE CASE STUDY AND RESEARCH METHODS Our objectives in this study were to understand how project outcomes are subjectively perceived by different stakeholders and the evaluation criteria different stakeholders draw on in doing so. To address these objectives, we conducted an in-depth, longitudinal case study of an IS development project in AlphaCo (a pseudonym), a large manufacturing company. The project involved commercial package acquisition, outsourced (but largely on-site) solution development, and a \n\nrange of internal and external participants and stakeholders. As such, it provides a useful exemplar of development in a contemporary IS environment involving client-vendor relations (Haried & Ramamurthy, 2009).  The project studied involved developing a dynamic, flexible, and scalable database solution to replace existing financial spreadsheet models used to manage AlphaCo\u2019s IT outsourcing contract. These models were used for contract evaluation and performance reporting. Figure 1 shows the main participants involved in the project. The project owners were the unit responsible for managing this contract\u2014the IS Outsourcing Management (ISOM) team. This was a small team of business analysts, including Claire (who had developed the original spreadsheet models) and Gary (the intended main user of the new database solution), led by Dave, the ISOM manager, all of whom participated as members of the AlphaCo project team. The project sponsor was James, the IS senior manager to whom the ISOM team reported. Consistent with organizational policy, an external project manager, Frank, was hired to manage the project through its expected completion by the end of 2005, and external consultants, SoftCo, were engaged to supply a multidimensional database and OLAP tool (MDS, SoftCo\u2019s proprietary application development tool) and to develop the desired database solution. SoftCo\u2019s main project team was composed of their project manager, Marie, and two senior developers, Nancy and Ross.  \n To promote standardization in project management practice, AlphaCo had implemented organization-wide project management standards that required projects to follow a life cycle with defined phases, decision points (gates), and requisite documentation. Tracking, a purpose-built project management support tool that additionally served as a repository for project reporting documents, was also used. For IS projects, these formal project management processes, including an IS project life cycle, were administered by the IS Project Office (ISPO), including the manager, Andrew, and two analysts, Brenda and Kate. The IS project life cycle comprised six project phases (Concept, Feasibility, Planning, Development, Implementation, and Completion), each ending with a decision gate and specific project documents. The ISOM project was followed through this project life cycle, and into subsequent deployment and use of the MDS solution, from mid-2005 to mid-2007, by the first author. Fieldwork involved an intensive eight-month period of participant observation coinciding with the main project activity. This was followed by a number of site visits as work on the project became more sporadic, until some form of closure was achieved in terms of the use of the new solution. In total, 558 hours were spent on site, observing project activities and meetings, and conducting 33 semistructured interviews with internal and external staff. Interviewees comprised the project participants from AlphaCo and SoftCo mentioned earlier and shown in Figure 1, together with a further five AlphaCo IS managers and analysts. Interviewees were asked a set of general questions about their organizational role, their involvement in the project, their perspective on events and activities, and their experiences of development practice. In addition, a list of specific questions was compiled for each participant about aspects of the project that they could comment on. A number of the interviewees were interviewed multiple times over the course of the project, as new developments or issues emerged. Interviews were typically recorded (with permission) and transcribed in full. Where taping was not possible, extensive field notes were made. All project documentation (including e-mail) was made available to the researcher. Various internal organizational documents and publicly available articles on AlphaCo and its IS function were also reviewed to provide contextual information. Conducting a longitudinal case study enabled observation of the IS project in its organizational context, the description of events as they occurred, and access to participants\u2019 actions and interpretations at the time. A single case study allowed a holistic, in-depth analysis of one setting. Intensive and prolonged interaction with project participants and stakeholders provided insights into local knowledge and practices, and revealed alternative or shifting interpretations of the project outcome (Lanzara, 1999; Nandhakumar & Jones, 1997). Consistent with a subjectivist research \n\n\napproach, the focus was on the participants\u2019 experiences and interpretations of the project, and how they made sense of the development process and outcome, including the solution itself, through their behavior and language (Orlikowski & Baroudi, 1991; Putnam, 1983). In doing so, multiple perspectives from participants at different levels in the project and organizational hierarchies were accessed on multiple occasions (Cicmil & Hodgson, 2006). A comprehensive thematic analysis (Braun & Clarke, 2006) was conducted on the data collected from field notes, the transcripts of interviews and meetings, and project and organizational documents. Data were read and reread multiple times by the first author, categorized and compared across common themes that emerged around aspects of project content, context, and process (Walsham, 1993), and informed by relevant IS development literature. Chronological order and temporal relativity of the data were maintained throughout the data analysis. This facilitated the identification and description of key events and activities within the project, which provided the structure for a detailed \u201cchronological\u201d (Allison & Merali, 2007; Yin, 2003) case narrative of the project as it unfolded over time. Further details of the data collection and analysis methods used in this study can be found in McLeod, MacDonell, and Doolin (2011). Given the objectives of this article, we focus on the perceptions of different project participants and stakeholders regarding the project outcome, rather than the project itself. IV. THE ISOM PROJECT The ISOM project was intended to be a straightforward migration of existing spreadsheet models to a database solution. From the outset, the project was perceived to be relatively small and well defined, with no major threats to project delivery within the desired project time frame of the end of 2005. This perception was evident in the project\u2019s feasibility report, which did not anticipate any problems with the technical development of the project or in obtaining required resources. Management support was \u201cclearly demonstrable,\u201d and the users were \u201ccommitted\u201d and \u201chighly positive.\u201d The implementation was considered to be \u201cvery simple,\u201d and no issues were expected to arise due to the project\u2019s size or complexity (Project feasibility report, September 2005). Thus, many of the commonly reported risks associated with project failure did not appear to apply in this case. The only project risk or constraint anticipated in the feasibility report was the availability of Claire and Gary, as key users of the existing spreadsheet models, to interact with the external developers and test the emerging solution. In practice, however, the project was subject to various delays and problems so that it stretched over a protracted period of time, eventually losing much of its currency as organizational events overtook it. In the following, we focus primarily on the completion of the project and the early use of the MDS solution as most relevant to our consideration of project outcomes (Pinto & Slevin, 1988). This is where stakeholder perceptions and opinions about the project outcome tend to stabilize, although they may shift as situations and context change. A. Solution Development Work on the MDS solution began in early November 2005, on site at AlphaCo on a standalone server supplied by SoftCo. It involved input from Frank, the external project manager, and Gary, the intended primary user of the MDS solution. Solution development entailed iterative cycles of building by SoftCo\u2019s senior developers, Nancy and Ross, testing by Frank and Gary, and subsequent amendment by the developers. Solution delivery had been negotiated for early December, but development quickly fell behind schedule and milestones had to be revised. By the end of 2005, the expected project completion time and date of Frank\u2019s departure (at the end of his contract), the MDS solution was largely complete but untested and lacking documentation. At the beginning of 2006, Gary took over as the AlphaCo project manager, responsible for getting the MDS solution tested and operational within AlphaCo\u2019s networked environment. Reconciliation of the emerging MDS solution with historical data was delayed due to data corruption, problems with the MDS solution, and errors in the original spreadsheet models. In addition, during this time, a major restructuring of AlphaCo IS disrupted standard operations. While the contract performance reporting functionality of the MDS solution was operational from the end of February 2006, the contract evaluation functionality was not completed until mid-May 2006. B. Project Closure Under Pressure During March 2006, Gary came under increasing pressure from various parties to complete the ISOM project. Claire summarized the frustrations and increasing urgency to have an operational MDS solution for use by the ISOM team: We\u2019ve got to get the damn thing working. It\u2019s really frustrating. . . . It has to be working. We\u2019ve got to get it working. So, we\u2019ve got to get it done this week. . . . The problem has been keeping focused. . . . Busy, busy, busy. (Claire, informal conversation, March 2006) The ISOM manager, Dave, believed that an operational MDS solution would not only be useful to his team, but would also justify the project and its benefit at an organizational level: This is like a long sunset, isn\u2019t it? . . . I\u2019ve put the pressure on Gary to get that thing finished. . . . We\u2019re getting things that we\u2019d be able to use it for. . . . We\u2019ve got to demonstrate that we have finished, we\u2019re using it, and the benefits are being realized. (Dave, informal conversation, March 2006) In addition, the ISPO was pushing Gary to close the project at this time by completing a brief closure report in Tracking, AlphaCo\u2019s project management support tool. Information from this report is required to fulfill portfolio reporting to the CIO and his management team. Although the formal Development and Implementation phases of the ISOM project had not been completed (the project\u2019s status in Tracking was still Development, to which it had been set in December \n\n2005), institutional pressures were applied to formally close the project with respect to organizational systems, in order to capitalize the project within the current financial year and avoid it registering as a \u201cred light\u201d on the AlphaCo IS balanced scorecard (Gary, informal conversation, April 2006). During February, Gary had revised the forecast project completion date to February 17, 2006, and subsequently recorded the actual project completion date as February 28, 2006 (Project document, March 2006). The day after Gary completed the closure report on April 3, an ISPO analyst updated the project\u2019s status in Tracking to \u201cComplete.\u201d As early as February, Marie, SoftCo\u2019s project manager, had \u201c[her] Board on [her] back about the outstanding invoices\u201d (Marie, e-mail, February 2006) yet to be paid by AlphaCo and, as the project increasingly dragged on, she exerted pressure on Gary to pay these and sign off on the project. By April, she was requesting the return of SoftCo\u2019s server, on which the MDS solution had been developed, threatening to charge AlphaCo for its continued use\u2014a move Gary interpreted as encouraging him to sign off on the project (Gary, interview, May 2006). By mid-May, Gary regarded the MDS solution as \u201cessentially complete.\u201d Apart from some reconciliation problems originating from AlphaCo\u2019s original models and data, the MDS solution functioned correctly, and Gary was keen to arrange a final meeting with SoftCo: The project, in my mind, is essentially complete. . . . I\u2019m going to get a buy-in from the powers that be that it can\u2019t be reconciled. . . . Accept it, move on. So, as far as I\u2019m concerned, it\u2019s happening as soon as I have some sign-off from Claire, Dave, and a few others. I want to tick it off and ring SoftCo and have a final sign-off meeting. (Gary, interview, May 2006) This meeting occurred in early June. Discussion focused on organizing a final training session for potential solution users and transferring the MDS solution to AlphaCo\u2019s networked environment. For the AlphaCo project team, the meeting represented some sort of closure in terms of the ISOM project: \u201cFabulous. I think we\u2019re cooked. Awesome. Thank you very much. Long time coming, but we\u2019re there. We\u2019re there\u201d (Claire, project meeting, June 2006). A final full-day training session run by SoftCo was held soon after. From SoftCo management\u2019s perspective, this represented a final handover of the MDS solution: \u201cThat [training] should be part of the closure. . . . It\u2019s very important just to make sure things get closed, rather than just the guys finishing and going \u2018It\u2019s done. See you later\u2019\u201d (SoftCo representative, informal project conversation, January 2006). Claire and Gary saw the training session as an opportunity to raise awareness of the MDS solution with a wider audience in AlphaCo IS, including other team members, other users of information produced by the MDS solution, and potential users of other MDS applications. In the end, however, only Gary and Vince, another ISOM team member, attended: \u201cYou can lead your horse to water, but . . . only Vince went. It would\u2019ve been far better if Claire and [a non-ISOM analyst], perhaps Dave, had gone along. But everyone always gets pushed for time\u201d (Gary, interview, October 2006). Ironically, Vince was transferred overseas in September 2006 and was subsequently made redundant. Installation of the MDS solution in AlphaCo\u2019s networked environment took four months to complete (instead of the usual two weeks), mainly because of delays in the IT infrastructure support team\u2019s processing of the necessary change request and server instability problems. According to AlphaCo IS project management documentation, the ISPO was supposed to instigate a formal review once the project was complete. From the time the ISOM project status was shown as \u201cComplete\u201d in Tracking (April 2006), Gary expected a review to occur (although he was unsure of its form, which would depend on the size, subject, scope, or level of complexity of the project) and was waiting for the ISPO to organize it. However, as part of the AlphaCo IS restructuring occurring at the time, the ISPO merged with another AlphaCo project office, with an expanded company-wide scope. In the consequent \u201cupheaval and change\u201d (Gary, interview, June 2007), a final review was never undertaken: Because we had a restructure, we lost that\u2014a whole lot of post-implementation review and all that stuff that was going to happen. . . Someone may put their hand up and say, \u201cHey, look, we should\u2019ve done this,\u201d but I don\u2019t think so. There\u2019s bigger priorities. (Gary, interview, March 2007)  This was not an isolated occurrence, as James, the project\u2019s sponsor, indicated that the restructuring had disrupted several IS projects (James, interview, June 2006). C. (Non)Use of the MDS Solution The intended users of the MDS solution were the ISOM team, who were responsible for monthly contract performance reporting and ad hoc contract evaluation and scenario analysis. Outside the ISOM team, the main user of information produced from the new solution would be James, the IS senior manager with overall responsibility for vendor, contract, and commercial management. Other IS senior managers, AlphaCo senior management, and the Board, and occasionally individual business units, would be indirect users of information from the MDS solution in a variety of reports, including the AlphaCo IS balanced scorecard.  The restructuring of AlphaCo IS in early 2006  changed organizational reporting requirements, including for the ISOM team, which was reformed into a new (smaller) team with wider responsibilities for financial management and performance reporting across all of AlphaCo IS (rather than their original focus on the IT outsourcing contract) and still reporting to James. However, in March 2006, James was transferred to another organizational unit and was replaced by a new IS senior manager, Stuart. With James\u2019s departure, interest outside the original ISOM team in the monthly contract performance report ceased: No one has really been viewing it [the performance report], because there\u2019s been such disruption outside. But I\u2019m going to have to start getting out there and say, \u201cLook. Who owns this report? Who wants this report?\u201d and \u201cLet\u2019s use it.\u201d I \n\nmean, it\u2019s a good report. It shows us a lot of things. (Gary, interview, April 2006) Gary continued to upload data into the MDS solution and to produce monthly contract performance reports until mid-2006, although these were not published for external consumption. From June 2006, Stuart initiated a new type of monthly reporting based around cost centers across AlphaCo IS (consistent with a new organizational focus on cost management). In this new reporting climate, the outsourcing contract performance report and even the IS balanced scorecard lost much of their currency: \u201cWe got Stuart, who would\u2019ve got all our reporting, and he wasn\u2019t interested in that reporting\u201d (Gary, interview, March 2007). In effect, the restructuring of AlphaCo IS had removed an important source of organizational legitimacy for reporting on the outsourcing contract: \u201cPreviously, we were the ISOM team and we reported the outsourced agreement. But there\u2019s no ISOM team anymore. . . . You can\u2019t produce a report for a team that doesn\u2019t exist\u201d (Gary, interview, October 2006). Nevertheless, Gary believed that the functionality provided by the MDS solution would still be beneficial to the company when the disruption caused by the restructuring settled down: We\u2019ve now got to work out, going forward, what reports we need and who needs to see them . . . In about two months, someone is going to say, \u201cHey, how\u2019s [the IT outsourcing provider] tracking against what we expected it to track?\u201d . . . That\u2019s where it will be useful. (Gary, interview, October 2006) However, from the time of the completion of the MDS solution in May 2006 until July 2007 (the end of the fieldwork period), the MDS solution was used only sporadically, as a data repository and to retrieve data for ad hoc tasks: \u201cThe MDS solution hasn\u2019t been used at all really. I use it for the odd times to spit out some volumes and things like that. It\u2019s a good repository, but we could\u2019ve done that in a [simpler] database\u201d (Gary, interview, March 2007). The full potential of the MDS solution was not realized, in part, because of Gary\u2019s incomplete understanding of the contract evaluation functionality of the MDS solution: \u201cIt\u2019s just limited by my knowledge of how it works\u201d (Gary, interview, March 2007). Further, other uses of the MDS solution, which could have been achieved by expanding its functionality, and the intended extension of the user base of the MDS solution, had not eventuated by mid-2007, partly because of a reduction in staff numbers and the increased demands on those remaining: There\u2019s lots of things that it could be used for. . . . We\u2019re just not very proactive at the moment. . . . It will be useful, but I don\u2019t think we\u2019ve got the amount of staff to actually start doing the proactive stuff. (Gary, interview, March 2007) Dave suggested that the relatively small size of the ISOM project meant that the MDS solution \u201cfell off the radar when the restructuring occurred\u201d (Dave, informal conversation, March 2007), while larger projects, particularly enterprise-wide ones, had sufficient staff to manage them through the restructuring. By March 2007, Dave felt that the relevance of the outsourcing contract reporting from the MDS solution would once again be realized: \u201cWith all the changes, even the demand for some of the reporting has gone away. It went away for a year. . . . But now it\u2019s come back\u201d (Dave, interview, March 2007). On Dave\u2019s suggestion, once again, Gary began uploading monthly contract performance data files into the MDS solution, which had not been updated since July 2006. Part of this renewed urgency on Dave\u2019s part seems to have stemmed from pressure applied by Stuart: \u201cto actually show that it\u2019s [the MDS solution] actually useful\u201d (Gary, interview, March 2007). Certainly, Dave continued to feel the need to demonstrate the benefit of the MDS solution, given the investment made by AlphaCo.  For some time, Gary had wanted to demonstrate the capabilities and potential of the MDS solution to others in AlphaCo IS, particularly Dave and Stuart. Gary believed that a major reason the MDS solution was being underutilized was its lack of visibility in the company. He also wanted to review the future use of the MDS solution in the restructured AlphaCo IS context. In June 2007, a meeting was held to demonstrate the MDS solution and discuss its future. Those present at the meeting, including Dave and another IS manager, saw its potential and felt that there would be demand for its use going forward. Crucially, however, Stuart cancelled his attendance at the demonstration meeting, which Gary interpreted as reflecting \u201cthe low priority of the [MDS solution]\u201d (Gary, informal conversation, June 2007). This effectively meant that AlphaCo\u2019s IS senior management remained unaware of the MDS solution: \u201cStuart didn\u2019t come, and suddenly now you can\u2019t take it up any higher, because you\u2019ve got a glass ceiling. . . . It\u2019s just sort of gone in the too-hard basket\u201d (Gary, interview, July 2007). V. PROJECT EVALUATION IN ALPHACO IS There was a perception within AlphaCo that, historically, many IS project outcomes had been problematic. For example, in mid-2004, an internal AlphaCo document highlighted a poor record of project performance in terms of process and product (e.g., \u201cProjects often late, over budget. . . . Systems may not support business needs\u201d). Despite this implicit evaluation of IS project outcomes and that various IS process documents referred to project success, at the time this study was conducted there was not a single, formal definition of project success or failure used within AlphaCo, a limitation recognized by the ISPO manager: \u201cIt\u2019s a weak area for us, quite frankly\u201d (Andrew, interview, May 2006). In practice, different success criteria were used for different purposes. For example, in tracking the performance of active projects on a monthly basis\u2014in effect, project management success\u2014the ISPO utilized the traditional iron triangle criteria: \u201con time, in scope, on budget . . . are quite heavily looked at\u201d (Kate, interview, July 2005). These measures were reported in a monthly project portfolio dashboard to the CIO and his management team, as well as in the AlphaCo IS balanced scorecard. Further, as part of their weekly review of the dashboard, the ISPO used these three criteria to identify \n\npotentially problematic projects and to evaluate \u201cwhether we need to follow anybody up\u201d (Kate, interview, July 2005). In terms of overall project success, the criteria seemed to be somewhat broader and less well defined: \u201cWe are still arguing about the criteria for [project success]\u201d (Brenda, interview, May 2006). For example, IS process documents referred to process and product quality and the delivery and realization of benefits, in addition to the traditional iron triangle success criteria. Business (client) acceptance of a solution was also emphasized with, for example, AlphaCo\u2019s CIO noting that successful development was understood generally as whether the project \u201cmeets the criteria as outlined in the business case.\u201d There was also some recognition of the possibility of multiple perspectives on project success, in that part of the formal business requirements management process for large or complex projects specified identifying success criteria for each of a project\u2019s stakeholders. A formal business benefits realization process was starting to be introduced into AlphaCo IS after mid-2006 (by which time the ISOM database solution had been delivered): \u201cThat\u2019s coming, but, you know, to be frank, it\u2019s something that hasn\u2019t been institutionalized yet\u201d (Andrew, interview, May 2006). In summary, at the time of this study, a range of project success criteria was in use within AlphaCo IS for different purposes and to varying extents. In particular, the ISPO used traditional process success criteria to monitor and evaluate project management performance, while the concept of client acceptance was the most visible product success criterion observed. Evaluation of projects against organizational objectives such as the realization of business benefits was recognized but not implemented. VI. STAKEHOLDER PERCEPTIONS OF THE ISOM PROJECT OUTCOME Although, as noted earlier, a formal evaluation of the ISOM project was never conducted, various project stakeholders made informal evaluations based on their specific perspectives, interests, and expectations. A stakeholder analysis of project outcome evaluation is presented and summarized in Table 2. A. AlphaCo ISPO The ISPO\u2019s role was focused on project management processes and reporting. This involved monitoring the progress of IS projects and \u201cmaintain[ing] a certain level of consistency in the project delivery\u201d (Brenda, interview, May 2006). As such, the ISPO\u2019s concerns related to ensuring compliance to organizational processes \u201cin terms of reporting, in terms of financial control and tracking, in terms of quality assurance. So, really focused on time and budget\u201d (Andrew, interview, May 2006). This emphasis on resource usage and reporting prompted the pressure they placed on Gary to formally close the ISOM project in AlphaCo\u2019s project management tracking system. For the ISPO, project success was being able to record the project\u2019s status as \u201cComplete,\u201d thus avoiding its registering any \u201cdanger signs up on our [project portfolio] dashboard\u201d (Brenda, interview, May 2006). In terms of the iron triangle criteria used by the ISPO, the ISOM project was officially completed to specifications and within budget but ran slightly over time. In his official closure report in Tracking (April 2006), Gary noted that \u201cAll objectives . . . have been met. . . . The finishing deadlines for the project were stretched out longer than expected.\u201d Indeed, the ISOM project was regarded by the ISPO as more successful than other projects: \u201cThere was nothing in the reporting process that we had that suggested I needed to get involved in terms of a project health check\u201d (Andrew, interview, May 2006). Despite the official closure of the project, work on it continued to be performed by Gary and SoftCo in an effort to reconcile the new MDS solution with the original spreadsheet models. One consequence of the official project closure was that the project accounts began to be closed. This meant that costs associated with the additional work, as well as subsequent costs required to transfer the MDS solution to AlphaCo\u2019s networked environment, were treated as supplementary. As such, these costs required separate approval; although, had these been included as project costs, the project would still have been within budget. B. SoftCo In terms of project success, the SoftCo developers, Nancy and Ross, were pleased with what they had achieved by the end of 2005: \u201cFrom my perspective . . . I think Nancy and I worked quite well to get [the MDS solution] done in that time frame\u201d (Ross, interview, December 2005), although they expressed disappointment that it \u201cdidn\u2019t get delivered on time\u201d (Nancy, interview, December 2005). As developers, their interests focused on the timely delivery of a workable solution to the prescribed specifications. Indeed, the SoftCo development team felt that (barring some minor problems that needed to be addressed) the MDS solution had achieved what it was meant to: \u201cThey [SoftCo] do all talk highly of it . . . they are quite positive about it. They believe in it\u201d (Gary, interview, January 2006). Marie similarly emphasized what had been achieved by the developers, although she pointed out that a constrained project time frame had compromised SoftCo\u2019s ability to transfer knowledge of the MDS tool itself: \u201cThere was not enough time to get [the ISOM team] up to speed with MDS, to understand how MDS works\u201d (Marie, interview, December 2005). This time constraint was a result of the original contract negotiations undertaken by a SoftCo representative. Influenced by a desire to secure AlphaCo as a major client, the representative underestimated the project\u2019s complexity and committed SoftCo to an unrealistic time frame and project budget: \u201cThat was a Board decision . . . because obviously AlphaCo\u2019s a good client. . . . Usually I\u2019d stick to my guns on time frame, if I don\u2019t agree that I can deliver it on time\u201d (Marie, interview, December 2005). As the SoftCo project manager, the iron triangle criteria of on time, within budget, and to specifications were important practical considerations to be met for Marie. She was confident that the \n\ndeveloped solution would achieve what it was meant to and, in terms of time and budget, she had always had a realistic assessment of what was achievable: \u201cI always said we could never do it in this time for the money\u201d (Marie, project meeting, December 2005). In terms of her company\u2019s objective in establishing a relationship with AlphaCo (for which they were prepared to bear a financial loss on the project), Marie was optimistic: \u201cI think the client relationship was good. . . . You want to keep the relationship going. And I\u2019m hoping that they see that we can deliver\u201d (Marie, interview, December 2005). \n \n\n\n",
    "is_processed": true,
    "process_error": null,
    "content_length": 52929,
    "local_pdf_path": "data/pdfs/A Perspective-Based Understanding of Project Success_f73d58d2.pdf"
  },
  "arxiv_c012e4bbe00b5a57ac6da964319de949": {
    "title": "Early Career Developers' Perceptions of Code Understandability. A Study of Complexity Metrics",
    "url": "http://arxiv.org/pdf/2303.07722v2",
    "source": "arxiv",
    "authors": [
      "Matteo Esposito",
      "Andrea Janes",
      "Terhi Kilamo",
      "Valentina Lenarduzzi"
    ],
    "published_date": "2023-03-14T09:11:10+00:00",
    "summary": "Context. Code understandability is fundamental. Developers need to understand\nthe code they are modifying clearly. A low understandability can increase the\namount of coding effort, and misinterpreting code impacts the entire\ndevelopment process. Ideally, developers should write clear and understandable\ncode with the least effort. Aim. Our work investigates whether the McCabe\nCyclomatic Complexity or the Cognitive Complexity can be a good predictor for\nthe developers' perceived code understandability to understand which of the two\ncomplexities can be used as criteria to evaluate if a piece of code is\nunderstandable. Method. We designed and conducted an empirical study among 216\nearly career developers with professional experience ranging from one to four\nyears. We asked them to manually inspect and rate the understandability of 12\nJava classes that exhibit different levels of Cyclomatic and Cognitive\nComplexity. Results. Our findings showed that while the old-fashioned McCabe\nCyclomatic...",
    "categories": [
      "cs.SE"
    ],
    "entry_id": "http://arxiv.org/abs/2303.07722v2",
    "meta": {
      "content_type": "academic_paper",
      "is_curated": true,
      "source_quality": 8
    },
    "content_type": "academic_paper",
    "text": "Early Career Developers\u2019 Perceptions of Code Understandability.\nA Study of Complexity Metrics\nMatteo Espositoa, Andrea Janesb, Terhi Kilamoc, Valentina Lenarduzzia\naUniversity of Oulu, Finland\nbFree University of Bozen-Bolzano, Italy\ncTampere University, Finland\nAbstract\nContext. Code understandability is fundamental. Developers need to understand the code they are modifying clearly. A low\nunderstandability can increase the amount of coding effort, and misinterpreting code impacts the entire development process.\nIdeally, developers should write clear and understandable code with the least effort.\nAim. Our work investigates whether the McCabe Cyclomatic Complexity or the Cognitive Complexity can be a good predictor\nfor the developers\u2019 perceived code understandability to understand which of the two complexities can be used as criteria to\nevaluate if a piece of code is understandable.\nMethod. We designed and conducted an empirical study among 216 early career developers with professional experience\nranging from one to four years. We asked them to manually inspect and rate the understandability of 12 Java classes that\nexhibit different levels of Cyclomatic and Cognitive Complexity.\nResults. Our findings showed that while the old-fashioned McCabe Cyclomatic Complexity and the most recent Cognitive\nComplexity are modest predictors for code understandability when considering the complexity perceived by early-career de-\nvelopers, they are not for problem severity.\nConclusions. Based on our results, early-career developers should not be left alone when performing code-reviewing tasks\ndue to their scarce experience. Moreover, low complexity measures indicate good understandability, but having either CoC or\nCyC high makes understandability unpredictable. Nevertheless, there is no evidence that CyC or CoC are indicators of early-\ncareer perceived severity.Future research efforts will focus on expanding the population to experienced developers to confront\nwhether seniority influences the predictive power of the chosen metrics.\nKeywords: Cyclomatic Complexity, Cognitive Complexity, Empirical Study, Early-Career, Developers, Code Undestendability,\nSeverity\n1. Introduction\nCode understandability is an essential aspect of software\ndevelopment. Code understandability can be defined as the\nmeasure to which \u201ccode possesses the characteristic of un-\nderstandability to the extent that its purpose is clear to the in-\nspector\u201d [1]. Having poor code understandability in the pro-\ngram code can increase the amount of coding effort by more\nthan 50% [2, 3]. To avoid misinterpretation of the code, de-\nvelopers should write code that requires the least amount of\neffort to be understood [4].\nWhen code is easy to understand, developers can more\neasily identify and fix errors, modify existing code, and in-\ntegrate new code into existing projects. On the other hand,\ncode that is difficult to understand can lead to confusion, er-\nrors, and time-consuming troubleshooting [5]. Several fac-\ntors contribute to code understandability, including the use\nEmail addresses: matteo.esposito@oulu.fi (Matteo Esposito),\nandrea.janes@unibz.it (Andrea Janes), terhi.kilamo@tuni.fi (Terhi\nKilamo), valentina.lenarduzzi@oulu.fi (Valentina Lenarduzzi)of clear and concise syntax, consistent formatting, naming\nconventions, as well as well-organized code structure. Addi-\ntionally, documentation and comments can also play a cru-\ncial role in improving code understandability. Different met-\nrics, such as the McCabe Cyclomatic Complexity [6] (CyC)\nand the CoC Complexity [7] (CoC), have been proposed in\nthe past to evaluate the complexity of the code. Current static\nanalysis tools allow developers to keep track of these metrics\nin their code in real-time. CoC has been introduced by the\ntool SonarQube1as an extension of the McCabe CyC, to eval-\nuate code understandability [7] better. The effect of CoC on\ncode understandably was investigated by two recent studies\nby Scalabrino et al.[8] and Munoz [4]. CoC seems to be a good\nindicator of understandability where a higher value means\na reduction of understandability. Moreover, as highlighted\nby Munoz [4], the different complexity and understandabil-\nity metrics are not deeply investigated and validated. In par-\nticular, it is still not evident which metrics better support the\nprediction of code understandability [8]. As a consequence,\n1https://www.sonarqube.org\nPreprint submitted to Information and Software Technology July 16, 2024arXiv:2303.07722v2  [cs.SE]  15 Jul 2024\n\nLavazza et al. [9] extended the work of Munoz et al. [4] com-\nparing CoC and CyC to identify which metric provides an ad-\nvantage for code understandability.\nHowever, Code can also be complex due to problems such\nas design issues or code smells. As highlighted by Politowski\net al. [10], anti-patterns in the code can decrease the code un-\nderstandability and increase the effort needed to modify the\ncode. Therefore, if the complexity metrics are correlated with\ncode understandability, problems in the code can also be as-\nsociated with the complexity measures.\nPrevious studies highlighted the need to understand\nwhether CoC is correlated with understandability better than\nthe other existing metrics, and the previous results, based on\nmining software repository studies, could not tip the scales.\nTherefore, we decided to investigate the impact of these two\nmetrics on code understandably from the point of view of the\ndeveloper\u2019s perception.\nWe designed and conducted an empirical study involving\n216 early-career developers with at least one year of experi-\nence. We asked them to manually inspect twelve Java classes\nto provide their opinion on the understandability of the code,\non the presence of issues, and to rate the severity of the exist-\ning problem, if any. We analyzed the developers\u2019 answers and\ncorrelated the developer\u2019s perceived understandability with\nthe CyC and CoC.\nMoreover, suppose a positive but lower correlation exists\nbetween complexity measures and code understandability.\nIn that case, we also aim to understand if complexity mea-\nsures are correlated with the developers\u2019 perceived severity\nof problems in the Java code.\nWhile there are differences between developers\u2019 opinions\non the perception of the complexity of the code, the overall\ndata indicate that CoC and CoC are modest indicators of the\nperceived understandability of the code. We also found that\nneither CyC nor CoC is correlated with the presence and the\nperceived severity of problems in the code.\nWe focused on early career developers because we believe\nit is important to grasp their perceptions. For instance, (1)\nidentifying how they interpret and use the complexity mea-\nsures in real-world coding scenarios gives insight into where\ntheoretical knowledge might not find its way into practice.\nMoreover, such insights can also show (2) how more intuitive\nand effective training programs, tools, and resources can be\ndesigned to suit them better.\nTherefore, our work can aid in highlighting common chal-\nlenges and misbeliefs in the first years of a professional\ncareer, hence, professional growth, thus marking possible\nvenues to select good practices that might improve the qual-\nity and maintainability of the code in general, boosting over-\nall productivity and confidence for early-career developers.\nPaper Structure . Section 2 describes the related work, in\nSection 3 we introduce the background of this work, while\nin Section 4 we outline the research methodology adopted in\nthis study. Section 5 presents and discusses the obtained re-\nsults. Section 7 identifies the threats to validity and Section 8\ndraws the conclusions.2. Related Work\nCode understandability is described as the measure of how\nwell \u201ccode possesses the characteristic of understandability\nto the extent that its purpose is clear to the inspector\u201d [1].\nTo better understand a piece of code, legibility is one of the\nmain factors to take under control since if code is harder to\nread, it could be harder to understand [1]. Code understand-\ning requires building high-level abstractions from code state-\nments, visualizations, or models [11, 12]. However, also read-\nable code could be difficult to understand [8].\nCode understandability can be measured by considering\nseveral different factors. One possibility is based on the\nperceived understandability reported by developers answer-\ning comprehension questions [13, 14], or filling out blank\nprogram parts [15], or extending and/or modifying existing\npieces of code [16]. To be more accurate, some studies traced\nthe time to perform the assigned task, both questions or de-\nveloping ones [17, 16]. Other approaches evaluate code un-\nderstandability focusing on physiological metrics detected by\nbiometrics sensors [18, 19] or eye-tracking devices [20, 21].\nMoreover, considering the perceived understandability by\nrating the different pieces of code under analysis, can provide\na positive step forward in this field [8]. Different factors can\npositively or negatively influence how developers perceive\nthe understandability of a piece of code [8], which can be\nuseful to develop a model to automatically measure the un-\nderstandability. Several studies investigated the role of soft-\nware metrics focusing on complexity as well as source-level\nmetrics, such as LOC [8] and CyC [22, 8] or CoC [7] during\nthe developing process or maintenance tasks [23]. Moreover,\nother types of metrics such as documentation-related met-\nrics such as comment readability and metrics relating to a de-\nveloper\u2019s experience were considered by researchers [8]. Re-\nsults showed that none of the investigated metrics accurately\nrepresent code understandability [23, 8]. However, all the\nsoftware metrics considered in these studies suffered from\nempirical validation of their ability to measure code under-\nstandability. In particular, CoC needs more accurate valida-\ntion [7]. However, the results demonstrated that such metrics\ncan improve the effectiveness of the code understandability\nunder evaluation [8].\nA deeper investigation of CoC has been performed by\nMunoz et al. [4] and later by Lavazza et al. [9]. Munoz et al. [4]\nconsidered CoC the metric measured by SonarQube and eval-\nuated the association with different code understandability\nmetrics: the time taken to understand a code snippet, the\npercentage of correctly answered comprehension questions\non a code snippet, subjective ratings of a comprehension\ntask, and physiological measures on the subjects engaged\nin understanding code. Results showed that CoC is corre-\nlated with the time spent by a developer to understand source\ncode. However, they did not compare the magnitude of this\ncorrelation against different complexity metrics. As Lavazza\net al. [9] reported in their work \u201c before embracing the use of\nCoC, we need to understand whether CoC is correlated with\nunderstandability better than the measures that were pro-\n2\n\nposed in the past for the same purpose \u201d . To assess it, Lavazza et\nal. [9] conducted an empirical study extending study [4]. They\ncorrelated CoC and CyC to identify which metric provides\nan advantage for code understandability. Unfortunately, the\nachieved results are not proposed for a particular metric.\n3. Background\nCyC was introduced by McCabe in 1976 [6]. It is a graph\ntheoretical measure of program complexity. CyC measures\nthe amount of linearly independent paths in the program. It\nis based on the assumption that the more independent paths\nthere are in a program, the more complex the program is\nlikely to be.\nThe definition of CyC is based on representing program\ncode as a control flow graph, i.e. a directed graph with all\nexecution paths of the program depicted. Each node in the\ngraph represents a basic code block and each edge is a pass\nof control between the blocks. Based on the graph, CyC Mis\ncalculated as M=E\u2212N+Pwhere Eis the number of edges,\nNis the number of nodes, and Pis the number of strongly\nconnected components in the graph. While CyC is a widely\nused metric to indicate the error proneness of program code,\nit fails to address certain code issues especially when it comes\nto computational complexity. CyC is poor at handling nested\nconditions and iterative structures [24]. It has been regarded\nas a poor metric for code understandability [7].\nIn SonarQube, the Complexity measure is calculated based\non the CyC of the code [25] where each split in the control\nflow of a function increments the complexity measure by one.\nHowever, there are small differences between languages in\nhow the complexity gets calculated due to differences in lan-\nguage structures.\nCyC can be used as an indicator of how difficult a pro-\ngram is to test, maintain, or modify. Programs with high\nCyC are generally more difficult to understand, analyze, and\nchange, as they contain more decision points and potential\npaths through the code. CyC is often used as a quality met-\nric to evaluate the maintainability and overall complexity of\nsoftware programs.\nCoC is based on the idea that not all decision points in\na program are equally difficult for a human to understand.\nSome decisions are simple and easy to reason about, while\nothers are more complex and require more mental effort.\nCoC assigns a weight to each decision point in the code based\non its level of complexity, with more complex decisions re-\nceiving a higher weight.\nIn SonarQube, CoC was introduced as \u201ca new metric\nfor measuring the understandability of any given piece of\ncode\u201d [7]. Based on the documentation [26], CoC exhibits\nsome similarity with CyC defined by McCabe [6], since CoC\ncan address some of the \u201ccommon critiques and shortcom-\nings belonging to CyC\u201d [24]. Moreover, CoC can fill the gap\nrelated to understandability present in the CyC [27, 28, 7].\nCrasso et al. [27] suggested a set of metrics that combines\nvarious measurements encompassing essential aspects ofobject-oriented programming that have been validated by\nMisra et al. [28]. In both studies, the authors evaluated exist-\ning CoC metrics (such as Cognitive Functional Size and Cog-\nnitive Program Complexity Measure), chose those that high-\nlight distinct features, made any required adjustments, and\nthen assembled them into a unified collection.\nSonarQube computed CoC metrics based on three basic\nrules [7]:\n1. \u201cIgnore structures that allow multiple statements to be\nreadably shorthanded into one\u201d;\n2. \u201cIncrement for each break in the linear flow of the code\u201d;\n3. \u201cIncrement when flow-breaking structures are nested\u201d .\n4. Empirical Study Design\nThis section presents the empirical study\u2019s goal, research\nquestions, metrics, and hypotheses. We outline the study\ncontext, the data collection, and the analysis. We designed\nand conducted an empirical study following the guidelines\nproposed by Wohlin [29].\n4.1. Goal and Research Questions\nThe goal of this study is to compare CyC and CoC with\nthepurpose of understanding which complexity metric better\nrepresents the early career developer\u2019s perceived complexity\nof the Java code. The perspective is of researchers since they\nare interested in understanding what complexity metrics can\nbe more helpful to understand the code complexity.\nBased on our study goal, we derived the following Research\nQuestions:\nRQ 1.What is the accuracy of early career developers\nin detecting problematic classes?\nUnderstanding how early career developers perceive code\nunderstandability is important because early career develop-\ners are usually put to work on maintenance and evolution\n[30, 31, 32]. Hence, the ability of these developers to correctly\nidentify classes with problems significantly impacts software\nquality and development efficiency [33, 34]. Therefore, we\naim to evaluate the accuracy of those developers in their early\nyears at detecting problem classes within software code.\nAlthough important, assessing early-career development\u2019s\naccuracy would only lightly scratch the surface of the prob-\nlem. No previous study has investigated possible proxies of\ndeveloper\u2019s perception regarding perceived understandabil-\nity and severity. Therefore, we computed complexity metrics\nsuch as CoC or CyC, and we asked:\nRQ 2.Can complexity metrics indicate an early career\ndeveloper\u2019s perceived understandability of classes?\nCyC and CoC are employed to measure the complexity.\nHence the maintainability of software [35]. The unnoticed\n3\n\nand un-foddered fact is how well such metrics go with the\nperception of understanding according to early-career devel-\nopers, who have less experience and heuristics than their se-\nnior peers. Therefore, analyzing the relationship between the\nperceived understandability and complexity metrics could\nhint at whether current complexity metrics are useful pre-\ndictors of how less-experienced developers view understand-\nability.\nIn particular, since CoC is considered a \u201cmore contextual-\nized form of quantitative data on code complexity,\u201d we are\ninterested to understand if CoC is a better predictor for code\nunderstandability. Since CoC was built upon the CyC, we\nhypothesized it might better represent the code understand-\nability. Therefore we conjectured one hypothesis (H1) as fol-\nlows:\n\u2022H11:There is a correlation between complexity metrics\nand early career developer\u2019s perceived understandability\nof classes.\nHence, we defined the null hypothesis (H0) as follows:\n\u2022H01:There is no correlation between complexity metrics\nand early career developer\u2019s perceived understandability\nof classes.\nComplex code is considered hard to modify [2, 3]. More-\nover, code affected by high levels of CyC is usually affected by\nmore severe problems [2, 3]. Hence we ask:\nRQ 3.Can complexity metrics indicate an early career\ndeveloper\u2019s perceived severity of an existing issue in a\nclass?\nAs stated before, although complexity metrics are designed\nto quantify numerous facets of code that could impact its\nmaintainability and readability, it remains an open question\nhow the different complexity metrics align with the issue\nseverity ranking of human developers in their early careers\n[35, 30, 36]. This relationship can only be understood because\nearly career developers usually identify and fix code issues in\nreal projects [30, 37]. If complexity metrics could become a\ngood predictor for perceived severity, they could be used as\nan orientation means, guiding these developers in their work.\nHence, we aim to establish the strength of the relationship be-\ntween the established complexity metrics and the severity of\nissues in code classes as perceived by early-career developers.\nMoreover, we considered that a lower code understandability\ncould lead to a misleading in the problem identification in\nthe inspected code and, consequently, a wrong perception of\nits severity. Therefore we conjectured one hypothesis (H2) as\nfollows:\n\u2022H12:There is a correlation between complexity metrics\nand early career developer\u2019s perceived severity of an exist-\ning issue in a class.\nHence, we defined the null hypothesis (H0) as follows:\u2022H02:There is no correlation between complexity metrics\nand early career developer\u2019s perceived severity of an exist-\ning issue in a class.\n4.2. Study Context\nAs for participants, we selected junior developers. The rea-\nson for choosing them instead of senior developers is be-\ncause they are the developers that most frequently need to\napproach new code. In particular, junior developers com-\nmonly need to extend existing code in their company, fix\nbugs, or integrate new features. Therefore, we selected early\ncareer developers from various Finnish software houses. We\nselected participants based on their current tasks, specifically\nworking on existing code, and needed to understand prob-\nlems in the code when extending it or fixing bugs. We finally\ninvolved 216 junior developers with Java experience ranging\nfrom one to four years.\nWe did not present the CyC and CoC values to the partic-\nipants to not influence their ability to recognize a potential\ndesign problem only because they see the complexity values\nin advance.\n4.3. Study Setup and Data Collection\nWe designed our empirical study using the five steps below\nto answer our research questions. Figure 1 illustrates the pro-\ncess using the Business Process Model and Notation (BPMN)\n[38] specification language.\n1.Code Selection: We selected Java code affected by prob-\nlems of different severity from Apache Software Founda-\ntion projects.\n2.Complexity measurement: We measured the CyC and\nCoC of the selected Java code using SonarQube.\n3.Developers selection: We identified the junior developers\nto be included in our study.\n4.Code inspection: We asked developers to inspect the se-\nlected Java code and to provide their opinion on the un-\nderstandability of the code, on the presence of issues,\nand to rate the severity of the existing problem, if any.\n5.Data Analysis: We analyzed the developers\u2019 answers and\ncorrelated the developer\u2019s perceived understandability\nwith the CyC and CoC.\n4.3.1. Code Selection\nIn this section, we report the case and subject selection for\nthis study. We selected classes written in Java that were af-\nfected by different problems that can influence code under-\nstandably from Apache Software Foundation projects. Two\nof three authors and a senior Java developer independently\nevaluated the presence of issues in the code. Then, all three\npersons discussed possible inconsistencies and finally de-\nfined a list of 12 classes where all agreed on the presence of\nthe same issues (Table 1). More details of the selected classes\n4\n\nSelect case\nand subjectJava codeMeasure\ncomplexity\nInspect code\nCode understandability ,\nissues and relative severityAnalyze\ncorrelationCyclomatic and cognitive\ncomplexity\nAnswers to\nRQ2 and RQ3Figure 1: Empirical study design process\nand the problems identified in the code are available in the\nreplication package3. Table 5 details the selected classes and\nthe problems identified in the code. All the authors inspected\nthe selected classes and independently reported the identi-\nfied problems. All the authors validated the identified prob-\nlem at the end of the process.\n4.3.2. Complexity Measurement.\nWe measured the code complexity using CoC and CyC by\napplying SonarQube version 7.51. We selected SonarQube\nsince, to our knowledge, it is the only tool that detects both\nand reports how each metric is calculated. Moreover, we rely\non SonarQube since it is one of the most adopted static anal-\nysis tools by practitioners [39, 40].\n4.3.3. Code Inspection.\nWe asked developers to manually inspect the 12 Java\nclasses and provide their opinions about the code under-\nstandability. To collect the information, we organized the\nquestionnaire into four sections:\n\u2022Respondents\u2019 Background . We collected the profiles of\nthe respondents who were considering development ex-\nperience.\n\u2022Code Inspection . In this questionnaire section, we asked\nparticipants to manually inspect a Java class and provide\ntheir opinion about their perceived Code Understand-\nability through a five-point Likert Scale (1 means \u201cvery\ndifficult\u201d and 5 means \u201cvery easy\u201d). The questions are\nreported in Table 2.\n\u2022Perceived Problem Criticality in the code, reporting if\nthe problem exists in the class and rating their sever-\nitythrough a five-point Likert Scale (1 means \u201cvery low\nseverity\u201d and 5 means \u201cvery high severity\u201d).\nWe implemented the questionnaire using Google Forms.\nThe Questionnaire is available in the replication package3.Table 1: Selected classes\nClass C1 C2 C3 C4 C5 C6 C7 C8 C9 C10 C11 C12\nCyC 37 130 113 56 57 35 110 23 2 6 7 3\nCoC 38 73 36 68 3 6 0 6 1 0 1 0\n4.3.4. Study Execution\nWe provided the participants with instructions describing\nhow to access the classes and answer the survey. The par-\nticipants could inspect the classes and complete the online\nquestionnaire in one round. We informed the participants,\naccording to the GDPR2, about their rights and that they\ncould abandon the study anytime. Moreover, all information\nprovided by each participant has been treated as confidential,\nwithout disclosing any sensible data.\n4.4. Data Analysis\nThis section describes the procedure for analyzing the data\ncollected.\nConcerning the results of the code inspection phase, we\nfirst verified the participants\u2019 backgrounds by analyzing the\ndistribution of their education level (bachelor or master) and\ntheir experience as developers in software companies.\nTo address our research question, we quantitatively ana-\nlyzed developers\u2019 reported perceptions of code understand-\nability.\nTo investigate developers\u2019 accuracy (RQ 1), we measured it\nwith widely adopted IR accuracy metrics [37, 41, 42] (Table\n3 and computed the agreement among developers, i.e., Inter-\nRater Agreement (IRA) as suggested by established guidelines\n[43].\nWe analyze developers\u2019 IRA via Fleiss\u2019s \u03ba[44]. When assign-\ning items to different categories, the kappa statistic is com-\nmonly used to evaluate the agreement between raters or clas-\nsifiers. In our context, we used it to measure the level of IRA\nbetween the three HRs who reviewed the output of models\n2https://gdpr-info.eu\n5\n\nTable 2: Questions about code inspection\u2019s section\nRQ Question Answer type\nRQ1 How easy is it to understand the code of this class? Five-point scales\nRQ2Does, in your opinion, this class has design, coding style, or any other problems? Yes/No\nIf YES, please rate the severity of the problem Five-point Likert Scales\nTable 3: IR Metrics\nMetric Formula\nPrecisionT P\nT P+FP\nRecallT P\nT P+F N\nMCCT P\u2217T N\u2212FP\u2217F Np\n(T P+FP)(T P+F N)(T N+FP)(T N+F N).\nF1-score2\u00b7Preci sion \u00b7Recall\nPreci sion +Recall\nand HEs. When comparing the observed agreement level to\nthe expected agreement level, Fleiss\u2019s \u03baprovides a metric for\nthe reliability and consistency of the categorizations among\ntwo or more reviewers. We opted for Fleiss\u2019s \u03baover Cohen\u2019s \u03ba\nbecause the latter is restricted to only two reviewers. Table 4\npresents the interpretation Fleiss\u2019s \u03ba[44, 45, 46].\nTo investigate whether CyC and CoC (independent vari-\nables) can be indicators of a developer\u2019s perceived code un-\nderstandability (RQ 2) and severity (RQ 3) (dependent vari-\nable), we assessed the distribution of the collected data to se-\nlect the appropriate statistical tests for hypothesis testing and\ncorrelation analysis [47, 48]. and we conjectured one hypoth-\nesis (HN) as follows:\n\u2022H1N:The data do not belong to a normal distribution.\nHence, we defined the null hypothesis (H0) as follows:\n\u2022H0N:The data belongs to a normal distribution.\nWe tested HNwith the Anderson-Darling (AD) test [49].\nThe AD test assesses whether data samples derive from a spe-\ncific probability distribution, such as the normal distribution.\nAD measures the difference between the sample data and the\nexpected values from the tested distribution. More specifi-\ncally, it evaluates differences in the cumulative distribution\nfunction (CDF) between the observed data and the hypothe-\nsized distribution [49].\nThe AD test and the Shapiro-Wilk (SW) test [50] are both\nstatistical tests used to assess the normality of data.\nThe SW test focuses on the correlation between the ob-\nserved data and the expected values under a normal distri-\nbution, emphasizing the smallest and largest values in the\ndataset. Therefore, according to Mishra et al. [51], SW is more\nappropriate when targeting small datasets ( \u226450 samples).\nOn the other hand, the AD test considers a broader range of\nvalues, including those in the middle of the distribution, pro-\nviding a more sensitive evaluation of normality, especially forTable 4: Interpretation of \u03bavalues for measuring agreement\nValue of \u03ba Interpretation\n\u03ba<0 No agreement\n0\u2264\u03ba<0.4 Poor agreement\n0.4\u2264\u03ba<0.6 Discrete agreement\n0.6\u2264\u03ba<0.8 Good agreement\n0.8\u2264\u03ba<1 Excellent agreement\nlarger sample sizes than our own. Therefore, we preferred AD\nover SW [52]. AD is also considered one of the most powerful\nstatistical tools for detecting most deviations from normality\n[52, 53].\nTest results allowed us to reject the null hypothesis for\neach test case, H0N, asserting that the data was not normally\ndistributed .\nTherefore, we adopted the Spearman rank correlation co-\nefficient \u03c1instead of Pearson\u2019s to test the H1and H2values\n[54]. Spearman\u2019s \u03c1is a statistical measure used to assess the\nstrength and direction of association between two variables,\nand it is a non-parametric measure that evaluates the mono-\ntonic relationship between variables. Therefore, \u03c1assesses\nwhether the variables tend to increase or decrease together,\nregardless of the exact rate of change.\nWe interpret the values of \u03c1,according to Cohen [55]: no\ncorrelation if 0 \u2264\u03c1<0.1, small correlation if 0.1 \u2264\u03c1<0.3,\nmedium correlation if 0.3 \u2264\u03c1<0.5, and large correlation if\n0.5\u2264\u03c1\u22641. Corresponding limits apply for negative correla-\ntion coefficients. We set our significance level to the standard\nvalue of \u03b1=0.05.\nSpecifically, regarding RQ 3, each author has conducted\nthe qualitative data analysis individually. Moreover, pairwise\ninter-rater reliability was measured across the three sets of\ndecisions to get a fair/good agreement on the first iteration of\nthis process. Based on the disagreements, we clarified possi-\nble discrepancies and different classifications. A second iter-\nation resulted in perfect agreement. We conducted the anal-\nysis only for the cases where participants correctly identified\na problem in the code.\n4.5. Replicability\nTo allow our study to be replicated, we have published the\ncomplete raw data in the replication package3.\n5. Results\nIn this section, we report the results obtained by answer-\ning our RQs. We collected information from 216 early-career\n3https://doi.org/10.5281/zenodo.12743183\n6\n\nTable 5: Class Ground Truth\nClass Has Design Issue Issue Description\nC1 Yes -maintainability: code smells\nC2 Yes-CoC exceeded\n-maintainability: code smells\nC3 Yes -untested\nC4 Yes-buggy code\n-maintainability: code smells\n-CoC exceeded\nC5 Yes-duplicated code\n-maintainability: code smells\n(constants missing)\nC6 Yes -duplicated code\nC7 Yes -maintainability: critical code smells\n(unimplemented functions)\nC8 Yes -minor code smells\nC9 Yes -code smell: exception handling\nC10 No -untested, but fine\nC11 No -untested, but fine\nC12 Yes -minor code smell\nTable 6: Background Information\nEducation level Developer Experience\nBachelor 21% less than 2 years 84%\nMaster 79% 3 and 4 years 16%\ndevelopers.\n5.1. Early-career developers accuracy and agreement\nIn this subsection, we address background information\non the early-career developers interviewed, their accuracy in\nclassifying problematic classes, and their agreement.\nBackground Information. Table 6 presents the respondents\u2019\neducation level and years of experience. More specifically, we\ninterviewed 170 master\u2019s degrees (79%) and 46 (21%) bache-\nlor degrees, of which 96 (79.34%) had between 1 and 2 years of\ndeveloping experience, while the remaining 25 (20.66%) had\nmore than 3 and 4 years (Table 6).\nAccuracy. Figure 2 presents the distribution of early-career\ndevelopers\u2019 accuracy in detecting problematic classes in Pre-\ncision, Recall, F1, and MCC. According to Figure 2, we note\nthat albeit developers have a promising Precision with a\nmean value circa 0.97, they fail to detect true positives, de-\ntecting a considerable number of false positives reflected in\nthe Recall score that although scoring a mean value of 0.6, the\ninterval ranges from 0 to 1. MCC exemplifies the imbalance\nbetween Precision and Recall with negative values as low as\n-0.35 with a mean value of 0.3.\nIRA. Figure 3 reports the average agreement percentage by\nClass and Reviewer. According to Figure 3, on average, the\npercentage of agreement per class is over 55% with peaks of\n67% for C10 and as low as 49% for C9. Conversely, the per-\ncentage of agreement per reviewer varies wildly between 45%\nand 70%.\nTherefore, to evaluate IRA, we used Fleiss\u2019s \u03ba. Figure 4 re-\nports Fleiss\u2019s \u03baand the error standard deviation. According\n\u0010\u0013\u000f\u0017 \u0010\u0013\u000f\u0015 \u0013 \u0013\u000f\u0015 \u0013\u000f\u0017 \u0013\u000f\u0019 \u0013\u000f\u001b \u0014\u000f\u0013\n3UHFLVLRQ 5HFDOO )\u0014 0&&Figure 2: Distribution of early-career developers\u2019 accuracy in detecting prob-\nlematic classes.\nto Figure 4, the IRA is dispersed between negative discreet\nagreement and good agreement with a positive poor agree-\nment as mean value. Hence, we can affirm that on average\nearly-career developers have different sensibility to issues\nin a class .\nFinally, to answer RQ 1, we can conclude that early-career\ndevelopers have scarce agreement on classifying problem-\natic classes with a discrete accuracy .\n5.2. Complexity metrics and perceived code understandability\n(RQ 1)\nFigure 5 presents the distribution of CyC and CoC by per-\nceived understandability. We note the trend for which classes\ndeemed Hard to understand correspond to lower values of\nCyC and CoC.\nTable 7 presents the perceived code understandability. Ac-\ncording to Table 7 The respondents deemed half of the classes\n(C6-C12) very easy to understand, while the other half were\nneither hard nor easy.\nTable 8 presents Spearman\u2019s \u03c1to test the correlation be-\ntween CyC, CoC, and the perceived understandability. We\nnote that the correlations are statistically significant for both\ncomplexity metrics. Therefore, we can affirm that CyC and\nCoC exhibit a negative, moderate correlation . Hence, these\nresults statistically confirm what is already presented in Fig-\nure 5, a low level of understandability corresponds to higher\nvalues of the complexity metrics .\n5.3. Complexity metrics and perceived severity of the design\nproblem (RQ 3)\nPerceived design or coding style problem. The percentage\nof respondents who consider a class affected by a design or\ncoding style problem is less than 75% (Table 9).\nDesign coding style problem identification. It is interest-\ning to note that almost all the participants who identified a\nproblem in the classes correctly identified at least one of the\nactual problems previously validated by all the authors. The\nonly exception is for classes C7 and C12 not all the develop-\ners provided a description. 77.85% of them correctly iden-\ntified the correct problem for C7 and 89% considering C12\nclass. Table 9 shows the results for identifying the problems\n7\n\n\b\u0003RI\u0003DJUHHPHQW\n\u0013\u0014\u0013\u0015\u0013\u0016\u0013\u0017\u0013\u0018\u0013\u0019\u0013\u001a\u0013\n&\u0014 &\u0015 &\u0016 &\u0017 &\u0018 &\u0019 &\u001a &\u001b &\u001c &\u0014\u0013 &\u0014\u0014 &\u0014\u0015\n&/$66Figure 3: Average agreement percentage by Class.\n\u0010\u0013\u000f\u0018 \u0013 \u0013\u000f\u0018\n'DWL\n6WG\u0011\u0003(UURU .DSSD\nFigure 4: Fleiss\u2019s \u03baand error standard deviation (RQ 1).\ngrouped by Class (C). Therefore, as also highlighted by Ta-\nble 9, we can conclude that the understandability of the code\nis independent of the perception of a problem.\nDesign or coding style problem severity. The participants\nrated their concern for the design problem identified in the\ninspected code for each class. The participants rated their\nevaluation based on a 5-point Likert scale (1 means \u201c very low \u201d\nand 5 means \u201c very high \u201d). Table 9 shows the obtained results\ngrouped by Class (C), 5-point Likert scale levels (from 1 to 5),\nand the number of respondents. We report the average and\nthe mode of the perceived severity. Most of the respondents\nwho perceived a problem in the inspected classes considered\nit at least with a medium severity .\nTable 10 presents Spearman\u2019s \u03c1to test H2. We note that\ncorrelation is statistically significant for both CyC and CoC.\nTherefore, we can affirm that the complexity metrics showed\na poor but statistically significant negative correlation.\n6. Discussion\nThis section presents the discussions and key takeaways\nfrom the results of our study.\nRegarding RQ 1, the accuracy metrics and the IRA deliver\nan interesting take on early-career researcher proficiency in\ndetecting problematic classes. For instance, high Precision\nand low Recall mean developers fail to identify problematic\n\u0013\u0015\u0013\u0017\u0013\u0019\u0013\u001b\u0013\u0014\u0013\u0013\u0014\u0015\u0013\u0014\u0017\u0013\n\u0014 \u0015 \u0016 \u0017 \u0018\n8QGHUVWHQGDELOLW\\\n&R& &\\&Figure 5: Distribution of complexity metrics values by the perceived code\nunderstandability (RQ 2)\nclasses and overlook them. Identifying non-obvious, more\nsubtle issues likely requires more practice and experience.\nHence, industries should strengthen their internal training\nprograms to help early-career developers reach a common\nground needed by the specific industry. For instance, since\nthe level of agreement among the developers is quite vari-\nable in the cases presented, closer mentorship and regular\nsupervision are needed to develop a more homogenized un-\nderstanding of problematic classes.\nTherefore, team composition should mix early- and mid-\ncareer developers when assigning code-reviewing tasks to\nbalance their strengths and weaknesses. Finally, Workshops\nand hands-on coding sessions for life-long learning intro-\nduce some balance into performance metrics for precision\nand recall over time.\n1.The role of early-career developers .\nEarly-career developers should not be the only ones\nresponsible for code-reviewing tasks due to their\nscarce experience.\nConsidering RQ 2, it was evident that less complex classes\nwere deemed easy to understand, indicating that low CyC\nand CoC support the understandability of the code. However,\n8\n\nTable 7: Perceived Code Understandability (RQ 1)\nClass Perc. Understandability # respondent Mode\nC11-Very Hard 20\n32-Hard 54\n3-Neither Hard or Easy 76\n4-Easy 42\n5-Very Easy 8\nC21-Very Hard 48\n22-Hard 55\n3-Neither Hard or Easy 58\n4-Easy 28\n5-Very Easy 3\nC31-Very Hard 51\n22-Hard 49\n3-Neither Hard or Easy 58\n4-High 29\n5-Very Easy 7\nC41-Very Hard 27\n32-Hard 46\n3-Neither Hard or Easy 65\n4-Easy 40\n5-Very Easy 12\nC51-Very Hard 22\n42-Hard 35\n3-Neither Hard or Easy 67\n4-Easy 49\n5-Very Easy 23\nC61-Very Hard 8\n32-Hard 21\n3-Neither Hard or Easy 34\n4-Easy 72\n5-Very Easy 60\nC71-Very Hard 18\n42-Hard 35\n3-Neither Hard or Easy 61\n4-Easy 52\n5-Very Easy 29\nC81-Very Hard 7\n42-Hard 14\n3-Neither Hard or Easy 39\n4-Easy 50\n5-Very Easy 83\nC91-Very Hard 29\n42-Hard 29\n3-Neither Hard or Easy 38\n4-Easy 35\n5-Very Easy 66\nC101-Very Hard 10\n42-Hard 18\n3-Neither Hard or Easy 35\n4-Easy 52\n5-Very Easy 75\nC111-Very Hard 6\n42-Hard 10\n3-Neither Hard or Easy 31\n4-Easy 57\n5-Very Easy 88\nC121-Very Hard 6\n42-Hard 19\n3-Neither Hard or Easy 28\n4-Easy 51\n5-Very Easy 92\nTable 8: Code Understandability - Correlation (RQ 2)\nSpearman CyC CoC\n\u03c1 -0,3819 -0,3282\np-value <0.0001 <0.0001Table 9: Problem description and Perceived Severity (RQ 2)\nClassPerceived Described SeverityMode# % # % #\nC1 146 69 146 1001-Very High Severity 5\n32-High Severity 11\n3-Neither Low or High 25\n4-Low Severity 24\n5-Very Low Severity 16\nC2 159 75 159 1001-Very High Severity 7\n32-High Severity 29\n3-Neither Low or High 23\n4-Low Severity 21\n5-Very Low Severity 8\nC3 154 74 154 1001-Very High Severity 9\n32-High Severity 21\n3-Neither Low or High 35\n4-Low Severity 16\n5-Very Low Severity 10\nC4 127 60 127 1001-Very High Severity 8\n32-High Severity 17\n3-Neither Low or High 17\n4-Low Severity 21\n5-Very Low Severity 12\nC5 145 69 145 1001-Very High Severity 11\n32-High Severity 17\n3-Neither Low or High 21\n4-Low Severity 22\n5-Very Low Severity 15\nC6 81 38 81 1001-Very High Severity 4\n42-High Severity 5\n3-Neither Low or High 9\n4-Low Severity 11\n5-Very Low Severity 21\nC7 149 71 116 781-Very High Severity 9\n32-High Severity 10\n3-Neither Low or High 24\n4-Low Severity 24\n5-Very Low Severity 13\nC8 60 28 60 1001-Very High Severity 0\n42-High Severity 4\n3-Neither Low or High 8\n4-Low Severity 8\n5-Very Low Severity 17\nC9 96 46 75 781-Very High Severity 6\n42-High Severity 9\n3-Neither Low or High 11\n4-Low Severity 9\n5-Very Low Severity 20\nC10 39 19 39 1001-Very High Severity 1\n42-High Severity 4\n3-Neither Low or High 5\n4-Low Severity 3\n5-Very Low Severity 10\nC11 53 25 53 1001-Very High Severity 1\n52-High Severity 0\n3-Neither Low or High 5\n4-Low Severity 9\n5-Very Low Severity 16\nC12 89 42 55 621-Very High Severity 1\n42-High Severity 6\n3-Neither Low or High 10\n4-Low Severity 15\n5-Very Low Severity 20\nTable 10: Perceived Problem Severity - Correlation (RQ 3)\nSpearman CyC CoC\n\u03c1 -0.2665 -0.1686\np-value <0.0001 <0.0001\n9\n\n\u0013\u0015\u0013\u0017\u0013\u0019\u0013\u001b\u0013\u0014\u0013\u0013\u0014\u0015\u0013\u0014\u0017\u0013\n\u0014 \u0015 \u0016 \u0017 \u0018\n6HYHULW\\\n&R& &\\&Figure 6: Distribution of complexity metrics values by the perceived severity\nof the design problem - (RQ 3)\nif CyC or CoC was high, the opinion on understandability\nwas varied. This is a very interesting result and requires fur-\nther investigation. What is especially eye-opening is that per-\nceptions of understandability varied, with both complexities\nrated highly. Understandability seems to be somewhat more\ncorrelated with CoC. However, the difference in CyC was not\ndrastic. Developers showed greater consensus on CoC as a\ncomplexity measure, indicating it might be more useful than\nthe two. Prior results [9, 8, 23] indicated that the metrics\nthemselves do not indicate understandability and that the\ndifferent proposed metrics are not positively correlated [9].\n2.CyC an CoC as understandability indicator .\nBased on our findings, low complexity measures indi-\ncate good understandability, but having either CoC or\nCyC high makes understandability unpredictable.\nFinally, regarding RQ 3we found that increased complex-\nity heightened the perception of severity. However, there was\nsignificant variance. Early-career developers had a good un-\nderstanding of the code issues. When a class was identified\nas having a design problem, developers could also describe\nthe problem. This indicates that highlighting the issues con-\ntributing to complexity measures can help maintain high un-\nderstandability. However, understandability does not depend\non the type of problem. Therefore, developers should take\nminor design issues more seriously.\n3.CyC an CoC as severity indicator .\nBased on our findings, there is no evidence that CyC or\nCoC are indicators of early-career perceived severity.\n7. Threats to Validity\nIn this Section, we introduce the threats to validity and\ndiscuss the different tactics adopted to mitigate them. We\nfollowed the structure suggested by Yin [56], reporting con-\nstruct validity, internal validity, external validity, and relia-\nbility. Moreover, we will also discuss the different tacticsadopted to mitigate them.\nConstruct validity. Concerning the set of tasks, we con-\nsidered classes whose code complexity was measured by the\nsame tool that allows us to compute both complexities con-\nsidered in this work. We checked each question to avoid po-\ntential misunderstandings, negative questions, and threats.\nThe perceived priority of the design problem was collected\nby asking the participants to describe the problem they per-\nceived to understand if their perception is related to the iden-\ntified problem and not to other potential issues in the code.\nWe asked the participants to rate the severity of the prob-\nlem using a Likert scale to allow us to compare the responses\nbased on a homogeneous scale. To reduce this threat, we\nchecked the correctness of the identification both manually\nand using automated tools.\nInternal Validity. Considering the respondents, we se-\nlected junior developers with a maximum of 4 years of experi-\nence in programming skills to better focus on our goal. How-\never, we are aware that the results could be biased by selecting\nparticipants from a set of developers more deeply trained in\nthese tasks. We adopted a treatment set of classes to measure\nwhether using the same tool to measure CoC and CyC com-\nplexities was possible. We know that further studies with dif-\nferent analyzed classes, considering the missing groups, are\nneeded to confirm our results.\nMoreover, one class from one domain (e.g., accounting)\nmay be very understandable to someone with experience de-\nveloping software for that domain but not at all comprehen-\nsible to someone without experience. So, the two develop-\ners\u2019 answers would differ for the same class. Considering the\namount of code used in the study (12 units of code), acknowl-\nedging that it might be too small if the studied phenomenon\nis large (e.g., the architecture of a large software product). In\nour case, we reasoned that the studied phenomenon mani-\nfests within small pieces of code. We selected 12 classes that\ncontain the studied phenomena (see Table 1), which are ex-\namined by 216 developers. The fact that the same phenom-\nena were studied 216 times 12 gives us confidence that\u2014in\nour context\u2014the data set is large enough to yield representa-\ntive results.\nExternal validity. We considered only junior developers\nwith a maximum of four years of experience. We know de-\nvelopers with more experience might have a different percep-\ntion of code complexity and understandability due to their fa-\nmiliarity with more complex code. Therefore, our results can\nnot be generalized across the entire population of developers.\nReliability. Three experts checked the survey on empir-\nical studies. Moreover, it was ensured that the subjects of\nboth groups had similar backgrounds and knowledge regard-\ning code understandability and inspection.\n8. Conclusion\nWe designed and conducted a case study among 216 early-\ncareer developers. We asked them to manually inspect 12 Java\nclasses that exhibit different code complexity levels as Cogni-\n10\n\n",
    "is_processed": true,
    "process_error": null,
    "content_length": 44924,
    "local_pdf_path": "data/pdfs/Early Career Developers_ Perceptions of Code Understandability. A Study of Complexity Metrics_319de949.pdf"
  },
  "arxiv_5ae3dc8f03cd1cd85546b9bfd71272cf": {
    "title": "The Quantum Frontier of Software Engineering: A Systematic Mapping Study",
    "url": "http://arxiv.org/pdf/2305.19683v2",
    "source": "arxiv",
    "authors": [
      "Manuel De Stefano",
      "Fabiano Pecorelli",
      "Dario Di Nucci",
      "Fabio Palomba",
      "Andrea De Lucia"
    ],
    "published_date": "2023-05-31T09:26:10+00:00",
    "summary": "Context. Quantum computing is becoming a reality, and quantum software\nengineering (QSE) is emerging as a new discipline to enable developers to\ndesign and develop quantum programs.\n  Objective. This paper presents a systematic mapping study of the current\nstate of QSE research, aiming to identify the most investigated topics, the\ntypes and number of studies, the main reported results, and the most studied\nquantum computing tools/frameworks. Additionally, the study aims to explore the\nresearch community's interest in QSE, how it has evolved, and any prior\ncontributions to the discipline before its formal introduction through the\nTalavera Manifesto.\n  Method. We searched for relevant articles in several databases and applied\ninclusion and exclusion criteria to select the most relevant studies. After\nevaluating the quality of the selected resources, we extracted relevant data\nfrom the primary studies and analyzed them.\n  Results. We found that QSE research has primarily focused on softwa...",
    "categories": [
      "cs.SE"
    ],
    "entry_id": "http://arxiv.org/abs/2305.19683v2",
    "meta": {
      "content_type": "academic_paper",
      "is_curated": true,
      "source_quality": 8
    },
    "content_type": "academic_paper",
    "text": "The Quantum Frontier of Software Engineering:\nA Systematic Mapping Study\nManuel De Stefanoa, Fabiano Pecorellib, Dario Di Nuccia, Fabio Palombaa, Andrea De Luciaa\naSeSa Lab - University of Salerno, Italy\nbJheronimus Academy of Data Science - Eindhoven University of Technology, The Netherlands\nAbstract\nContext. Quantum computing is becoming a reality, and quantum software engineering (QSE) is emerg-\ning as a new discipline to enable developers to design and develop quantum programs. Objective. This\npaper presents a systematic mapping study of the current state of QSE research, aiming to identify the\nmost investigated topics, the types and number of studies, the main reported results, and the most studied\nquantum computing tools/frameworks. Additionally, the study aims to explore the research community\u2019s\ninterest in QSE, how it has evolved, and any prior contributions to the discipline before its formal introduc-\ntion through the Talavera Manifesto. Method. We searched for relevant articles in several databases and\napplied inclusion and exclusion criteria to select the most relevant studies. After evaluating the quality of\nthe selected resources, we extracted relevant data from the primary studies and analyzed them. Results.\nWe found that QSE research has primarily focused on software testing, with little attention given to other\ntopics, such as software engineering management. The most commonly studied technology for techniques\nand tools is Qiskit, although, in most studies, either multiple or none specific technologies were employed.\nThe researchers most interested in QSE are interconnected through direct collaborations, and several strong\ncollaboration clusters have been identified. Most articles in QSE have been published in non-thematic\nvenues, with a preference for conferences. Conclusions. The study\u2019s implications are providing a central-\nized source of information for researchers and practitioners in the field, facilitating knowledge transfer, and\ncontributing to the advancement and growth of QSE.\nKeywords: Quantum Computing; Quantum Software Engineering; Software Engineering for Quantum\nProgramming; Empirical Software Engineering; Systematic Mapping Study.\n1. Introduction\nQuantum computing will likely become the next concrete asset for researchers and practitioners. Ev-\nery developer can now access a quantum computer and use quantum computation to solve arbitrary,\ncomputationally-intensive problems [1, 2]. This result is possible because of a great effort made by major\nsoftware companies, like IBMandGoogle , which are currently investing hundreds of millions of dollars\nevery year to produce novel hardware and software technologies that can support the execution of quantum\nprograms, making a step further in democratizing quantum computing [3, 4, 5, 6, 7, 8].\nQuantum programming is promising in resolving problems in various fields, such as machine learning,\noptimization, cryptography, and chemistry. However, the development of large-scale quantum software is\nstill distant [9, 10, 11, 12]. To address this, researchers have proposed a new discipline, quantum software\nengineering (QSE), that extends classical software engineering into the quantum domain [13, 14, 15, 16].\n\u2217Corresponding author\nEmail addresses: madestefano@unisa.it (Manuel De Stefano), f.pecorelli@jads.nl (Fabiano Pecorelli),\nddinucci@unisa.it (Dario Di Nucci), fpalomba@unisa.it (Fabio Palomba), adelucia@unisa.it (Andrea De Lucia)\nPreprint submitted to Information and Software Technology June 2, 2023arXiv:2305.19683v2  [cs.SE]  1 Jun 2023\n\nThis discipline aims to enable developers to design and develop quantum programs with the same confidence\nas classical programs, providing them with all the methods and tools necessary [17].\nSince the publication of the Talavera Manifesto [14], which can be considered the pillar of quantum\nsoftware engineering, many studies have been published, proposing novel approaches, tools, and techniques.\nConsequently, several secondary studies have been published exploring various aspects of QSE, such as\noptimization [18, 19], industrial adoption issues [20], testing [21], and architecture [22], to put order among\nall the published studies, and steer further research. These previous studies, however, focused on specific\naspects of the discipline, like testing [21], and have failed to provide a comprehensive overview of the field.\nAs a result, significant research angles like the management and maintenance of quantum-based solutions\nhave been left largely unexplored. To fully understand the potential of this field, and maximize the benefits\nobtainable from the current evidence [23], a comprehensive synthesis of the latest research is essential.\nIn this paper, we propose a systematic mapping study on the current status of QSE research to fulfill this\ngap. This systematic mapping study aims to provide a broad and holistic overview of QSE, determine its\nachievements, and identify current research gaps. To this end, the study addresses several research questions\nabout QSE research aspects. In particular, our study aims to identify the most investigated topics in QSE,\nthe types and the number of proposed studies, the main reported results, and the most studied quantum\ncomputing tools/frameworks. Additionally, the study explores the research community\u2019s interest in QSE,\nhow it has evolved, and any prior contributions to the discipline before its formal introduction through the\nTalavera Manifesto [14]. Moreover, this study aims to understand the main researchers involved in the field,\ntheir research groups, their interactions, and their distribution concerning various SE topics. The study also\nintends to identify which venues will most likely publish QSE articles outside thematic workshops.\nThe results of our systematic mapping study can provide valuable insights into the development and\nevolutionoftheresearchcommunity, thetoolsandframeworksbeingstudied, andthedistributionofresearch\ntopics among different software engineering areas. Our final goal is also to facilitate knowledge transfer and\nprovide a centralized source of information for researchers and practitioners in the field, contributing to the\nadvancement and growth of quantum software engineering.\nThe remainder of the paper is structured as follows: in Section 2 related literature is discussed and\nanalyzed; Section 3 and Section 4 present the research method employed to conduct our study and the\nachieved results, which are then discussed in Section 5; in Section 6, then, final remarks and future research\ndirections are given.\n2. Related Work\nQuantum Software Engineering (QSE) has recently attracted increasing attention. Hence, several sec-\nondary studies were published, exploring different aspects of this discipline. This section compares this\nliterature with our secondary study, highlighting the differences and complementary points.\nYarkoniet al.[18] provided a literature review of quantum annealing (QA) technology and its applica-\ntions. The study aims to provide a centralized source of information on the applications of QA and identify\nthe advantages, limitations, and potential of the technology for both researchers and practitioners.\nShiet al.[19] published a study that reviews quantum software optimization techniques, focusing on the\nefficiency of quantum computing (QC) systems. The study argues that greater efficiency of QC systems can\nbe achieved by breaking the abstractions between layers in the quantum software stack.\nAwanet al.[20] published a study that aims to identify and prioritize the most critical challenges\nfacing the software industry in adopting quantum computing technology. The study implements a fuzzy\nanalytic hierarchy process (F-AHP) to evaluate and rank the identified challenges. The results show that the\ncritical barriers to quantum computing adoption are the lack of technical expertise, information accuracy,\norganizational interest in adopting the new process, and the lack of standards of secure communication.\nGarc\u00eca de la Barrera et al.[21] conducted a systematic mapping study on quantum software testing.\nThe research provides a thorough overview of the current state of the art in quantum software testing. It\nidentifiestwomajortrendsintestingtechniques: statisticalapproachesbasedonrepeatedmeasurementsand\nthe use of Hoare-like logic for reasoning about software correctness. Reversible circuit testing for quantum\nsoftware unitary testing is also mentioned by the authors, which is partially applicable to this domain.\n2\n\nAhmadet al.[22] published a secondary study that addresses the challenges of architecture-centric\nimplementation of quantum software systems. To achieve this, it explores the role of quantum software\narchitectures(QSA)insupportingquantumsoftwaresystems\u2019design, development, andmaintenancephases.\nThe research focuses on two main aspects: (i) the architectural process with its architecting activities and\n(ii) the human roles that can leverage available tools to automate and customize the architecture-centric\nimplementation of quantum software. By examining these aspects, the study aims to provide insights into\nthe principles of quantum mechanics and software engineering practices and how they can be integrated into\nthe design and development of quantum software systems.\nReasoning on the current state of the art, we point out that previous systematic literature reviews and\nmapping studies have focused on specific themes, e.g., testing or architectures, rather than providing a\ncomprehensive view of the research conducted on quantum software engineering. As a consequence, there\nis still little knowledge on the set of topics more frequently investigated by quantum software engineering\nresearchers, other than of the main results achieved and how these can drive future research. The findings of\nour study can provide valuable insights into the development and evolution of the QSE research community,\nthe tools and frameworks being studied, and the distribution of research topics among different software\nengineering areas. In addition, we also identify a gap of knowledge with respect to the venues and research\ngroups that are currently investigating quantum software engineering aspects: these pieces of information\nare crucial for newcomers, e.g., fresh Ph.D. students, who would like to embrace the quantum software\nengineering field, other than more senior researchers interested in understanding the dynamics behind the\nquantum software engineering research community.\n3. Research Method\nThegoalof our study was to produce an organic and holistic view of the scientific literature in the field\nof quantum software engineering, with the purposeof understanding what researchers\u2019 efforts have focused\non, what needs further investigation, what has been achieved so far, and what the research gaps are. The\nperspective is of both researchers and practitioners. The former are interested in having a unique source of\ninformation providing a comprehensive view of the current research in quantum software engineering. The\nlatter are interested in understanding the current trends and technologies researchers produce that might\nbe potentially transferred in practice. Our systematic mapping study has been conducted following the\nguidelines in [24, 25, 26]. In terms of reporting, we followed the ACM/SIGSOFT Empirical Standards1\n3.1. Research Questions\nWe aimed to answer various research questions to achieve a holistic view of the state of quantum software\nengineering. To understand and identify possible gaps in QSE research, especially in terms of coverage of\nvarious aspects of SE and the degree of maturity achieved in these areas, we asked:\n/searcRQ 1Current research trends in QSE\nRQ 1.1How many and what kind of studies have been proposed in QSE?\nRQ 1.2Which areas of software engineering have received the most attention in QSE?\nRQ 1.3Which types of studies are most commonly proposed in the different areas of software engineering\nwithin QSE?\nAnswering RQ 1.1will allow us to assess the degree of maturity of the research: a prevalence of philosoph-\nical papers depicts a different level of maturity than that of evaluation research papers. The answer to RQ 1.2\nwill allow an understanding of possible gray areas or unexplored areas which should need further attention\n1Available at https://github.com/acmsigsoft/EmpiricalStandards . Given the nature of our study and the currently\navailable standards, we followed the \u201cGeneral Standard\u201d and\u201cSystematicReviews\u201d definitions and guidelines.\n3\n\nby the research community. By combining the first two insights, answering RQ 1.3will allow assessing the\nmaturity of research production in each area and evaluating the degree of development of the specific area.\nTo understand the research progresses in QSE and identify possible research opportunities, we asked:\n/searcRQ 2Achieved results and studied technologies\nRQ 2.1What are the main results reported?\nRQ 2.2Which quantum computing tools/frameworks are most being studied?\nAnswering the first question will allow us to understand the main results reported in the literature,\nsupplyingapictureofwhatisbeingstudied, whathasbeendiscovered, andwhatisstillunknown. Answering\nthe second question will provide information on the types of quantum computing tools/frameworks being\nstudied to better understand the maturity of different implementations. This information can help us to\nunderstand the current state of quantum computing and its research landscape.\nThe Talavera Manifesto was introduced in 2020, yet quantum software has been discussed since before.\nThe following research questions are posed to analyze the interest in this new discipline:\n/searcRQ 3Evolution of QSE\nRQ 3.1Are there contributions to QSE before the discipline was even born?\nRQ 3.2How has the research community\u2019s interest in this new discipline evolved?\nAnswering these questions can provide valuable insights into the historical and evolutionary context of\nQSE, which can be beneficial in several ways. First, understanding the contributions to QSE before the\ndiscipline was even born can help researchers appreciate the foundational ideas and concepts that underlie\nthe field. Second, examining how the research community\u2019s interest in QSE has evolved over time can\nprovide insights into the current state of the field and its trajectory. By understanding the factors that have\ndriven the growth and development of QSE, researchers can identify areas that require further investment\nand attention to continue advancing the field.\nTo understand who the leading researchers involved in this discipline are and how they and their research\ngroups interact, the following research questions are posed:\n/searcRQ 4Authors and collaborations in QSE\nRQ 4.1Who are the researchers most interested in QSE? How are they interconnected?\nRQ 4.2Given the various SE topics, how are these researchers distributed?\nAnswering these questions can be valuable because it can provide a comprehensive understanding of the\ncurrent landscape of QSE research and the key players in the field. Knowing who the leading researchers are\ncan help identify the most influential and significant work in QSE. Understanding how these researchers and\ntheir groups are interconnected can provide insight into how ideas and research are shared and disseminated\nwithin the discipline. Understanding the relationships and interactions within the QSE research community\ncan also help identify potential barriers or challenges to collaboration and ways to overcome them.\nTo better understand whether research in QSE is emerging from niche topics and to understand which\nvenues are most attractive, the following research question is posed:\n/searcRQ 5Publication trends in QSE\nRQ 5.1Which venues will most likely publish QSE articles outside thematic venues?\nAnswering this question can be valuable because it can provide insight into the reach and impact of QSE\nresearch beyond specialized workshops and conferences. Knowing which venues are most likely to publish\n4\n\nTable 1: The number of studies per database.\nDatabase Search Results\nACM 1,376\nIEEE 1,991\nSCOPUS 998\nWeb of Science 1,002\nQSE articles can help identify the most influential and visible outlets for this type of research and inform\nstrategies for publishing and disseminating work in QSE. Understanding which venues are most attractive\nto QSE researchers can also help identify trends and patterns in the field and inform decisions about where\nto submit work for publication. In general, understanding the venues that are most likely to publish QSE\narticlescanhelptoestablishthereachandimpactofthistypeofresearchandinformstrategiesforpublishing\nand disseminating work in the field. It must be noted that for tematic venues , we intend venues explicitly\nfocused on quantum software engineering or quantum software development.\n3.2. Search Criteria\nGuidelines [24, 25, 26]suggest that only the variables of population and intervention are necessary to\nconduct our mapping study. Comparison and outcome are unnecessary for a systematic mapping study\nbecause it is not a meta-analysis, randomized controlled trial, or systematic review [25, 26]. Instead, it is a\npreliminarystudythatprovidesanoverviewofthecurrentstateofresearchinaparticulararea. Asystematic\nmapping study aims to identify gaps in the existing literature and provide a general understanding of the\ntopics, the methods, and the results in a specific field [25]. Therefore, the emphasis is on identifying and\ncategorizing the existing literature rather than comparing or determining outcomes.\nWe developed the search strings utilizing these two variables (i.e., population and intervention) as the\nprimary keywords to narrow the scope of our research. In software engineering, the term population (P) may\nrefer to various subgroups within the field, such as specific software engineering roles, categories of software\nengineers, application areas, or industry groups. These populations may have unique characteristics or\nchallenges relevant to the research being conducted [24]. In particular, the population in our context refers\nto papers focusing on quantum software engineering. In the context of software engineering, the term\nintervention (I) refers to any method, tool, technology, or procedure that is implemented or used in the\ndevelopment, maintenance, or optimization of software systems [24]. In our mapping study, we did not limit\nour research to a single or specific intervention within the field of quantum software engineering. Instead,\nwe sought to broadly examine the various interventions implemented or proposed within this field. This\ndecision allowed us to gain a more comprehensive understanding of the current state of research in quantum\nsoftware engineering and identify potential trends or gaps in the existing literature. By aggregating the\nkeywords from the P and I and the research questions, we formulated the following research string:\n(\"quantum\" AND \"software\" AND (\"engineering\" OR \"development\" OR \"requirements\" OR \"quality\"\nOR \"design*\" OR \"test*\" OR \"maintenance\" OR \"management\"))\nThe guidelines [24, 25, 26]suggest that employing IEEE and ACM, in addition to two indexing databases,\nwould be sufficient for our mapping study. Therefore, we selected ACM Digital Library, IEEE Xplore,\nSCOPUS, and Web of Science. We applied our search query to each database, examining all fields. Table 1\ndepicts the number of studies obtained by applying the query to each database.\n3.3. Study Selection and Quality Assessment\nThe relevant papers were selected considering the title, abstract, and full-text reading. The inclusion\nand exclusion criteria were specified and discussed among all the authors [26]. We applied a think-aloud\n5\n\nIEEE\n1991 Resources\nACM\n1376 Resources\nScopus\n998 Resources\nWoS\n1002 ResourcesResearch\nQuery\n5367\nResourcesDuplicate\nRemoval\n2163\nRemoved\nResources3204\nResourcesInclusion/\nExclusion\nCriteria\n3128\nRemoved\nResources76\n Resources89\n ResourcesQuality\nAssessment\n2\nRemoved\nResources87 \nFinal Selected\nResourcesSnowballing\n13\nAdded\nResourcesFigure 1: Representation of the study selection process. From the initial set of 3,204 non-duplicated primary studies, 3,128\narticles were removed by applying the criteria on title and abstract initially, and on the full text afterward. By applying the\nsnowballing, 13 articles were added (already filtered with inclusion and exclusion criteria). Finally, two articles were removed\nby applying the quality assessment criteria. Hence, the final set of included primary studies counts 87 articles.\npractice describing the process of inclusion/exclusion to one study to align understanding. Based on this\ndiscussion, the level of agreement was determined, and the criteria were updated accordingly. After this,\nthe final criteria were applied to the studies by the first author. The third author then reviewed the whole\nselection process. Articles satisfying at least one of the exclusion criteria listed in Table 2 were excluded.\nConsequently, articles that were not already excluded by meeting an exclusion criterion and satisfied at least\none of the inclusion criteria listed in Table 2 were included.\nApplying the whole approach resulted in a total of 76 selected resources. As complementary research\napproach [26, 27], we performed both forward and backward snowballing \u2014i.e., the selection of publications\nthat cite ( forward snowballing ), or are cited ( backward snowballing ) by each selected study\u2014 until no other\nunseen publication could be added, to guarantee the maximum coverage possible. After filtering them with\nthe same selection criteria (Table 2), a total of 13 resources were added by the end of this procedure.\nThe final step of the selection phase consists of assessing the quality of the extracted resources to limit\nthe risk of bias and incorrect results [24, 25, 26]. Despite Kitchenam et al.[24] do not require systematic\nmapping studies to conduct a critical appraisal procedure, Petersen et al.[26] recommend conducting a\nquality assessment but not pose too high requirements, to not exclude resources that might be relevant in\nthe scope of a systematic mapping study. Hence, we developed the following quality assessment strategy.\nWe defined a checklist that comprises the following questions:\n1. Is the motivation of the paper clearly and explicitly reported?\n2. Is the main outcome of the paper clearly and explicitly reported?\nThe following scores are assigned to each of the above questions. 1 if the answer to the question is Yes,\nexplicitly , 0.5 if the answer is Yes, but not explicitly reported , 0 if the answer is Not Reported . The score\nof both questions is then summed up. A primary study that achieves a minimum score of 1 is considered\nacceptable. Applying this quality assessment procedure led to the exclusion of two articles. To conclude,\napplying the whole procedure resulted in the acceptance of 87 primary studies.\n6\n\nTable 2: Study selection criteria applied in the study selection phase.\nStudy Selection Criteria\nExclusion Criteria Inclusion Criteria\nArticle not peer-reviewed. Peer-reviewed article in English published\nnot earlier than 2018.\nArticle not in English. Article discussing or proposing SE tech-\nniquesorpracticesappliedtoquantumsoft-\nware development or the quantum software\nlifecycle.\nArticle published before 2018. Article discussing an empirical investiga-\ntion on some socio-technical aspects of soft-\nware engineering applied to quantum soft-\nware development.\nConference articles extended in journals.\nConference summary.\nSecondary or tertiary study on the matter.\nArticle not already selected.\n3.4. Data Collection and Analysis\nWe created an extraction form shown in Table 3 to gather information from the primary studies. This\ntemplate includes various data items and their corresponding values. It is possible to note that the rationale\nbehind the choice of this gathered information is pretty straightforward: each of the extracted data items\ncorresponds to the phenomenon each research question aims to solve. Table 3 clearly explains this in the\ndescription column. The process of extracting this data involved the first author collecting the information\nand the third author reviewing it for accuracy by comparing it to the original statements in each paper; this\nwas done to mitigate the risk of subjectivity, as depicted in the guidelines [24, 25, 26].\nPetersen et al.[26] recommend using topic-independent classifications as much as possible. This clas-\nsification was conducted for the SWEBOK Knowledge Areas [28] (depicted in Table 4), the research type\n(depicted in Table 5) [29, 25, 26], and the venue [26]. Nonetheless, for the result type, a topic-specific\nclassification was needed. Hence, as suggested by Petersen et al.[26], we used open coding [30] to organize\nthe articles into categories and then counted the number of articles in each category. We labeled or assigned\nkeywords to concepts found in the text during the open coding process, resulting in several open codes,\nwhich were then organized into a larger structure. In this process, we merged or renamed some of the codes\nrepresenting categories [30]. Then, we used these categories to classify the papers. We applied this process\nto the abstracts of the articles. However, if the abstracts were not clear enough, we considered other parts\nof the paper (e.g., introduction and conclusion). The resulting classification is depicted in Table 6.\nWe employed descriptive statistics tools to analyze the gathered data, as suggested by the guidelines,\n[24, 25, 26]. In particular, we relied on tables (with bibliographical references) to report absolute frequencies\nof the categorical variables (e.g., the SWEBOK Knowledge Area of interest of each resource) or bar charts\n(e.g., absolute number of papers per year). To represent co-occurrences of categorical variables, we employed\nheatmaps and pivot tables depicted as heatmaps (e.g., Knowledge Areas by Research Types). To show the\nevolution over time of the number of published resources, we employed line graphs (e.g., cumulative number\nof resources per publication year).\n7\n\nTable 3: Essential data elements collected from the resources, including study ID, article title, research type, research method,\nSWEBOK focus area, result type, main tool/framework, publication year, authors, and venue/venue type.\nData Item Description RQ\nStudy ID Integer\nArticle Title Name of the article.\nResearch Type Type of research as reported in the guidelines [25, 26]. A detailed\ndescription is given in Table 5RQ1.2, RQ 1.3\nSWEBOK KA SWEBOK Knowledge Area [28] as representative of a SE topic.\nA detailed description is given in Table 4RQ1.1, RQ 1.3\nResult Type Type of result achieved by the article. Classification depicted in\nTable 6.RQ2.1, RQ 2.2\nTool/Framework Main quantum tool or framework that was the object of study in\nthe article.RQ2.2\nYear Publication year of the article. RQ 3.1, RQ 3.2\nAuthors List of authors of the article. RQ 4.1, RQ 4.2\nVenue Venue of publication of the article. RQ 5.1\nVenue Type Typeofthepublicationvenue,asdepictedintheguidelines(Jour-\nnal, Conference, Book, Magazine) [26].RQ5.1\n3.5. Threats to Validity\nThe following discusses potential threats and limitations to the study\u2019s validity.\nDescriptive Validity. Theextenttowhichobservationsareaccuratelyandobjectivelydescribedisdescriptive\nvalidity. Threats to descriptive validity are prevalent in qualitative and quantitative studies. As reported\nby the guidelines [24, 25, 26], a data collection form has been designed to support data recording to reduce\nthis threat. As with the primary studies, the form objectified the data extraction process and allowed it to\nbe revisited regularly. Moreover, as depicted by the guidelines [26], not only we extracted the research type\nand method (which were also fundamental for answering our research questions), but we also mainly applied\ntopic-independent classifications. For topic-specific classification, i.e., for the main results of the primary\nstudies, we applied open coding [30], as the guidelines recommend [26]. As a result, this threat is considered\nto be under control.\nTheoretical Validity. The ability to capture what we intend to capture determines theoretical validity. Fur-\nthermore, confounding factors such as biases and subject selection play a significant role. In our case, this\nrefers to the study identification (or sampling) and the data extraction and classification.\nAs Wohlin et al.[27] pointed out, the selection of the studies could have threatened the validity of the\nstudy. To mitigate this risk, we supplemented the search with backward and forward snowball sampling\n[31] of all studies included by full-text reading. In addition, to increase the reliability of the inclusion and\nexclusion criteria, we applied the think-aloud protocol to the criteria defined and discussed among all the\nauthors. Then the first author conducted the selection process that was reviewed by the third afterward.\n8\n\nTable 4: SWEBOK Knowledge Areas as described in literature [28]\nKnowledge Area Description\nSoftware Requirements The Software Requirements Knowledge Area deals with gathering, analyzing, specify-\ning, and validating the requirements of a software product. These activities are crucial\nfor the success of software engineering projects and ensure that the product meets the\nneeds and constraints of the real-world problems it is intended to solve.\nSoftware Design The Software Design KA involves defining a software system\u2019s architecture, compo-\nnents, and behavior and creating a detailed plan for its construction based on soft-\nware requirements analysis. The resulting software design provides a comprehensive\nblueprint for the software\u2019s construction.\nSoftware Construction TheSoftwareConstructionKnowledgeAreainvolvesdetailedsoftwarecreationthrough\ndesign, coding, testing, debugging, and verification to satisfy requirements and design\nconstraints. It covers software construction fundamentals, management, technologies,\npractical considerations, and tools.\nSoftware Testing The Software Testing Knowledge Area involves evaluating and improving software\nquality by identifying defects through dynamic verification against expected behavior\non a finite set of test cases. It covers software testing fundamentals, techniques, user\ninterface testing and evaluation, test-related measures, and practical considerations.\nSoftware Maintenance TheSoftwareMaintenanceKnowledgeAreacoversenhancing, adapting, andcorrecting\nexisting software through perfective, adaptive, and corrective maintenance. It includes\nmaintenance fundamentals such as categories and costs, key technical and management\nissues, cost estimation, and measurement. It also covers the maintenance process\nof software maintenance techniques such as program comprehension, re-engineering,\nreverse engineering, refactoring, software retirement, disaster recovery techniques, and\nmaintenance tools.\nSoftware Configuration Management The Software Configuration Management Knowledge Area deals with identifying and\ncontrolling the configuration of software systems at different points in time and main-\ntaining the integrity and traceability of the configuration throughout the software life\ncycle. It includes managing the SCM process, software configuration identification,\ncontrol, status accounting and auditing, software release management and delivery,\nand software configuration management tools.\nSoftware Engineering Management The Software Engineering Management Knowledge Area involves planning, coordinat-\ning, measuring, reporting, and controlling software projects and programs to ensure\nsystematic, disciplined, and quantified development and maintenance. It covers initi-\nation and scope definition, software project planning including process planning, ef-\nfort estimation, risk analysis, and quality planning, software project enactments such\nas measuring, reporting, controlling, acquisition, and supplier contract management,\nproduct acceptance, review and analysis of project performance, project closure, and\nsoftware management tools.\nSoftware Engineering Process The Software Engineering Process Knowledge Area deals with defining, implementing,\nassessing, measuring, managing, and improving software life cycle processes. It cov-\ners process implementation and change, process definition, software life cycle models\nand processes, process adaptation, and process automation. It also includes process\nassessment models and methods, measurement of software processes and products,\nmeasurement techniques, quality of measurement results, and software process tools.\nSoftware Engineering Models and Methods This KA covers modeling principles, types, and analysis for correctness, completeness,\nconsistency, quality, and tradeoffs. It also covers software development methods like\nheuristic, formal, prototyping, and agile, but specific methods for particular life cycle\nstages are covered elsewhere.\nSoftware Quality Software quality is an important aspect of software development and is covered in\nvarious SWEBOK V3 KAs. The Software Quality KA covers software quality fun-\ndamentals, quality management processes, and practical considerations such as defect\ncharacterization and measurement, as well as software quality tools.\nSoftware Engineering Professional Practice Software engineering professional practice involves the professional and ethical practice\nofsoftwareengineering, includingprofessionalism, codesofethics, groupdynamics, and\ncommunicationskills. TheSoftwareEngineeringProfessionalPracticeKAcoverstopics\nsuch as professional conduct, software engineering standards, legal issues, working in\nteams, interacting with stakeholders, and dealing with multicultural environments.\n9\n\nTable 5: Research type facet as depicted in literature [25, 26, 29]\nCategory Description\nValidation Research Methods examined are unique and have not yet been used in practice. Experiments,\nor laboratory work, are an example.\nEvaluation Research Techniques are put into practice, and their effectiveness is assessed. That is, it is\ndemonstrated how the technique is applied in practice (solution implementation) and\nwhat the consequences of the application are in terms of benefits and drawbacks (im-\nplementation evaluation). This also includes identifying industry problems.\nSolution Proposal A problem solution is proposed; the solution can be either novel or a significant ex-\ntension of an existing technique. A small example or a good line of argumentation\ndemonstrates the potential benefits and applicability of the solution.\nPhilosophical Paper This kind of paper proposes a new way of viewing existing things by organizing the\nfield into a taxonomy or conceptual framework.\nOpinion Paper This kind of paper expresses someone\u2019s personal opinion on whether a particular tech-\nnique is good or bad, or how things should be done. They make no use of related work\nor research methodologies.\nExperience Paper This kind of paper is written to describe the practical details of what was done and\nhow it was accomplished, based on the personal experience of the author.\nTable 6: Classification of the result types.\nResult Type Description\nEmpirical These results generally, but not exclusively, come out from an empirical study. The\nresult is not directly exploitable but sheds light on a phenomenon. This kind of re-\nsult might come from both Validation and Evaluation research and from Experience,\nOpinion, and Philosophical papers.\nTechnique This result comes from a technique to solve a particular issue. The technique is vali-\ndated through an empirical study.\nTool This result has the same characteristics of a technique but is released as an available\ntool.\nDataset This result is a collection of useful data or similar. It can be exploited as a reference\nor for empirical studies.\nGuidelines This type of result is a collection of suggestions for a particular scenario, e.g., for\ndeveloping a cloud-based quantum hybrid application.\nCatalog Similar to a dataset, but more abstract, it is a collection of useful references (e.g., data\nencoding patterns).\nPosition This result concerns publications that provide no explicit result but formulate a posi-\ntion or opinion, such as philosophical papers.\nResearcher bias is a threat regarding data extraction and classification. Following the guidelines [24, 25,\n26], the third author assessed all extractions made by the first author to mitigate this threat. Nonetheless,\nsince this step involves human judgment, the threat cannot be entirely excluded.\n10\n\n",
    "is_processed": true,
    "process_error": null,
    "content_length": 36667,
    "local_pdf_path": "data/pdfs/The Quantum Frontier of Software Engineering_ A Systematic Mapping Study_d71272cf.pdf"
  },
  "arxiv_db5c231566e784fceee6b127318b0952": {
    "title": "Evaluation of team dynamic in Norwegian projects for IT students",
    "url": "http://arxiv.org/pdf/1808.05473v1",
    "source": "arxiv",
    "authors": [
      "Salah Uddin Ahmed",
      "Ingrid Sundb\u00f8",
      "Jon Kvisli",
      "Jon Atle Gulla",
      "Letizia Jaccheri",
      "Anh Nguyen-Duc"
    ],
    "published_date": "2018-08-14T21:34:05+00:00",
    "summary": "The need for teaching realistic software development in project courses has\nincreased in a global scale. It has always been challenges in cooperating\nfast-changing software technologies, development methodologies and teamwork.\nMoreover, such project courses need to be designed in the connection to\nexisting theoretical courses. We performed a large-scale research on student\nperformance in Software Engineering projects in Norwegian universities. This\npaper investigates four aspects of team dynamics, which are team reflection,\nleadership, decision making and task assignment in order to improve student\nlearning. Data was collected from student projects in 4 years at two\nuniversities. We found that some leader's characteristics are perceived\ndifferently for female and male leaders, including the perception of leaders as\nskilful workers or visionaries. Leadership is still a challenging aspect to\nteach, and assigned leadership is probably not the best way to learn. Students\nis are performing ...",
    "categories": [
      "cs.CY",
      "cs.SE"
    ],
    "entry_id": "http://arxiv.org/abs/1808.05473v1",
    "meta": {
      "content_type": "academic_paper",
      "is_curated": true,
      "source_quality": 8
    },
    "content_type": "academic_paper",
    "text": "This paper was presented at the NIK 200x conference. For more information see http://www.nik.no/ Evaluation of team dynamic in Norwegian projects for IT students Salah Uddin Ahmeda, Ingrid Sundb\u00f8a, Jon Kvislia, Jon Atle Gullab, Letizia Jaccherib , Anh Nguyen-Duca a University of South-eastern Norway, b Norwegian University of Science and Technology Abstract The need for teaching realistic software development in project courses has increased in a global scale. It has always been challenges in cooperating fast-changing software technologies, development methodologies and teamwork. Moreover, such project courses need to be designed in the connection to existing theoretical courses. We performed a large-scale research on student performance in Software Engineering projects in Norwegian universities. This paper investigates four aspects of team dynamics, which are team reflection, leadership, decision making and task assignment in order to improve student learning. Data was collected from student projects in 4 years at two universities. We found that some leader\u2019s characteristics are perceived differently for female and male leaders, including the perception of leaders as skillful workers or visionaries. Leadership is still a challenging aspect to teach, and assigned leadership is probably not the best way to learn. Students is are performing well in task review, however, needs support while performing task assignment. The result also suggests that task management to be done in more fine-grained levels. It is also important to maintain an open and active discussion to facilitate effective group decision makings 1. Introduction Even today there is little consensus about what a software engineering project course should cover, most academic programs have at least one such course. Some project courses cover detailed aspects, e.g. programming, usability and security issues, analysis, architecture, design or work products [1]. The main goal of such courses is to have students understand the complexity of software development, have some real-life experience, and learn to work in a team [2]. The projects should be \u201creal\u201d in every aspect as they entail the development of an application desired by a real world customer. As in industry, applications are developed by a small, collaborative team which needs to communicate with the customer, coordinate its activity, attend to internal decision-making, and be sensitive to delivering value [4].   Project courses complements theoretical lectures in the way that students can integrate and consolidated theory and skills through the use on project work [3]. To achieve these in academic context, students are expected to learn both technology-related knowledge and soft skills. For students, the soft skills acquired through a capstone course are perhaps one of the greatest rewards of this academic experience. These include problem solving, communication, and teamwork skills which are becoming essential for working in the industry [5]. Team dynamic is a critical component of working in small groups, yet it often goes unnoticed in the context of software engineering education. Team dynamic has been long recognized as an important success factor in teamwork. Team dynamics describes the effects of these roles and behaviors on other group members, and on the group as a whole [6]. There has been extensive body knowledge on different aspects of group dynamics, such as task interaction, relationship interaction, decision making, conflict management and group performance [7].  \n\nThis research reports our experience with student team dynamics in capstone project courses at Norwegian University of Science and Technology (NTNU) and University College of Southeast Norway (USN). In both universities, we designed semester-long courses where students work with actual customers from industry. In the end of the courses, they need to deliver a prototype/ product for the customers, present the result and submit a project report. Learning to work in team is a high-priority learning objective in these courses. From 2015, we started to collect data from students with the aim at improving the courses. The data were collected from course responsible, student assistants and students in various instruments, such as questionnaires, interviews, reflection reports and workshops. In this research, we investigated students\u2019 perception on team dynamics and their concerns with four aspects, teamwork, decision-making, leadership, and task assignment. Our research questions are: RQ1: How do students perceive team dynamics in the end of their capstone projects? RQ2: What are challenges regarding to team dynamics in such contexts? There is a large body of knowledge on issues and challenges pertaining to team project courses in computing education [3,8,9,10,11] and problem- and project-based learning in general [12,13]. With the focus on team dynamics, the study contributes to the current understanding about capstone projects in Software Engineering and particularly in the context of Norwegian education. We combined both quantitative data (for answering RQ1) and qualitative data (for answering RQ2). This is one of the first studies in Norway that adopts a mixed research method to study team dynamics in Software Engineering projects. The quantitative results from two universities can be used by other Norwegian universities that share the same context, to benchmark about student activity. The results also have direct implications for course design, by suggesting a better organizing and lecturing task assignment, leadership and decision making practices. The paper is organized as below. Section 2 presents related work. In section 3 we present our research methodology. Section 4 describes the settings of the course as it was conducted in the two universities. In section 5 we present the results.  Section 5.1 presents the result of the survey while 5.2 presents the qualitative result addressing RQ2. Section 6 discusses and concludes the article. 2. Related work We present several research about team dynamics aspects, such as team reflection, task management, decision making and team leadership as a foundation for our research. Team reflection is defined as \u201cthe extent to which team members collectively reflect upon the team\u2019s objectives, strategies and processes\u201d [17]. Team reflection is achieved when the team members ask questions, review solutions, challenge a solution, criticize a decision, be open for alternatives and suggestions. Reflection is often done via retrospective meetings in Scrum teams. In our courses, we highlight the role of retrospective meetings as a part of course evaluation.    On student projects, task management involves two of the most common problems. Started tasks remained uncompleted, and tasks were planned in a vague manner [5].  Task assignment is an important task in the team. Igaki et. el describe the inequality of task assignment in a scrum student team as a challenge that makes the project assessment difficult [19]. Team effectiveness depends fundamentally upon how well team members can coordinate their actions. The factors that complicate task effort estimation can also complicate planning concrete tasks, and if tasks are not concrete, they are also more \n\ndifficult to complete. Tasks remaining open may also indicate the lack of regular effort invested in the project. We have often seen that some students or even some teams increase their weekly effort to the project only closer to the end of the phases or the end of the project, if ever.  Most of the research conducted prior to 1990s distinguished between two approaches to leadership: task-oriented style, defined as a concern with accomplishing assigned tasks by organizing task-relevant activities, and interpersonally oriented style, defined as a concern with maintaining interpersonal relationships by tending to others\u2019 morale and welfare [20]. Compared to industrial placement the learning in a capstone project is higher, as the students can get involved in more phases and have greater roles than in an industrial placement.  Even though it might seem to be a bit hard for a leader of the capstone project to get his/her team motivated when the expectations and effort varies widely in a student team, the leadership position is still rewarding. Vanhanen, et al. report that students working in the managerial roles on the average, learned quite a lot about software engineering topics compared to the developers who learned moderately [5].  Participative leadership was positively associated with the process of team reflection for highly functional heterogeneous teams [18]. Heterogeneous team is a team where the members have different levels of skills, knowledge and abilities. However in case of a homogeneous team where the members have similar levels of background knowledge and skills, directive leadership instead of participative is desired for invoking team reflection. One important role for the participative leader in heterogeneous teams is to help team members translate the advantages of heterogeneity, such as the variety of professional backgrounds, knowledge, skills, and abilities, into significant processes of questioning, reviewing, and exploring [17].  In homogenous teams, because of the similarity of the members questioning, reviewing and exploring does not happen naturally, therefore, a directive leader can introduce them by enforcing.   3. Research methodology Research design was conducted in 2015 for research-informed teaching approaches in customer driven project courses. We collected various data about (1) leadership, (2) female participation in projects (3) team dynamics. The study occurs firstly in the context of course TDT4290 Customer Driven Project at NTNU. The course has been taught since 2011, in which students in their fourth year need to develop a software product/ service for a real customer. The second course is PRO1000B, which is taught for 1st year students at University of Southeast Norway (USN). Students also work for a real customer in making a prototype demonstrating their business ideas.  The data collection periods was done from Aug 2015 to Mar 2018. Various instruments were used to collect data about how teams perform during their projects, including project plans, final reports, supervision meeting notes, interviews with team leaders, and team reflection survey. In this study, we used two main instruments that reflect team dynamics, which are team reflection survey and final reports.  1) We designed the team reflection survey to collect team\u2019s perception on their own team dynamic. The survey used a five-point Likert scale to collect leaders and team member\u2019s opinions on (1) their own performance, (2) collective decision making, (3) team leadership and (4) task management practices. \n\n2) Final project report. Each team delivered a 150-200 pages project report describing project planning and management, product requirement and architecture, testing and delivery. Especially, a final part of the report consisted of team reflection on project mandate, teamwork and supervision. Table 1: Project course setting Course Year No. Groups Student background TDT4290 2015 12 4th year students from Information Technology, Computer Science, Erasmus students, \u2026 TDT4290 2016 13 TDT4290 2017 14 PRO1000B 2018 11 1st year students from IT, Marketing, etc  We provide a statistic descriptive of feedbacks from 36 students groups ( total 163 students, N=163). The survey includes 18 questions with a 5-point Likert scale (strongly agree - strongly disagree). Each question has a N/A (Not applicable) option if students do not experience the asked situations. For each group we take median values of all group members to represent for the group dynamics. Then we describes the answers of group feedbacks using boxplots. We also performed two-tail t-test to see if there is a different perception among students who belongs to categories of different universities, study year, and leader\u2019s genders.   While the survey provides an overall assessment on team performance, they do not provide details on area of improvements for students. We complemented for this gap by investigating student reflection reports. We performed a tailored thematic analysis [14], a qualitative approach for analyzing data from interview transcripts, observation notes and documents. We extracted text from student reports about team dynamics, especially about team decision making, leadership and task management. The texts are labelled and put into either of three investigated category. It is noted that not all of the groups report on these aspects of team dynamics, hence we do not do a cross-team comparison. In the end, a list of possible challenges were created as a thematic map.  4. Course setting The course was designed in a similar manner, including five elements (1) Customer, Team assignment, (3) Grading, (4) Supervision and (5) Established Software development paradigm. In both of the courses, we invited developers, managers, entrepreneurs from companies and research institutes to be customers. They often have some ideas or ongoing project that needs some research and development tasks. During the projects, each customer actively participates in the requirements definition work as well as monitors the project progress. The customer must prune the scope of the project to fit to the number of working hours students can spend on the course.  Students are assigned in project groups of 6-8 students. At USN, we adopted self-selected team approach, which allow students to have more control over project development.  At NTNU, we adopted both random assignment and instructed selection. Random assignment makes groups where the members generally do not know each other beforehand. The project work will be graded on the basis of the quality of the project report, the functioning prototype of the system, and the presentation delivered at the end of the course.  The team dynamics will have an impact on the final grade.  \n\nEach team is assigned a supervisor, who will assist the team throughout the courses. The supervisor can help with pedagogical concerns, facilities for project execution, concerns with team and customers and probably technical issues. The courses maintain a regular supervision meeting to discuss current matters for the teams and to update status. Supervisors also help with giving evaluation on team performance in the end of the courses. Students are introduced to fundamental software development life cycles, namely Waterfall, Iterative development, Agile and Lean Startup. In general, prior to the course, students have learnt about software engineering processes and practices. At NTNU, students are free to choose the methods that fit to their projects. In some cases, the development approaches are enforced by customers, due to the existing working process they adopt in their organizations. At HSN, the students are guided to apply Scrum in all groups. A series of lectures about Scrum development was given in the early phase of the course. 5. Result 5.1. RQ1: How do students perceive team dynamics in the end of their projects?  We provide a summary of mean values for each questions rated by students as in Figure 1. We found that the top three items that gain the highest student rates are Q1, Q4 and Q18. Students believe that they propose more than one alternatives for a problem to discuss, which reflects an open environment for discussion. Students also feel they are free to criticize other opinions. Among task management practices, task review is perceived to be best performed. We found the top three items that have lowest rates from students, which are Q7, Q15, and Q16. Teams feel that they are not confident with problem solving skills. Moreover, they have challenges with assigning time and responsibilities for tasks.  Figure 1 also reveals the elements that have largest variation in students\u2019 opinions. These all belong to the reflection on leadership: Q10 (perception of a leader as a visionary), Q12 (perception of a leader as a skillful worker) and Q14 (perception of a leader as an exciting public speaker). The most stable elements are student\u2019s ability to look for different interpretations and to evaluate their weaknesses.   Each team is characterized by their study location (USN or NTNU), their leader gender (male vs. female) and their course year (2015, 2016 and 2018). We adopted two tailed t-tests for all survey questions (from Q1 to Q18 as shown in Table 3) to compare the features of students in different categories. The t-test with significant p-value at 95% is described in Error! Reference source not found..        \n\n   \n Teamwork Q1: look for different interpretations Q2: criticize each other\u2019s work Q3: evaluating our weak points Q4: openly challenge each other\u2019s opinions Q5: reassess any proposed solution Desc. Makin. Q6: determining the goals and tasks of others Q7: Solving problems in the team Q8: Initiating changes in the team Leadership Q9: perceive the leader as an exciting public speaker Q10: perceive the leader as an skillful worker Q11: perceive the leader as inspirational Q12: perceive the leader as a visionary Q13: leader provides strategic goals Q14: leader generates new ideas Task management Q15: task schedule is assigned Q16: task responsible is assigned Q17: task can be tracked at any time Q18: task review is done regularly Figure 1: Boxplots of student rates on team dynamics According to t-test results, there is a significant difference on how student evaluate their weakness between USN and NTNU courses, with the mean value of USN students (3.24) slightly smaller than of NTNU students (3.57). Two aspects of team decision making have been perceived differently between students in 2015 and students in 2016. These are decision of goals and task for other members (3.46 vs. 3.05) and solving team problems (4.1 vs 3.8). Interestingly, both of the student rates for 2016 is lower than the ones for 2015.  \n\n\nTable 2: Comparison across course year, campus and leader gender Hypotheses Survey Ques. P value Students in USN and NTNU perceived their team dynamics differently Q3  0.0256 Students perceived their team dynamic differently among 2015, vs 2016 at NTNU Q6 Q7 0.0171 0.0461 Students perceived their team dynamic differently among female-leading team and male leading team Q3 Q10 Q12 Q18 0.0136 0.0500 0.0487 0.0434   Regards to leader\u2019s gender, we identified four aspects that student perception might be different between female leader teams vs male leader teams. Two questions are related to how leader perform as a skillful worker (Q10) and as a visionary (Q12). 5.2. RQ2: What are challenges regarding to capstone team dynamics in such contexts? Figure 2 describes the list of concerns regarding students\u2019 reflection on team dynamics. We present different concepts found in sections below.  \n Figure 2: Thematic map of team dynamics concern 5.2.1. Task assignment: Volunteer-based task delegation. Students understand the importance of planning and delegating work for ensuring an internal workflow. It is common that teams assign themselves to tasks based on volunteering. As mentioned by a team: \u201cAmong the many things that went well in this project was the division of tasks between members. As mentioned, everyone had different experiences and interests, and the team tried to delegate tasks fairly so that everyone got to work on something that they were interested in. The team also took the time to make sure that everyone was happy with the tasks they were assigned at the beginning of a sprint.\u201d (NTNU15G04). Teams evolve into a set of functional roles, as stated by a group: \u201cMembers were encouraged to focus on tasks they were good at, to increase efficiency and productivity. This led to some members working a lot more on the report than on development.\u201d (NTNU17G01). The concern here is that some students will never learn other skills. For instance, some students may feel \n\ncomfortable with documentation, writing emails, and contacting customers, hence they will have less chance to learn technical knowledge. Other students, who may focus on coding, will less likely be involved in customer meeting, and market research.  One-man show. The balance of teamwork can be effected by a \u201cstar\u201d in the team. A student groups mentioned: \u201cWe were afraid that the people that were experienced, with the technologies we decided upon, would start setting up the system and implementing features on their own. That could lead to other members being demotivated. One of our team members knew a lot about our technologies. However, after slightly mentioning the concern discussed here, our knowledgeable member was more than willing to spend time to help us get to know the technologies ourselves\u201d (NTNU15G05). We observed that there is always a role of \u201ctechnical expert\u201d in a project team. There is a risk associated with the knowledge gap between team members: \u201cThe different skill levels with the chosen technology going into the project led to a bit of pair programming and tutorial-like workshops, especially in the beginning of the project. At times it could take too much time from someone got stuck on a task until it was reassigned or finished with help\u201d (NTNU17G03). Managing communication between this member and the rest of the team is important for moving from a toy exercise to an actual collaborative work.   Fine-grained task management. Team members might not deliver works on-time due to many reasons, such as sickness, deadlines from other courses, travel, etc. This could be a critical issue for inter-dependent tasks. Tasks like coding might need an approach that is more frequent in synchronizing tasks. Taking a look at the quote from a team report: \u201cDuring the project we noticed that instead of having a general deadline at the end of the sprint, having deadlines for tasks during the sprints made a big difference in our productivity. By using specific deadlines tasks got done evenly through the sprint and not at the last couple of days, which meant that we had more time to test the whole product before sprint reviews. By distributing tasks throughout the sprints we also spread out the pull requests which resulted in less merge conflicts.\u201d (NTNU17G09). We recalled many circumstances that students need to wait for several weeks to get into the next steps of their projects due to a deadlock wait for a task to be completed. While the reasons might be external dependencies, hardware and device dependencies, in general there should be a better approach in dividing and managing such tasks.  Sub-group silo. There is also a common practice to maintain functional sub-groups \u201cWe believe it was necessary to divide into sub-teams in order to complete the different parts of the project. Having everyone involved in all the different parts would incur too big of an overhead, because many of the technologies took significant time getting into\u201d (NTNU17G09). This is observed in several groups \u201cEven though some team members have preferred to work individually, the collaboration within the group divisions have worked well.\u201d (NTNU15G01). More frequent meetings can be hosted in sub-teams and require less meetings for the whole team. Without a proper adoption of project management tool, we found that a team member in a sub-group might not be aware of who-do-what knowledge in other sub-groups.  5.2.2.Leadership: Assigned vs. emerged leaders. At NTNU, for the courses in 2016 and 2017, we assigned a leader for each team. Although this could reflect a real-world situation where students could be put into an on-going project, this has generated some challenges in the course context. In many cases, the assigned leaders do not express a clear responsibility: \u201cThe \n\nfact that we could not control who became the leader of the project was a bit strange. In a group dynamic this can be very damaging for collaboration. If the leader is not invested enough in the project, or very uncomfortable it might damage the process aspect of the project.\u201d (NTNU17G06). \u201c\u2026 The team believes that it might be better to allow the groups to decide how to choose their leader themselves next year, although this method has its drawbacks as well.\u201d (NTNU17G09). In team NTNU17G07, it appeared a role of an emerged leader, who influenced the team regarding to decision-making, task assignment and collective problem solving. In this case, the emerged leader participated in leadership meetings instead of the assigned leader. The issues of assigned vs. emerged leadership do occur in case of autonomous teams as well. Team USN18G05 initially agreed to have one team member to be a leader. The initial leader with an authoritarian style establishes team contracts, meeting schedule and contact to customers. Later, the team is more influenced by a technical leader, who also acts as a Scrum Master. The team adopts Scrum approach and less rely on mechanistic task assignment  Obtaining of who-do-what knowledge. Many students have their first time experiences of being leaders. Most of the leaders in the first Sprint have challenges of understanding task flow and team responsibility: \u201cIn the beginning the leader did not follow up enough; asking members what they were working on, how it was going, if they needed help or new tasks. This reasoning is based on different perceptions between us, where the leader expected the members to take initiative to provide a status update, whereas the members expected the leader to follow up\u201d (NTNU17G09). Some teams do not utilize project management tool, such as Trello, Jira, effectively for visualizing project progress.  Shared responsibility of leader. A team reported a risk of unfulfilled leader\u2019s responsibility leading to teamwork delay: \u201cAs a practical note, the team should have appointed a vice-leader in case the team leader became indisposed. This turned out to be an issue when the team leader became ill with pneumonia. Her absence meant that the team's communication with the customer and communication within the team took a hit during that period\u201d (NTNU17G07). In team USN18G04, the team leader quit the project after five weeks, leading to a significant impact on team progress. The leader was responsible for contacting customers and maintaining the collaborative workspaces. All of this information was not transferred to other team members.  Situational leadership. According to the theory of leadership, the leadership style, which is fit to a task context, will provide the best team performance [15]. Students work on different projects with different level of requirement clarity, task dependencies, and portion of research [16]. Besides, different teams have their own characteristics, such as the familiarity among team members, control and coordination mechanisms [16]. Even though we have not gathered sufficient data about task context at this stage, we can hypothesize that the leadership style should be situational in reflecting the team and task situation. Hence, assigning a team leader with a task-oriented styles to a team that lacks of task structure might be a challenge for the team. 5.2.3.Decision making: Conflict management. Decision making practices are directly influenced by leadership styles. Individuals would either identify a team leader, who has a final word, or else claim that their team has no leader and every member has an equal role in guiding team decisions: \u201cIf a decision was to be made by a vote, the group leader had a double-vote during ties. This was to ensure that a decision was made even if there were to be a tie, as \n\nthere was an even number of group members\u201d. (NTNU15G12). When asked how their team made decisions, many participants described a very democratic style of decision making in which each member had a voice, all opinions were respected, and the group made decisions together. A threat for democratic team is conflicts among team members. The most problematic conflict is probably member commitment. Conflict of priorities between the team member\u2019s personal tasks and group work makes it difficult for members to commit and deliver the promised work. Teams that successfully manage conflicts would perform a good team dynamic: \u201cIf there was ever a disagreement or any specific cases to discuss, this was always brought up in the meetings. Usually critiques or other feedback about the group dynamics were given in retrospective meetings. This strengthened the teamwork and gave each member something to improve on for both this specific project, but also an experience for later projects\u201d (NTNU17G02)  \u201cSilent meeting\u201d. It is important to establish an open environment where team members can throw their opinions on the table: \u201cDifferent ideas and thoughts were well received by everyone on the team, which helped to create open discussions and a safe environment to share opinions.\u201d (NTNU17G09). One way to trigger discussion and idea generation is to assign roles for each team members: \u201cAt the start of the project the group decided to assign roles to the various team members in order to ensure that the project would proceed as planned. This was a huge benefit to the project as assigning roles to the team members gave them an area of responsibility. Being liable for a part of the project gave the responsible individual an incentive for ensuring that the necessary work was done, and that tasks were delegated as needed\u201d 6. Discussion and Conclusions  Team work is one of the prime software engineering concept that a student learn from a capstone course. Good team dynamics is directly related to project success and customer satisfaction. In order to teach the students team dynamics, it is important to find out what constitutes team dynamics. Team dynamics can vary based on context and locale. In this paper we have tried to find out the components of team dynamics from the literature and gained an insight about the team dynamics in context of Norwegian universities from the survey and student reports. Several findings are observed: \u2022 There is a large variation in perception on leaderships and leadership styles among students \u2022 Some leader\u2019s characteristics are perceived differently for female and male leaders, including the perception of leaders as skillful workers or visionaries \u2022 There might be issues with the assigned leaders \u2022 Task review is well perceived, however, task assignment needs further care. \u2022 Fine-grained task management rather than Sprint-based milestones \u2022 Maintaining an open and active discussion to facilitate effective group decision making  Several of our findings matches with the values found in the literature. For example, emerged leader instead of assigned leader tends to perform better increasing the team performance. We also find that students are in general pleased with project-based courses due to their learning and simulated real world experiences [2,5]. Task assignment is still a challenge for students [19]. We found that there should be a complement mechanism to support students assigning and managing tasks besides Sprint planning. Despite of the \n\n",
    "is_processed": true,
    "process_error": null,
    "content_length": 31268,
    "local_pdf_path": "data/pdfs/Evaluation of team dynamic in Norwegian projects for IT students_318b0952.pdf"
  },
  "arxiv_aee827401ae754134c3808328b6885a1": {
    "title": "Criteria Based Evaluation Framework for Service Oriented Methodologies",
    "url": "http://arxiv.org/pdf/2004.09379v1",
    "source": "arxiv",
    "authors": [
      "Mahdi Fahmideh",
      "Jafar Habibi",
      "Fereidoon Shams",
      "Sedigheh Khoshnevis"
    ],
    "published_date": "2020-04-17T05:05:26+00:00",
    "summary": "Service Oriented Software Engineering is based on concepts and principles for\nconstructing complex enterprise systems in which services as building block of\nthe system, are distributed in large networks. The main goal of the service\noriented methodologies is to define a process for development and maintenance\nof service based systems. Most of the Service Oriented methodologies are not\nmature enough compared with traditional software development methodologies such\nas Object Oriented or Component-Based. Hence, defining an evaluation framework\nwill be useful for comparing methodologies for identifying their strengths and\nweaknesses, defining new methodologies or extending existing Service Oriented\nmethodologies. At the time being, there is no complete evaluation framework for\nevaluating Service Oriented methodologies. The principal objective of this\npaper is to introduce a comprehensive evaluation framework for evaluating\nService-Oriented methodologies. This evaluation tool is appropriate...",
    "categories": [
      "cs.SE"
    ],
    "entry_id": "http://arxiv.org/abs/2004.09379v1",
    "meta": {
      "content_type": "academic_paper",
      "is_curated": true,
      "source_quality": 8
    },
    "content_type": "academic_paper",
    "text": "Criteria-Based Evaluation Framework for Service-Oriented Methodologies \nMehdi Fahmideh Gholami   \nComputer Engineering \nDepartment, Faculty of \nEngineering, Science & Research \nBranch of Islamic Azad \nUniversity, Tehran, Iran \nm.fahmideh@srbiau.ac.irJafar Habibi  \nComputer Engineering Department, \nSharif University of Technology, \nTehran, Iran \njhabibi@sharif.eduFereidoon Shams  \nComputer Engineering \nDepartment, Faculty of \nElectrical & Computer \nEngineering, Shahid \nBeheshti University, \nTehran ,Iran,\nf_shams@sbu.ac.irSedigheh Khoshnevis\nIslamic Azad University, \nShahr-e-Qods-Branch, Iran\ns_khoshnevis@sbu.ac.ir\nAbstract \u2014Service-Oriented Software Engineering is based on \nconcepts and principles for cons tructing complex enterprise \nsystems in which services as bu ilding block of the system, are \ndistributed in large networks. The main goal of the service-\noriented methodologies is to de fine a process for development \nand maintenance of service-based systems. Most of the Service-Oriented methodologies are not mature enough compared with \ntraditional software development methodologies such as \nObject-Oriented or Component-Bas ed. Hence, defining an \nevaluation framework will be useful for comparing \nmethodologies for identifying th eir strengths and weaknesses, \ndefining new methodologies or extending existing Service-Oriented methodologies. At the time being, there is no \ncomplete evaluation framework for evaluating Service-\nOriented methodologies. The principal objective of this paper \nis to introduce a comprehensive evaluation framework for \nevaluating Service-Oriented methodologies. This evaluation \ntool is appropriate for methodology engineers to develop new \nmethodologies, as well as project managers to select an \nappropriate methodology at a specific project. \nKeywords- Software Development Methodologies; Service-\nOriented Development Methodologies; Methodology Evaluation \nFramework; Evaluation Criteria\nI. I NTRODUCTION AND MOTIVATION \nService-Oriented Computing is a new computing \nparadigm in which, services as highly-reusable building \nblocks are used for rapid, low-cost development of \ndistributed applications in heterogeneous and loosely \ncoupled environments [1]. Servi ces shape loosely-coupled \nlarge scale distributed systems in which, services interact \nthrough their interfaces to realize business processes. Today, \nmany service oriented methodologi es have been designed for \ndeveloping service-oriented (S O) systems by different \ncompanies and practitioners. SO methodologies aim at \ntranslating enterprise business processes to a set of services by defining appropriate activ ities, techniques, guidelines, \nroles and responsibilities. However, they are quite new and immature in a way that it is too difficult to select one appropriate methodol ogy among them. Therefore, it could be said this is a time of \u201cMethodologies War\u201d for service -oriented engineering context [2]. IBM SOAD [3], IBM SOMA 2008 [4], CBDI-SAE [5], SOUP [6], MASOM [7], \nSOA RQ [8], BPMN to BPEL [9] and Papazoglou [10]  are \nthe most known SO methodologies  that are proposed so far. \nIn general, a methodology is defined by two aspects [11,12]: \n1. Development Process : Containing techniques (for cost \nestimation or requirements engineering), guidelines, activities, roles and their responsibilities, verification and validation mechanisms, quality assurance for produced artifacts, metrics, coding standards and tools. Each methodology has a set of umbrella activities for controlling and managing the development process (e.g. risk management or project monitoring).  \n2. Modeling Language : Is used to represent artifacts which \nare produced in the development process phases.  \nAlmost every SO methodology  is defined based on \ncommon traditional methodologi es such as object-oriented \nand component based methodologies. Thus, the SO \nmethodologies can be consider ed as an evolution of the \nComponent-Based and Object -Oriented methodologies \n[1,32]. SO methodologies are not  basically very different \nfrom traditional software development processes, however, there are new considerations that should be taken into \naccount in terms of new features and activities that are \nspecific to SO methodologies. These can be represented via \nan evaluation framework for SO methodologies. An evaluation framework is an appropriate tool to discover \nweaknesses, strengths, simila rities and differences of \nmethodologies. It may be used by two groups of people in a \nsoftware development organization: project managers, who select the most appropriate methodology for developing their \nservice-oriented systems, and Methodology engineers, who \nextend or adapt a methodology for special situations. Moreover, an evaluation framew ork can assist methodology \nengineers to select suitable method-fragments of \nmethodologies to create a ne w specific SO methodology for \na specific purpose.\nOur studies show that there are few evaluation \nframeworks to meet the above needs. For this purpose, we \ndefine a quite comprehensive evaluation framework based on \n2010 12th International Conference on Computer Modelling and Simulation\n978-0-7695-4016-0/10 $26.00 \u00a9 2010 IEEE\nDOI 10.1109/UKSIM.2010.98117\n2010 12th International Conference on Computer Modelling and Simulation\n978-0-7695-4016-0/10 $26.00 \u00a9 2010 IEEEDOI 10.1109/UKSIM.2010.31112\n2010 12th International Conference on Computer Modelling and Simulation\n978-0-7695-4016-0/10 $26.00 \u00a9 2010 IEEEDOI 10.1109/UKSIM.2010.30122\n\n\na set of criteria to evaluate SO methodologies. The proposed \nframework criteria strive to cover most aspects of SO methodologies.  \nThe rest of the paper is structured as follows: Section 2 \noverviews the related work. In s ection 3, we will define the \nstructure of the proposed methodology evaluation \nframework. Section 4 contains detail description of evaluation criteria. In section 5 we evaluate MSOAM \nmethodology by our proposed evaluation framework. Finally \nsection 6, is related to opportunities for future researches. \nII. B\nACKGROUND AND RELATED WORK\nThe set of evaluation criteria for evaluating a \nmethodology should focus on the specific approach, for which, the methodology has emerged, or by which, it is \ninfluenced. For example obj ect-oriented methodologies are \ndefined based on the concepts such as object, attribute, \noperation, encapsulation, inform ation hiding and inheritance. \nAgile methodologies are establis hed base on agile manifesto \n[13]. Therefore, these methodologi es should be evaluated by \ncriteria which are focused on the mentioned concepts. In a similar way, SO methodologies have emerged from service- oriented architecture (SOA) concepts and thus their evaluation criteria should comply with SOA concepts. \nUnlike SO methodologies, there are many researches on \nevaluating and analyzing method ologies based on other types \nof approaches: for example there are evaluation frameworks for the Object-Oriented [14,15,16,17], Agile [18,19] and Agent-Oriented methodologies [20,21]. Although SO methodologies are becoming increasingly important, there is \nonly a little work on defining evaluation frameworks in the \ncontext of SO methodologies. In [2], most prominent SO \nmethodologies are evaluated by a set of proposed criteria. \nThese criteria are categorized into two categories: those related to the development pro cess and those related to some \nof SO characteristics. However, the proposed criteria are not enough to cover all service orientation aspects, because some important special features of service-oriented engineering are not addressed as discussed on [1,10]. Moreover, one important deficiency of their ev aluation framework is that it \ndoes not adequately address criteria that are related to the modeling language aspect of th e methodology. In [1], some \nchallenges in the service oriented software engineering are reviewed including business modeling techniques, service \ncomposition, gap analysis tec hniques and design principles. \nAs a result, a lack of a comprehensive and adequate evaluation framework for SO me thodologies is felt. In this \npaper, a pioneering research  in the area of evaluation \nframework for SO methodologies is presented. \nIII. P\nROPOSED EVALUATION FRAMEWORK \nWe provide a brief overview of the structure of our \nevaluation framework in this section. The following are the \nobjectives of our proposed evaluation framework: \nxIt must act as a tool for project managers to select the \nmost appropriate SO methodology in the context of development, based on a set of predefined requirements. The framework must facilitat e methodology selection via clarifying similarities, differences, strengths and \nweaknesses of SO methodologies.  \nxIt must help methodology engineers to extend or adapt \nSO methodologies in order to improve them or even construct a project-specific SO methodology by selecting appropriate methodol ogy fragments into new \ndifferent methodologies. All criteria in the evaluation \nframework can be considered as method fragments of a \nsuper methodology. \nThe first step to evaluation is  to define criteria and then \nstructure them in an appropriate evaluation framework. For this purpose, we have used DESMET. It is an evaluating approach, developed in 1996 in a collaborative project \nbetween academia and industry, and helps a methods/tools evaluator to carry out an eval uation for identifying the best \noption. According to DESMET there are nine methods/techniques for developi ng an evaluation framework \n[22]:   1. Feature Analysis (Qualitative Analysis):  I t  i s  a  \nqualitative method. Feature Analysis is based on an evaluation criteria set, that are based on the prominent features of tools, processes or products. This technique \ndefines how to plan a feature -based evaluation and how to \nanalyze the results of an evaluation. There are four \ntechniques in feature analysis as listed below:  \na. Formal Experiment:  Results of applying \ntools/processes/products can  be analyzed using \nstandard statistical techniques. b.Case Study:  The tool/process/prod uct is used in a \nreal world project and effects of applying it are evaluated.c. Survey : Practitioners and researchers' opinions \nabout a subject are used. d.Screening Mode : The evaluation is performed by \nresearcher based on available resources and documents. \n2. Quantitative Evaluation:  This technique is based on \nmeasurable properties to select appropriate \ntools/processes/products. \n3. Qualitative Effects Analysis:  It uses a combination of \nfeature analysis and quantitative techniques.  4. Benchmarking:  This technique includes designing the \nbenchmark tests and running them on each tool/process/product.  \nOur evaluation framework is developed using feature \nanalysis (specifically screening mode). For achieving suitable and precise evaluation criteria, we used meta-criteria for eliminating overlapping,  redundancy and inconsistency between criteria .  Meta-criteria define essential features that an appropriate evaluation framework should deal with. In [14,24] some meta-criteria are defined for achieving appropriate evaluation criteria such as precision, simplicity, consistency, and minimum overlapping between the criteria. \nAlthough our proposed evaluation framework is \nqualitative, it can be applied for comparative analysis in a \nquantitative manner. For this purpose, the criteria set can be \nformulated as mentioned in [19,25] or other techniques of \nDESMET such as case study or survey can be used. However, precision of each technique depends on the \n118\n113\n123\n\navailable resources and execution conditions of evaluation. \nIn this paper, we use feature analysis to study the applicability of our framework by performing it on the MSOAM methodology which is proposed by Erl [7]. Although the result of this ev aluation is fully subjective, \nother techniques can be used to  achieve higher precision in a \ncomparative analysis.  \nWe have organized our proposed framework in five \naspects (figure 1). This structure has leveraged the \nmethodology definition, stating that a methodology has two main aspects: development process and modeling language. However, we extend the definition by adding new aspects, \nspecific to SO methodologies. Th e new aspects are: Service- \nOriented Activities, Service-Or iented Umbrella Activities \nand Supportive Features. In order to cover process and modeling language criteria we use previous researches that were done in Object Oriented [15,16 ,17], Agile [18,19] and \nAgent-Oriented methodologies [20,21,25,26], because these criteria are general enough to be applicable for comparative \nevaluation of all types of methodologies at any approach. However, there are some specific aspects in SO methodologies that are not satisfied by the general criteria. Hence, as the main feature of our research, we have defined \nan appropriate criteria set to address these aspects. As shown \nin figure 1, Service-Oriented Activities are specific criteria \nset that development process in SO methodologies should include. In addition, in SO methodologies there are more umbrella activities compared with common traditional methodologies. Consequently, Service- Oriented Umbrella \nActivities aspect has been developed for this purpose. \nFinally, Supportive Features aspect refers to criteria that associate with SOA concepts and service-based systems. In order to develop all criteria in these new three aspects, according to prescribed steps in DESMET, we had a precise \nstudy on existing SO methodologies , relevant resources and \nevidences, SOA challenges [1] and prominent features of existing SO methodologies [2]. Then we defined initial \ncriteria and completed them th rough gradational manner by \neliminating overlaps, redundancies and inconsistencies among criteria. Criteria definition process proceeded by \ncategorizing them in Service- Oriented Activities, Service- \nOriented Umbrella Activities and Supportive Features. Further, we described all criteria as organized into framework\u2019s aspects. \nFigure 1. Class-Based Structure of Evaluation Framework IV. E VALUATION CRITERIA\nIn this section, we describe details of our evaluation \nframework criteria for SO methodologies. \nA. Development Process  \nIn [15,16,17,18,19,20,21,25], se ts of generic criteria are \ndefined that are applicable for evaluating the development process part of any type of methodology. Having had an overall study on them, we leveraged and used these criteria as listed below:  1- Clarity and Consistency of Definition:  Methodology \nshould have precise and clear definition to be usable in a \nsoftware development organization. Activities, roles and guidelines should be defined explicitly and unambiguously \nso that development team has no problem for using it. It is an urgent need that methodology documents and textbooks are \navailable and that the methodol ogy is supported adequately \nby its creator in order to be usable in practice, otherwise it \nwill be inconvenient to use. Moreover, the number of success reports of applying the methodol ogy in the industry should \nbe considered. For exampl e MSOAM methodology has a \nclear and step-by-step definiti on and is fully documented, \nthat has made it easy to use. In contrast, IBM SOAD\u2019s 2004 process has a poor definition for phases and activities.  \n2- Coverage of the Generic Development Lifecycle \nActivities: Methodology should have coverage for the whole \ngeneric SO life cycle including service analysis and \nmodeling, service design, service realization, service \nimplementation and test, service deployment and service monitoring in general. From this viewpoint, SOMA 2008 and CBDI-SAE cover about SO generic life cycle according to the available documented resources.  \n3- Support Umbrella Activities:  These activities typically \ninclude project management, risk management and quality assurance management.  \n4- Smoothness and Seamlessness Transition between \nPhases, Stages and Activities:  Transition between different \nphases and stages should be smooth and successive. \nImportant factors by which tr ansition smoothness is provided \nfor a methodology are: continu ous refinement of a specific \nset of models (e.g. Catalysis), Fractal modeling (e.g. SOMA \n2008), and iterative-incremental nature of development \nprocess and the short cycles (Agile methodologies). In \naddition, a seamless methodology should try to avoid a huge \ngap and complex transformation between stages. For example many agile methodol ogies cannot be seamless \nsince, after the requirement analysis phase, a quick transition is made to the implementation phase which is started \nimmediately without anal yzing and modeling the \nrequirements.  \n5- Requirements as a basis (Functional and Non-\nFunctional):  Methodology should be started with \nrequirements elicitation. All activ ities should be based on the \nrequirements.  \n6- Tangibility of Artifac ts, and Traceability to \nRequirements:  Understandability of the artifacts produced \nby methodology and concrete relationships between them for \nusers and development team involved in development process is referred to as tangibility [17]. A methodology that \n119\n114\n124\n\nprovides a variety of models, such as use-case diagrams, \nprototypes and graphical models is more understandable for users. In contrast, a methodol ogy that produces complex \nartifacts is not useful. Artifacts should complement each other throughout the development process. Traceability of requirements leads to profitability of models. Artifacts should be traceable to the main requirements. Each artifact should show part of stakeholders\u2019 requirements.   \n7- Manageability of Complexity : The techniques or \nguidelines that are defined by the methodology for breaking a large activity into simple and light sub-activities are referred to as complexity management. Methodology should \nprovide a solution or managing  complex activities such as \narchitecture design or requirements elicitation. In MSOAM, for example, there is a step-by-step method for extracting and designing services from business processes.  \n8- Extensibility, Configurabilit y, Flexibility and Scalability:\nExtensibility of the methodology is defined as mechanisms \nthat are explicitly defined by the methodology to add new method fragments to its development process according to the project at hand. For example, IBM SOMA\u2019s solution templates have predefined ex tension points for customizing \nits process to make it fi t to a SO specific project. \nConfigurability is a desirable feature by which, before \nstarting its process, method ology can be configured \naccording to the project at hand and the software development organization. CBDI-SAE and SOMA 2008 are examples of configurable methodologies. Flexibility is configurability at the methodology process runtime. If the \nmethodology can be tuned regardi ng the experiences gained \nduring the development, it is s aid to be flexible. Utilizing an \niterative and incremental process, continuous review sessions by the development team, flexible project plan and feedback-based revisions are useful  techniques that help a \nmethodology to be flexible. Fina lly, scalability indicates the \nability of the methodology to handle applications with \ndifferent sizes and criticalities. \n9- Practicability and Practicality:  Practicability refers to \nemployability of the methodology in an efficient and effective manner. Using a methodology with heavy process \nis not practicable unless it is configured before running its \nprocess. For example, RUP, as an object-oriented methodology, is not practicab le per se. It should be \nconfigured according to the project situation. Practicality of a methodology depends on its feasibility. Need to expert people, need to specific tools, learning curve, degree of complexity of development process and modeling language, and pragmatic techniques are more important issues that largely affect methodology prac ticality. For example, almost \nall of the agile methodologies such as XP, DSDM and ASD are heavily dependent on tools for having a practical agile process.\n10- Application Scope:  Application scope relates to the \nintended usage context. For example in SO, there are wide spectrums of applications such as SO tele-communication, \nSO distributed real time systems, e-health and e-government. Each type of these systems has its own issues and challenges. \nA methodology should be evaluated for its suitability in a particular SO domain.  11- Evolutionary vs. Revolutionary:  This criteria, evaluates \ncompatibility of the methodol ogy with the traditional \nmethodologies. A methodology can be defined based upon existing methodologies or engin eered from scratch by novel \nideas. Especially SOUP\u2019s method fragments are selected from RUP and XP methodologies. In contrast, MSOAM has been designed from scratch by Erl [7].  12- Language or Technology:  A methodology could be \ndesigned based on specific concepts of a programming \nlanguage or technology. Therefore, software development environment and the required expertise are important factors in methodology applicability. \nB. Modeling Language \nIn this section, we will review the criteria set for \nevaluating the modeling langua ge part of the methodology. \nThese criteria are taken from [15,16,17,18,19,20].  1- Support for Different Model Views: A modeling \nlanguage should be able to represent elements and different aspects of the system such as behavior, structure and \nfunction.  \n2-  Analyzability : A desirable feature of a modeling  \nlanguage is its degree of supp ort from formalism. It provides \nthe modeling language with the capability to provide a symbolic execution of the system . This will help to analyze \nspecific aspects of system behavior such as performance or availability at runtime. Formal ism helps to a better automatic \nsoftware construction. A tangible  example in this context is \nOCL, which is defined within UML. \n3-  Providing Techniques for Tackling Model Inconsistency \nand Managing Model Complexity :A modeling language \nshould be able to manage complexity and inconsistency in models. For example in UML, package is a suitable mechanism for managing model complexity by bringing related classes together into a coherent package.  4- Preciseness:  This criterion refers to unambiguity of the \nmodeling language. It mitigate s the misinterpretation of the \nmodels for modelers.  \n5- Simplicity to Learn and Use: A modeling language \nshould be simple to learn and use. \nC. Service-Oriented Activities \nThis category of criteria focuse s on the specific context \nactivities (such as tasks, technique s or guidelines) that should \nbe included in an appropriate SO based development process. We have defined these criteria based upon previous researches [1,2], service-oriented software engineering literature, SO methodologies challenges, SOA concepts and good features of existing servi ce oriented methodologies. In \nour opinion, it is essential for any SO methodology to regard eight criteria as listed below: 1- Business Modeling: Generally, services are identified and \nrealized based on business processes. Business processes \nshould be modeled and optimized in order to be mapped appropriately to the services that satisfy business goals. \nBetter business processes alignment has direct affect on the \nenterprise goals. Therefore, we have defined criteria for \nevaluating prescribed activities, techniques and guidelines in \n120\n115\n125\n\nthe methodology for specifying, decomposing, optimizing \nand aligning the enterprise busi ness processes with business \ngoals.\n2- Service-Oriented Analysis & Design (SOAD) :Indeed,\nservice analysis and design is the heart of any SO methodology. In SOAD, business processes are mapped to software services. In many cases, SOAD is called as methodology by itself. However, SOAD is not everything for \na SO-based development proce ss. Methodology should \ndefine a precise step-by-step process, techniques and guidelines for identifying services from business processes. Furthermore, a methodology should take into account \ndefining techniques to enable reusing significant services \nfrom legacy systems, to be used in new business processes, leading to an increase of re usability and a reduction of \ndevelopment cost and time. Service discovery techniques \nshould not be missed in the development process. When well-defined formal descriptio n is provided for the services, \nthey can be published to a repository. Search techniques would facilitate the search fo r services within local or \nremote, centralized or distribu ted repositories. Tool support \nfor automating discovery is important. The basic key elements for supporting SOAD are: \u201cIdentifying right \nservices at each layer\u201d, \u201cOptimizing service granularity\u201d, \n\u201cDesigning fine-grained service operations and interfaces\u201d, \n\u201cService composition for orchestration or choreography\u201d, \u201cIdentifying useful existing services from legacy systems\u201d . In \naddition, an important feature of a service is adherence to SOA principles [7], such as service reusability, statelessness \nof service , etc., that are all required throughout SOAD.   \n3- Service Quality Attributes :Services can be naturally used \nby every external enterprise and software development organization. Quality attributes of services such as security, availability, reliabilit y, reusability and performance directly \naffect the usability of the services by their consumers. Hence, service quality should  not be neglected in the \narchitectural design. A methodology should address \nactivities, guidelines and quality metrics for satisfying \nservice quality at design time. Applying service-oriented patterns can be useful in this context to gain qualified \nservices at design time.  \n4- Service Provisioning and Consuming :Service\nprovisioning is deploying, ma king available and supporting \nthe service during the use for its consumers. It involves service provider in servi ce publishing, certificating, \nenrolling, auditing, metering, billing and managing operation \nof services when consumers are subscribed to services. In such case, methodology should  have activities and guidelines \nfor service provisioning and consuming aspects. 5-  Service Testing :Test methods in service-orientation are \ndifferent from traditional ones. Since services are distributed \nand loosely-coupled and becaus e asynchronous messaging is \nused in SOA, testing can be significantly more complex in \nservice-based systems compared with traditional testing techniques that we have used so far. There is no full control \non all of the distributed services that have realized a service oriented system. It is possible that a composite service \nconsists of some fine-grained services that have been developed and deployed independently from each other in a large network. In testing a compos ite service, availability of \nall services at testing time has an important effect on the test success. Unfortunately, a composite service, in which services can be added, remove d and modified dynamically \nduring use of the service, is more difficult to test. This criterion evaluates the methodology support for test case writing techniques and guidelines in different levels such as \ncomponent, service, composition, orchestration and\nchoreography, governance and testing the quality of services \nsuch as security ,performance  and availability .\n6- Service Versioning and Evolution : Each service has its \nown life cycle: identification, specification, realization, publishing, using and finally retirement. Many service \nconsumers use services in a common manner. A tiny change in the service interfaces would tend to cause ripple effects on distributed business processes chain in a way that all requests based on the old interfaces would fail. A versioning management system is needed due to the adherence to predefined expected contract s. Methodology should define \nneeded roles and activities to help the conduction of service versioning management, because occasional changes that may occur in service-interfaces can cause changes in service implementation. \n7- Adaptable with Legacy Systems : Legacy systems are \nknown as existing software asse ts that have been developed \nin the past. Legacy systems generally consist of business logic that could not be neglected  to be incorporated with new \nSO systems. However, they suffer from undocumented, \noutdated technology, mono lithic architecture and \ninflexibility. To satis fy this criterion, a methodology should \ninclude prescribed techniques for  gap analysis between \nlegacy and target SO systems ,development of the most \nappropriate migration plan from legacy systems to SO environments ,required improvements that must be made to \nthe legacy systems to ac complish the migration , and \ndatabases migration .\n8- Cost Estimation:  There are factors that complicate \nestimating an SO project scope, cost and time, system \nboundary identification, social , cultural and organizational \nissues, business processes complexity, services complexity \nand the organization maturity level (experience in undertaking SOA). There is a need to more research to enhance traditional estimation methods for SO project. This criterion checks whether a methodology has techniques for \nSO-based cost estimation. \nD. Service-Oriented Umbrella Activities  \nThis section deals with the specific SO based umbrella \nactivities of a SO methodology. Our framework suggests these criteria as described below: \n1- Service Level Agreement (SLA) Monitoring :An SLA is \na compliance contract between an IT service provider and \nthe consumer. For example, \u201cpercentage of service \navailability in a month\u201d, \u201ctime to recovery from failure\u201d and \n\u201cexpected service response time\u201d are contracted in an SLA. \nAn SLA process involves gathering, reporting, behavioral \nmonitoring and detecting viol ations of the services from \nSLA\u2019s contracts for nonfunctional quality attributes after the \n121\n116\n126\n\nservices are deployed in the network environment. \nAdherence of a methodology to SLA is measured by \nchecking if there are appropriate activities, techniques, \nguidelines, measurable metrics and supportive roles for \nmonitoring service quality attributes, such as performance, \nsecurity and availability to be main tained in a certain level at \nruntime. 2- Support of Governance :Governance is an important \nfoundation for successful construction of SO systems. \nGovernance is what ensures stakeholders that the right services are developed complying with diverse business \ngoals set by different business units. Governance is an \numbrella activity in the entir e system development. To \nsupport governance in a methodology, we should define \nactivities for establishing communication between development teams and stak eholders, and controlling \nmechanisms for enabling people to carry out their \nresponsibilities and monito ring the execution of policies. \nGovernance should be present in the entire development \nprocess to keep services aligned with business objectives and \nstakeholders' needs. 3- People Management : \u201cFear of the unknown in people is \nthe greatest contributor of resistance to change and is made \nas project-killer\u201d [27]. People in enterprises are afraid of changes and this results in  human factor infeasibility; \ntherefore, there is a tendenc y for project failure. Suitableness \nof methodology for applying in  enterprise scale is \nascertained with activities for addressing people \nmanagement, avoiding huma n factor infeasibility and \nproviding adequa te training.  \n4- Distributed Software De velopment (DSD) Techniques:\nSoftware services can be deve loped by fully distributed \nteams and each team has members at multiple locations. Methodology should define activities and techniques for project management to track status and progress of project across distributed teams. We can examine DSD support by checking the best practices and patterns for distributed \ndevelopment as they are mostly useful for project tracking and monitoring in the methodology. \nE. Supportive Features \nThe last proposed criteria set are about admirable \nfeatures in SO methodology that are taken into consideration \nby methodology designers. The considered criteria are: \n1- Architecture-Based :A successful generation of an SO \nsystem is dependent on taking into account the Service- \nOriented Architecture (SOA) stack. From the stack \nviewpoint, SOA consists of differe nt layers that are aligned \nwith business goals. Services are placed as building blocks in \neach layer. For example the most significant layers as \nintroduced by IBM are [28]: operational layer ,service \ncomponent layer ,business process layer ,consumer layer ,\nintegration layer , QoS layer  and Information architecture \nlayer .\nA spirit of architecture-based development plays an \nessential role to facilitate system development, team \nmanagement, risk mitigation and business process management  even non-SO on es. Consequently, a custom \ninstantiation from SOA stack should be made in initiating the development process and refined as the development progresses in each iteration. All development process activities and design decisions are arranged based on it.  \n2- Service Agility:  One of the main reasons to tendency to \nSOA investments is service agility. Today, business does not remain in a stable state. Ever-changing in nature, government \nrules, policies, market opportunities and threats make \nunanticipated changes in enterprise business processes. In order to remain in the marketing contest and be alive, an \nenterprise should be widely adaptable with the external \nenvironment. For this purpose, services as building blocks of \nbusiness processes should be designed agile to support the \nbusiness changes. Agility in se rvices can be achieved by \napplying OMG\u2019s Model-Driven Architecture (MDA) [29] or \nLayering approaches [4,7]. This criterion evaluates the \nmethodology from the aspect  of defining prescribed \nprinciples, guidelines and techniques to reach agile services. \n3- Process Agility :Elicitation of all requirements of a large-\nscale distributed system at early stages of the project is not possible. Some of the requirements are discovered or \nunderstood better during system development. Therefore, \nresponding to new requiremen ts and changes in business \noccurs frequently. Appropriate techniques or guidelines to \nenhance the agility of the development process in accordance \nto changes should be addressed. For checking this criterion, \nwe consider the degree of relationship between SO \nmethodology and Agile Manifest o such as flexible plan, \nactive user involvement, short release time and increase in communication and feedback that will lead to an increase in \nagility of the development process to quickly respond to \nfuture changes.  4-  Maturity Level:  Service oriented maturity models such as \nSOAMM or SIMM help an enterprise to achieve certain \nmaturity levels. Although, since there is no agreement (yet) on SOA maturity models, applying a methodology should \nincrease the level of service orientation in an enterprise. This \ncriterion evaluates methodology activities to cover defined \nservice orientation maturity disciplines.   \n5- Tool Support : This criterion refers to availability of \nappropriate tools for usi ng in coherence with the \nmethodology. Incorporating tools should be considered for \nsupporting business process modeling, service modeling, \nSLA monitoring, and support for Enterprise Service Bus (ESB) and Middleware. \nV. E\nVALUATION MSOAM U SING PROPOSED \nEVALUATION FRAMEWORK\nIn this section, we conduct a criteria-based evaluation of \nthe MSOAM methodology based on the proposed evaluation framework. We selected MSOAM to analyze, since its documents are fully available. As mentioned in section 3, for developing evaluation framework criteria we have used feature analysis. For a better and more understandable representation of the analysis results we used descriptive degrees as: Not Addressed, Low, Medium, and High. \n122\n117\n127\n\nEvaluating MSOAM with the proposed evaluation \nframework highlights its strengths and weaknesses. MSOAM process introduces a series of best practices and a formal step-by-step process for service-oriented analysis and design. It strives to be an  abstract process. However, MSOAM lacks attention to define appropriate roles, \nactivities and modeling language issues. Tables I through V show the results of evaluating the MSOAM methodology using the proposed evaluation framework. \nTABLE I. R ESULTS OF APPLYING THE DEVELOPMENT PROCESS CRITERIA\nCriterion MSOAM  Evaluation Degree\nClarity and Consistency of Definition Methodology has a clear definition for service analysis and design phase, \nbut it lacks the definition for other phases for example construction Medium \nCoverage of the Generic Development \nLifecycle Activities Methodology defines a complete generic life cycle. It starts with service \nmodeling and design and stops in construction phase. Low \nSupport Umbrella Activities There is no definition for risk management and project management Not Addressed \nSmooth and Seamless Transition \nbetween Phases, Stages and Activities A step-by-step technique for service modeling is defined. There are \ntechniques for handling other phases. Medium \nBasis in the Requirements (Functional \nand Non-Functional) Requirements should be gathered before using methodology. No activities \nprescribed.Not Addressed \nTangibility of Artifacts, and \nTraceability to Requirements Due to lack of requirement engineering, traceability can be in risk Low \nManageability of Complexity  Services are modeled and designed through a step-by-step process. But no \ntechnique is defined for architecture design. Medium \nExtensibility, Configurability, \nFlexibility and Scalability MSOAM\u2019s development process can be  run in top-down, bottom-up and \nagile manner. Hence, it is configurable. Medium \nPracticability and Practicality Development process is practicable through providing effective activities \nfor top-down, bottom-up and agile strategies for development.  \nDevelopment process is practical because it supports pragmatic techniques \nfor service-oriented analysis and design independently from any specific \ntools. High\nApplication Scope MSOAM is a simple development process for information systems. It can \nbe extended to fit different scopes. Information System \nEvolutionary or Revolutionary Development process is defined from scratch, regardless of other \ndevelopment processes. Revolutionary \nLanguage or Technology MSOAM does not target at a specific language or technology. It does not \nrefer to the construction phase. High\nTABLE II. R ESULTS OF APPLYING THE MODELING LANGUAGE CRITERIA\nCriterion MSOAM  Evaluation Degree\nSupport for Different Model Views - Not Addressed \nAnalyzability - Not Addressed \nTechniques for Tackling Model Inconsis tency and Managing Model Complexity - Not Addressed \nPreciseness - Not Addressed \nSimplicity to Learn and Use - Not Addressed \nTABLE III. R ESULTS OF APPLYING THE SERVICE -ORIENTED ACTIVITIES CRITERIA\nCriterion MSOAM  Evaluation Degree\nBusiness Modeling MSOAM only refers to it. Business modeling is done apart from \nprocess usually. Medium \nService Oriented Analysis & Design (SOAD) Service-oriented analysis and service-design phases are designed to \nsupport this criterion strongly. High\nService Quality Attributes - Not Addressed \nService Provisioning and Consuming - Not Addressed \nService Testing - Not Addressed \nService Versioning and Evolution - Not Addressed \nAdaptable with Legacy Systems - Not Addressed \nCost Estimation - Not Addressed \nTABLE IV. R ESULTS OF APPLYING THE SERVICE -ORIENTED UMBRELLA ACTIVITIES CRITERIA\nCriterion MSOAM  Evaluation Degree\nService Level Agreement (SLA) Monitoring - Not Addressed \nSupport of Governance - Not Addressed \nPeople Management - Not Addressed \n123\n118\n128\n\nDistributed Software Development (DSD) Techniques - Not Addressed \nTABLE V. R ESULTS OF APPLYING THE SUPPORTIVE FEATURES CRITERIA\nCriterion MSOAM  Evaluation Degree\nArchitecture-Based - Not Addressed \nService Agility MSOAM defines service layer mechanism to inspire agility to services. These three \nprimary layers are business process layer, service interface layer and application layer. \nThese layers enhance decoupling between granular services in layers. High\nProcess Agility MSOAM prescribes two strategies for having an  agile process, bottom-up strategy and agile \nstrategy. High\nMaturity Level According to comparison between SOAMM with MSOMA\u2019s activities, MSOAM enhances \nthe enterprise maturity to the level of two. Level 2 \nTool Support No tool is defined yet to support the development process. Not Addressed \nVI. C ONCLUSION AND FUTURE WORK\nSelecting a suitable method ology from the set of SO \nmethodologies is still difficult. In this paper, we proposed a \nmethodology evaluation framework to address detailed evaluation of different aspect s of SO methodologies. This \nframework defines a set of criteria for identifying \nweaknesses and strengths, and comparing SO \nmethodologies. Project managers can use evaluation results to select an appropriat e methodology. Moreover, \nmethodology engineers can use ev aluation results as a guide \nfor adaptation, extending, meta-modeling/instantiating of SO methodology. \nAlthough our evaluation framework is subjective due to \nthe use of feature analysis technique in its development, we \nused meta-criteria for eliminating the overlapping, \nredundancy and inconsistency between the criteria . One of the future works can be trying to define quantitative criteria \nset for the evaluation framework. Another future work can focus on refining the evaluati on framework through applying \nit to other SO methodologies, and defining more evaluation \ncriteria.\nAs the main future work, we  will focus on extracting a \nset of process patterns from SO methodologies. Ambler defines a process pattern as \u201ca collection of general techniques, actions, and/or task s (activities) for developing \nobject-oriented software\u201d [30]. Process patterns describe commonality of process fragments in software development \nmethodologies. Hence, our process patterns will be distillate and will show all recurring activities in different SO methodologies. They are resulte d from the abstraction view \non development process of SO methodologies. Process \npatterns provide a generic life cycle and can be instantiated for constructing a new custom SO based software development process. Process pattern is an essential part of Assembly-Based Situational Method Engineering (SME) \n[31]. They store reusable method fragments in method \nrepository. Then by the SM E, a new methodology is \nconstructed by selecting and assembling process patterns from method repository according to predefined requirements of the project s ituation at hand. In addition, \nprocess patterns are useful for configurin g, improving and \ncomparing existing SO methodologies. R\nEFERENCES\n[1] M.P.Papazoglou, P.Traverso, S. Dustdar, F.Leymann, \u201cService-\nOriented Computing Research Roadmap\u201d, March 2006, Available at: \nhttp://infolab.uvt.nl/pub/papazogloump-2006-96.pdf \n[2] E.Ramollari, D.Dranidis, A.J.H.Simons, \u201cA Survey of Service \nOriented Development Methodologies\u201d , In Proceedings of the 2nd \nEuropean Young Researchers Workshop on Service Oriented \nComputing, Leicester, UK, June 2007. \n[3] O.Zimmermann, \u201cElements of Service-Oriented Analysis and \nDesign\u201d, IBM Corporation, June 2004,   Available at http://www-\n  128.ibm.com/developerworks/library/wssoad1/. \n[4] A.Arsanjani, \u201cSOMA: A Met hod for Developing Service-Oriented \nSolutions\u201d, IBM Corporation , August 2008 Available at: \nhttp://www.research.ibm.com/journal/sj/473/arsanjani.pdf.\n[5] P.Allen, \u201cThe Service-Oriented Process\u201d, In CBDi Journal ,Available \nat: http://www.cbdiforum.com/report summary.php3?page=/secure/interact/2007-02/service  oriented \nprocess.php&area=silver ,February   2007 .\n[6] K.Mittal, \u201cService-Oriented Unified Process (SOUP)\u201d, 2006,\nAvailable at  http://www.kunalmittal.com/html/soup.shtml.\n[7] T.Erl, \u201cService-Or iented Architecture: Concepts, Technology, and \nDesign\u201d, Upper Saddle River: Prentice Hall, 2005. \n[8] SUN Microsystems, \u201cSOA RQ methodology - A Pragmatic \nApproach\u201d, Available at http://www.sun.com/products/soa/soa \nmethodology.pdf.\n[9] C.Emig, \u201cDevelopment of SOA-Based Software Systems - and \nEvolutionary Programming Approach\u201d, In Advanced International \nConference on Telecommunications and International Conference on Internet and Web Applications and Services , Guadeloupe, French \nCaribbean, February 2006, pp 182. \n[10] M.P.Papazoglou, W.J.Heuvel, \u201cService-Oriented Design and \nDevelopment Methodology\u201d, International Journal of Web \nEngineering and Technology  (IJWET), 2006, pp.412-442. \n[11] D.Avison, G.Fitzgerald, \u201cWhere Now for Development \nMethodologies?\u201d, Communications of the ACM , 2003, pp. 79-82. \n[12] Object Management Group, Unified Modeling Language \nSpecification (v2.0) , 2004. \n[13] [13] K.Beck, \u201cManifesto for Agile Software Development\u201d, Available \nat http://www.agilemanifesto.org.\n[14] U.Frank, \u201cA Comparison of Two Outstanding Methodologies for \nObject-Oriented Design\u201d, GMD-Res earch Report, no.779, Sankt \nAugustin 1993, Available at: www.uni-koblenz.de/ \niwi/publicfiles/PublikationenFrank/RumbaughBooch.pdf.\n124\n119\n129\n\n[15] R.Ramsin, \u201cEvaluation of Object-O riented Software Development \nMethodologies\u201d, MS.c. Thesis, Sharif University, Iran, 1994, pp 13-\n36. \n[16] R.Ramsin, \u201cEvaluation of Object-O riented Software Development \nMethodologies\u201d, In  Proceedings of the 1st Computer Society of Iran \nComputer Conference (CSICC\u201995),  1995, Iran,  pp.40-50 . \n[17] R.Ramsin, \u201cThe Engineering of an Object-Oriented Software \nDevelopment  Methodology\u201d ,Ph.D. Thesis, University of York, UK, \n2006\n[18] M. Taromirad, R. Ramsin, \u201cAn Appraisal of Existing Evaluation \nFrameworks for Agile Methodologies\u201d, In Proceedings of the 15th \nIEEE International Conference and Workshop on the Engineering of \nComputer Based Systems (ECBS\u201908) , Northern Ireland, 2008, pp. \n418-427. \n[19] M.Taromirad, R.Ramsin, \u201cCEFAM: Comprehensive Evaluation \nFramework for Agile Methodologies\u201d, In Proceedings of the 32nd \nAnnual IEEE Software Engineering Workshop (SEW\u201908) , 2008, pp. \n195-204 \n[20] A.Sturm, O.Shehory, \u201cA Framework for Evaluating Agent-Oriented \nMethodologies\u201d,  In Proceedings of the 5th International Bi-\nConference Workshop on Agent-Oriented  Information Systems , 2003, \npp 94-109 \n[21] P.Cuesta, A.Gomez, J.Gonzalez, F.Rodriguez, \u201cA  Framework for \nEvaluation of  Agent Oriented Methodologies\u201d, In Proceedings of The \nConference of the Spanish  Association for Artificial Intelligence \n(CAEPIA) , Spain, 2003 \n[22] B.Kitchenham,   S.Linkman, D.Law, \u201cDESMET: A Methodology for \nEvaluating Software Engineering Methods and Tools\u201d, Computing\nand Contrological Engineering Journal , 1997, pp.120-126 \n[23] M.Rossi, S.Brinkkemper, \u201cComplexity Metrics for Systems \nDevelopment Methods and Techniques\u201d, Information Systems, \nElsevier, April 1996, pp. 209-227. [24] L.Cernuzzi, G.Rossi, \u201cOn the Evaluation of Agent Oriented \nMethodologies\u201d, In Proc of the OOPSLA 2002 Workshop on Agent-\nOriented Methodologies , November 2002. \n[25] Q.Numi Tran, L.Graham, M.Williams, \u201cA Feature Analysis \nFramework for Evaluating Multi-Agent System Development Methodologies\u201d, 14th International Symposium on Methodologies for \nIntelligent Systems , ISMIS 2003, Maebashi City, Japan, 2003, pp. \n613-617. \n[26] M.Kavis, \u201cOpinion: Top 10 Reasons why People Make SOA Fail\u201d, \nAvailable at: \nhttp://www.computerworld.com/action/article.do?command=viewArti\ncleBasic&articleId=9110387.\n[27] A.Arsanjani, \u201cService-Oriented Modeling and Architecture\u201d, IBM \nCorporation, November 2004, Available at http://www-\n128.ibm.com/developerworks/webservices/library/ws-soa-design1.\n[28] Object Management Group, MDA Guide , OMG Document \nomg/2003-  06-01, Available at: http://www.omg.org/cgi-\nbin/doc?omg/03-06-01. \n[29] S.W.Ambler, \u201cProcess Patterns: Building Large-Scale Systems Using \nObject Technology\u201d, Cambridge Univ ersity Press, Cambridge,1998. \n[30] J.Ralyt\u00e9, S.Brinkkamper, B.Henderson-Sellers, \u201cSituational Method \nEngineering: Fundamentals and Experiences\u201d, In Proceedings of the \nIFIP WG 8.1 Working Conference , Geneva, Switzerland, IFIP \nInternational Federation for Information Processing, vol. 244. \nSpringer, September, Springer, Boston, 2007. \n[31] M. Koskela, M.Rahikainen, T.Wan, \u201cSoftware Development \nMethods: SOA vs. CBD, OO and AOP\u201d, 2007, Available at:\nwww.soberit.hut.fi/T-86/T-\n86.5165/2007/final_koskela_rahikainen_wan.pdf.\n125\n120\n130\n\n",
    "is_processed": true,
    "process_error": null,
    "content_length": 48751,
    "local_pdf_path": "data/pdfs/Criteria Based Evaluation Framework for Service Oriented Methodologies_8b6885a1.pdf"
  },
  "arxiv_542f124b58c0f847c73882fcf182e1a8": {
    "title": "An Empirical Investigation on the Challenges Faced by Women in the Software Industry: A Case Study",
    "url": "http://arxiv.org/pdf/2203.10555v1",
    "source": "arxiv",
    "authors": [
      "Bianca Trinkenreich",
      "Ricardo Britto",
      "Marco Aurelio Gerosa",
      "Igor Steinmacher"
    ],
    "published_date": "2022-03-20T13:56:46+00:00",
    "summary": "Addressing women's under-representation in the software industry, a widely\nrecognized concern, requires attracting as well as retaining more women.\nHearing from women practitioners, particularly those positioned in\nmulti-cultural settings, about their challenges and and adopting their lived\nexperienced solutions can support the design of programs to resolve the\nunder-representation issue.\n  Goal: We investigated the challenges women face in global software\ndevelopment teams, particularly what motivates women to leave their company;\nhow those challenges might break down according to demographics; and strategies\nto mitigate the identified challenges.\n  Method: To achieve this goal, we conducted an exploratory case study in\nEricsson, a global technology company. We surveyed 94 women and employed\nmixed-methods to analyze the data.\n  Results: Our findings reveal that women face socio-cultural challenges,\nincluding work-life balance issues, benevolent and hostile sexism, lack of\nrecognition ...",
    "categories": [
      "cs.SE",
      "cs.HC"
    ],
    "entry_id": "http://arxiv.org/abs/2203.10555v1",
    "meta": {
      "content_type": "academic_paper",
      "is_curated": true,
      "source_quality": 8
    },
    "content_type": "academic_paper",
    "text": "An Empirical Investigation on the Challenges Faced by Women\nin the Software Industry: A Case Study\nBianca Trinkenreich\nNorthern of Arizona University\nFlagstaff, AZ, USA\nbianca_trinkenreich@nau.eduRicardo Britto\nEricsson\nBlekinge Institute of Technology\nKalrksona, Sweden\nricardo.britto@ericsson.com\nMarco A. Gerosa\nNorthern Arizona University\nFlagstaff, AZ, USA\nmarco.gerosa@nau.eduIgor Steinmacher\nUniv. Tecnol\u00f3gica Federal do Paran\u00e1\nBrazil\nigorfs@utfpr.edu.br\nABSTRACT\nContext: Addressing women\u2019s under-representation in the soft-\nware industry, a widely recognized concern, requires attracting as\nwell as retaining more women. Hearing from women practitioners,\nparticularly those positioned in multi-cultural settings, about their\nchallenges and and adopting their lived experienced solutions can\nsupport the design of programs to resolve the under-representation\nissue. Goal: We investigated the challenges women face in global\nsoftware development teams, particularly what motivates women\nto leave their company; how those challenges might break down\naccording to demographics; and strategies to mitigate the identified\nchallenges. Method: To achieve this goal, we conducted an ex-\nploratory case study in Ericsson, a global technology company. We\nsurveyed 94 women and employed mixed-methods to analyze the\ndata. Results: Our findings reveal that women face socio-cultural\nchallenges, including work-life balance issues, benevolent and hos-\ntile sexism, lack of recognition and peer parity, impostor syndrome,\nglass ceiling bias effects, the prove-it-again phenomenon, and the\nmaternal wall. The participants of our research provided different\nsuggestions to address/mitigate the reported challenges, includ-\ning sabbatical policies, flexibility of location and time, parenthood\nsupport, soft skills training for managers, equality of payment and\nopportunities between genders, mentoring and role models to sup-\nport career growth, directives to hire more women, inclusive groups\nand events, women\u2019s empowerment, and recognition for women\u2019s\nsuccess. The framework of challenges and suggestions can inspire\nfurther initiatives both in academia and industry to onboard and\nretain women.\nKEYWORDS\nwomen, diversity, gender, inclusion, software engineering\nPermission to make digital or hard copies of all or part of this work for personal or\nclassroom use is granted without fee provided that copies are not made or distributed\nfor profit or commercial advantage and that copies bear this notice and the full citation\non the first page. Copyrights for components of this work owned by others than ACM\nmust be honored. Abstracting with credit is permitted. To copy otherwise, or republish,\nto post on servers or to redistribute to lists, requires prior specific permission and/or a\nfee. Request permissions from permissions@acm.org.\nICSE-SEIS\u201922, May 21\u201329, 2022, Pittsburgh, PA, USA\n\u00a92022 Association for Computing Machinery.\nACM ISBN 978-1-4503-9227-3/22/05. . . $15.00\nhttps://doi.org/10.1145/3510458.3513018ACM Reference Format:\nBianca Trinkenreich, Ricardo Britto, Marco A. Gerosa, and Igor Steinmacher.\n2022. An Empirical Investigation on the Challenges Faced by Women in\nthe Software Industry: A Case Study. In Software Engineering in Society\n(ICSE-SEIS\u201922), May 21\u201329, 2022, Pittsburgh, PA, USA. ACM, New York, NY,\nUSA, 12 pages. https://doi.org/10.1145/3510458.3513018\nLAY ABSTRACT\nWomen represent less than 24% of employees in software develop-\nment industry and experience various types of prejudice and bias.\nEven in companies that care about Diversity & Inclusion, \u201cuntying\nthe mooring ropes\" of socio-cultural problems is hard. Hearing from\nwomen, especially those working in a multi-cultural organization,\nabout their challenges and adopting their suggestions can be vital\nto design programs and resolve the under-representation issue. In\nthis work we work closely with a large software development or-\nganization which invests and believes in diversity and inclusion.\nWe listened to women and the challenges they face in global soft-\nware development teams of this company and what these women\nsuggest reduce the problems and increase retention. Our research\nshowed that women face work-life balance issues and encounter\ninvisible barriers that prevent them from rising to top positions.\nThey also suffer micro-aggression and sexism, need to show com-\npetence constantly, be supervised in essential tasks, and receive\nless work after becoming mothers. Moreover, women miss having\nmore female colleagues, lack self-confidence and recognition. The\nwomen from the company suggested sabbatical policies, the flexibil-\nity of location and time, parenthood support, soft skills training for\nmanagers, equality of opportunities, role models to support career\ngrowth, directives to hire more women, support groups, and more\ninteraction between women, inclusive groups and events, women\u2019s\nempowerment by publishing their success stories in media and\nrecognizing their achievements. Our results had been shared with\nthe company Human Resources department and management and\nthey considered the diagnosis helpful and will work on actions to\nmitigate the challenges that women still perceive.\n1 INTRODUCTION\nDiverse software teams are more likely to understand user needs,\ncontributing to a better alignment between the delivered softwarearXiv:2203.10555v1  [cs.SE]  20 Mar 2022\n\nICSE-SEIS\u201922, May 21\u201329, 2022, Pittsburgh, PA, USA Bianca Trinkenreich, Ricardo Britto, Marco A. Gerosa, and Igor Steinmacher\nand its intended customers [ 51]. Diversity further positively af-\nfects productivity by bringing together different perspectives [73]\nand fosters innovation and problem-solving capacity, leading to\na healthier work environment [ 19]. However, women are still un-\nderrepresented in the software industry [ 35]. Reducing the gender\ngap in the software industry requires not only attracting, but also\nretaining women .\nWomen1often face socio-cultural challenges in the software\nindustry and could decide to leave their jobs (or even the software\nindustry) if diversity is not a priority [ 42]. Gender-related incidents\ncan be so severe that they motivate women to leave a project or\ntheir jobs [ 55,72]. Kuechler et al. [ 40] suggest that women drop\nout because their jobs are not aligned to their motivations or due\nto the unappealing and hostile social dynamics in their daily work.\nUnderstanding the reasons behind the decision to step out of a\nproject or role can help create strategies to increase retention.\nChallenges faced by women have been largely investigated in the\nfree and open source software (F/OSS) development context (e.g., [ 5,\n12,13,36,42,53,55,56,58,67,71,72,74]). Although there are a few\nstudies focusing on software companies [ 14,52,54,78], the results\nare still preliminary and more studies are needed to contribute\nto theory building. In this context, theory is built by aggregating\nresults from case studies and related qualitative research by making\ncomparisons, looking for similarities and differences within the\ncollected data, and by examining future questions [41].\nIn this paper, we contribute to this scientific body of knowledge\nby reporting a case study in a multi-cultural global software de-\nvelopment organization from a large company, namely Ericsson,\nwhich is a global private company that has more than 100,000 em-\nployees around the world, and is one of the leading providers of\nInformation and Communication Technology (ICT). One of the\nDiversity & Inclusion business goals of the company is to reach\nat least 25% proportion of women in every suborganization of the\ncompany. However, the software development organization still\nstruggles to attract and retain women and has partnered with ex-\nternal researchers to understand the challenges and strategies from\nthe point of view of the women themselves. As the phenomenon\nunder study is complex because it involves different perspectives\nand disciplines, it is critical to consider how women perceive and\ngive meaning to their social reality.\nTherefore, our goal is to identify the challenges that women face\nin the company, according to them, and investigate the measures\nthat women recommend to mitigate the identified challenges. To\nachieve our goal, we defined the following research questions:\nRQ1: What challenges do women face in software teams?\nRQ2: What are possible actions to mitigate the identified challenges,\nfrom the women\u2019s perspectives?\nTo answer our research questions, we collected data through an\nonline questionnaire that included questions about the challenges\nthat are currently being faced, reasons women would decide to\nleave, and suggestions to increase women\u2019s participation. The ques-\ntionnaire was answered by 94 women from a software development\n1In this study, we use the term \u201cgender\u201d as a socially constructed concept [ 11], where\ngender identification, display, and performance might or might not align with a per-\nson\u2019s sex assigned at birth. To reflect this social concept of gender, we use the term\n\u201cwomen\u201d and \u201cmen\u201d as a shorthand for people who self-identify as such.suborganization of Ericsson. The novelty of the work includes con-\nsidering a multi-cultural global software development organization\nfrom a large IT company, breaking down the challenges according\nto demographics, identifying challenges that push women out of\nthe company, and connecting challenges to potential strategies to\nattract and retain women from the point of view of the women\nthemselves, who are on the front lines of the problem.\nWe introduce our research design in Section 2 and the study\nresults in Section 3. Section 4 discusses the results and implications\nof our results, followed by related work in Section 5, limitations,\nand conclusions in Sections 6 and 7.\n2 RESEARCH DESIGN\nTo answer our research questions, we conducted an exploratory\ncase study [ 62] via a questionnaire administered to women from\none of the software development suborganizations of Ericsson. In\nthis section, we describe the case and the phases of planning, data\ncollection, and analysis.\n2.1 The Case and Unit of Analysis\nThe case and unit of analysis is one of Ericsson\u2019s software devel-\nopment organizations. Ericsson is a global and large company that\ndevelops telecommunications-related products. It has more than\n100,000 employees who are geographically distributed in several\ncountries, including India, Sweden, Canada, USA, Poland, Brazil,\nand Germany.\nTo diagnose how the company is doing in terms of gender di-\nversity, every year, Ericsson2publishes a diversity report with the\npercentage of employees who identify themselves as women3. The\ncompany has a goal to achieve at least 25% of women as employ-\nees in all suborganizations. This percentage was achieved for the\nwhole company in 2020, but not in a consistent way in every sub-\norganization. One of the software development organizations still\ndominated by men (the name of which is omitted for confidentially\nreasons) decided to conduct a systematic research to understand\nthe viewpoint of the women who currently work at the company,\nin order to plan informed and bottom-up actions to mitigate the re-\nported challenges. The company is interested in understanding the\nchallenges women report as well as their suggestions to improve\nthe current situation, as a contemporary phenomenon within its\nreal-life context [ 80]. This case study was collaboratively conducted\nby one researcher from the company and three outsiders.\n2.2 Data Collection\nWe administered an online questionnaire4using the Qualtrics tool5\nto employees from the software development suborganization who\nself-identify as women. We opted for a questionnaire instead of\ninterviews to increase participation and coverage of the research.\nThe questionnaire was designed to understand the state of the prob-\nlem, asking open questions about the challenges faced, the reasons\nthat drove women they know to leave the company, and their sug-\ngestions to retain more women in the company. The demographic\n2http://www.ericsson.com\n3https://www.ericsson.com/en/investors/financial-reports/annual-reports\n4The research protocol was approved by the university institutional review board\n(IRB).\n5http://www.qualtrics.com\n\nAn Empirical Investigation on the Challenges Faced by Women in the Software Industry: A Case Study ICSE-SEIS\u201922, May 21\u201329, 2022, Pittsburgh, PA, USA\nquestions were the last part of the questionnaire, and were chosen\nto help us investigate possible relations between groups. Although\nfamily is universal to all genders, women culturally face a greater\npressure to balance work and family [ 70]. Considering women as\nthe target population of the present study, besides country, age, and\nexperience, we included demographics questions to understand pos-\nsible intersections of the challenges and family status. All questions\nwere optional to increase the response rate by making respondents\nmore comfortable [57]. After proofreading and testing in multiple\nbrowsers and devices, we invited three participants to pilot the\nquestionnaire so we could collect feedback and measure the time\nto answer. No modification of the questionnaire was necessary, and\nwe discarded these initial answers.\nThe managers of the company software teams sent emails to the\nwomen on their teams with the questionnaire link. Every week, the\nfirst author of this paper followed up with the company\u2019s manager\nto check the number of answers and identify sites that needed\nadditional encouragement.\nThe questionnaire was open for answers between June 11 and\nJuly 20, 2021. Our questionnaire received 94 non-blank answers.\nWe report the demographics of the respondents in Table 1. Most\nof the respondents were residents of India (65.6%), less than 35\nyears old (50.0%), married (62.8%), living with children (52.1%),\nhaving more than 10 years of experience in the software industry\n(45.7%) and less than 5 years working in the company (35.1%). A\nbalanced proportion of respondents have and do not have children\nliving with them. The sample mirrors the company\u2019s numbers. In\n2020, the prevalent nationality (55%) of the employees from the\nstudied suborganization was from India. Although we do not have\ndata about the employees\u2019 age of each suborganization, 31% of the\noverall number of employees age less than 35 years old. The other\ndemographics are not measured by the company\u2019s annual report.\nWe filtered our data to consider only valid responses. We manu-\nally inspected the open text questions, looking for blank answers.\nInstead of removing the entire response when one of the questions\nwas blank or did not report challenges or suggestions, we sepa-\nrated data into two datasets of 94 answers each: one dataset for\nchallenges and one dataset for suggestions. Then, we named each\nrespondent from S1 to S94, removed blanks for each dataset (3 re-\nmoved from challenges and 15 for suggestions). Next, we removed\nthe answers that were not informing any challenge or suggestion\n(27 removed from challenges who reported that they do not face\nany challenge and 9 from the suggestions who reported having no\nproposed solutions). The final step was to check potential dupli-\ncate participation, even though the tool used in our investigation\n(Qualtrics) has mechanisms to prevent multiples responses from\nthe same participant. The final challenges\u2019 dataset had 64 answers,\nwhile the suggestions\u2019 dataset had 70 answers.\n2.3 Data Analysis\nTo answer both RQ1 and RQ2, we analyzed the responses to the\nopen questions about challenges, reasons for leaving, and sugges-\ntions to increase women\u2019s participation in the company. The first\nauthor qualitatively analyzed the answers for the open questions by\ninductively applying open coding[ 49] to organize what participants\nreported. We then organized our categories following conceptsTable 1: Personal characteristics of the respondents (n=94)\nDemographics # %\nExperience: \u22645 years in software industry 12 12.8%\nExperience: >5 &<10 years in software industry 21 22.3%\nExperience: \u226510 years in software industry 43 45.7%\nDid not inform 18 19.1%\nTenure: \u22645 years in Ericsson 33 35.1%\nTenure: >5 &<10 years in Ericsson 26 27.7%\nTenure: \u226510 years in Ericsson 24 25.5%\nDid not inform 11 11.7%\nAge: Less than 35 47 50.0%\nAge: 35 to 44 27 28.7%\nAge: 45 to 54 10 10.6%\nDid not inform 10 10.6%\nCountry: India 61 64.9%\nCountry: Brazil 11 11.7%\nCountry: Canada 8 8.5%\nCountry: Others 5 5.3%\nDid not inform 9 9.6%\nMarital Status: Married or domestic partnership 59 62.8%\nMarital Status: Single or divorced 24 25.5%\nDid not inform 11 11.7%\nHave children living with: Yes 49 52.1%\nHave children living with: No 36 38.3%\nDid not inform 9 9.6%\nfrom existent theories, such as sexism (hostile and benevolent) [ 27],\nimpostor syndrome [ 16], maternal wall [ 75], prove-it again [ 7],\nglass ceiling [ 37,64], work-life balance issues [ 28], lack of peer\nparity [ 22], and lack of recognition [ 4]. We built post-formed codes,\nhaving three of the authors conducting card sorting sessions [ 68],\nincluding discussing the codes and categorization until reaching\nconsensus about the the codes and the corresponding literature.\nAfter completing the qualitative analysis, we checked the dis-\ntribution of answers categorized in each challenge. From the 64\nwomen who reported they face some type(s) of challenges, 34 re-\nported challenges related to only one category, 25 to two different\ncategories, 3 to three categories, and 2 women reported challenges\nrelated to four categories. We also used descriptive statistics to sum-\nmarize the responses and their association with the demographics\ndata [77].\nTo analyze how the challenges differ according to individual\ncharacteristics, we segmented our sample based on experience in\nsoftware industry (experienced: \u226510 years of experience vs. less\nexperienced: \u226410 years of experience), tenure or years in com-\npany (more years in company: \u226510 years in company vs. less years\nin company: \u226410 years in company), age(older: \u2265median, 35 years\nold vs. younger: <median, 35 years old), married or not , and lives,\nor not, with children .\n\nICSE-SEIS\u201922, May 21\u201329, 2022, Pittsburgh, PA, USA Bianca Trinkenreich, Ricardo Britto, Marco A. Gerosa, and Igor Steinmacher\nSee supplementary material6for additional details, including the\nanswers to the demographics, the open questions and the qualitative\nanalysis codes.\nNext, we calculated the odds ratio for each challenge and demo-\ngraphic information. We interpreted the results as follows:\n\u2022ifOdds Ratio =1, both groups are equally distributed for\nthe reported challenge.\n\u2022ifOdds Ratio >1, the likelihood for the reported challenge\nis higher for the first group (in our case: experienced, older\nthan 35, married and living with children).\n\u2022ifOdds Ratio <1, the likelihood for the reported challenge\nis higher for the second group (in our case: novices, younger\nthan 35 years, single or divorced, without children).\n3 STUDY RESULTS\nIn this section, we present the results of our investigation, which\nare grouped by research question.\n3.1 RQ1: What challenges do women face in\nsoftware development teams?\nWe found eight challenge categories, as presented in Fig. 1. We\nmarked with an asterisk (*) the challenges reported by at least\none person as a reason to leave the company. Table 2 presents the\nnumber of participants whose responses fit in each category. In the\nfollowing, we present more details about our findings organized by\nchallenge category.\n3.1.1 Work-Life Balance Issues. Our participants reported that be-\nfore the COVID-19 pandemic the company was strict to the\nphysical location and many women left due to facing the \u201ctrail-\ning spouse\" effect [ 10,31], moving to another city or country when\ntheir spouse was relocated.\nAfter the COVID-19 pandemic and suddenly working from home,\nwomen reported facing pressure to work extra hours ,\u201chaving\nno boundary set for working hours\u201d (S24), and having to either attend\nmeetings in different time zones or to learn new knowledge for\nthe work. They also mentioned the consequences for not giving in\nto this pressure: they would be excluded from decisions that are\nmade during the meetings and are perceived by others as \u201clacking\nin teamwork\u201d (S30).\nWhen working extra and long hours, women feel stressed and\nhave trouble disconnecting from work, \u201cimpacting other household\nchores and having hardly any time left to bring some peace to the\nmind\u201d (S49). The lack of well-being support causes high levels\nof stress, which would be one of the reasons to quit.\nBesides the inflexible location, our participants also mentioned\nthat before the COVID-19 they lacked flexible work hours (which\nimproved during the pandemic) and paid sick leave (specific for one\nlocation, for which the local laws do not cover this). These points\nare really important for those who have parenting and caretaking\nresponsibilities, though. Lack of daycare in the office was associated\nwith lack of parental support , which can cause women to leave\nthe company.\n6https://figshare.com/s/d1c3bd386083fa55104a3.1.2 Sexism. The ambivalent sexism theory [ 27] defines sexism\nas a multidimensional construct that includes two sets of attitudes:\nhostile and benevolent. Sexism has typically been conceptualized\nas a reflection of hostility toward women [ 27].Hostile sexism is\nrelated to the classic definition of prejudice [3].\nOur participants from our investigation reported microaggres-\nsions in which their \u201cvoices are suppressed per opposite gender\u201d (S19).\nBesides not being heard during technical discussions, women re-\nceive various diminishing comments, such as that women cannot\nbring the same results as men and that \u201cwomen come to work only\nfor time pass or are not brilliant enough\" (S85). Exposure to such\ndiminishing comments can be a reason to leave.\nBenevolent sexism represents the subjectively positive feelings\ntoward a gender that often bring some sexist antipathy [ 27]. The par-\nticipants reported being \u201cpampered, never been given a hard/straight\nfeedback\u201d (S57) and being included in initiatives only because they\nare women, not because of their skills and capacity.\n3.1.3 Lack of Recognition. Feeling valued or appreciated is part\nof Maslow\u2019s hierarchy of human needs [ 4]. The participants men-\ntioned \u201cNot been recognized by her job\u201d (S63) and that women\u2019s\nresults are usually evaluated as OK, never as excellent (S57),\neven when accomplishing exceptional work. No praises from man-\nagers was considered one of the reasons to leave.\n3.1.4 Lack of Peer Parity. Being surrounded by similar individuals\nto which to compare oneself, or identifying with at least one other\npeer in the team, is known as peer parity [22].\nThe participants mentioned an \u201c[im]balance in men:women ratio\u201d\n(S37) and two consequences: (i) impact on their social capital, as they\nconsidered it \u201chard to collaborate socially\u201d (S55), \u201c[be]cause\nmen socialize in a different way than women do\u201d (S12); and (ii) impact\non developing their self-confidence due to lack of role models ,\nas they \u201clack [] strong women leaders as mentors\u201d (S14).\n3.1.5 Impostor Syndrome. Impostor Syndrome (also known as im-\npostor phenomenon, fraud syndrome, perceived fraudulence, or\nimpostor experience), describes an experience of individuals who,\ndespite their objective successes, struggle to internalize their ac-\ncomplishments, feel persistent self-doubt, and being exposed as a\nfraud or impostor [16].\nOur participants mentioned as a challenge and reason to leave sit-\nuations in which women personalize failures and \u201cfeel ashamed\nand inferior more than men and they tend to escape it by leaving\n[the company], but always masked as personal reasons\u201d (S6).\n3.1.6 Glass Ceiling. describes a corporate world phenomenon in\nwhich minorities\u2019 access to the top-management positions is blocked\nby tradition or culture [ 37], as an invisible structural barrier that\nprevent minorities from career advancement [64].\nTwo reasons to leave reported by the participants included the\nperception of pay ineqality between genders andinferior ca-\nreer growth opportunities for women. For the former, S30 stated\nthat \u201cwomen employees are paid less compared to male counterparts\u201d ,\nwhile for the last, S69 mentioned that she \u201creach[ed] a stage where\n[they] have nowhere to [climb next] in the ladder\u201d (S69). Still, women\nreported that they feel that they work harder to achieve the same\npositions as men, indicating a possible lack of transparency\nabout the ladder criteria , as their ambition is discouraged,\n\nAn Empirical Investigation on the Challenges Faced by Women in the Software Industry: A Case Study ICSE-SEIS\u201922, May 21\u201329, 2022, Pittsburgh, PA, USA\nTable 2: Representative examples of answers to the challenges\u2019 open question, number and percentage of women whose answer\nwas coded for each category. In parenthesis the number of women who reported that challenge as a reason to leave.\nChallenge Representative examples #% (n=64)\nWork-Life\nBalance Issues\u201cTo be successful, any professional is expected to work super-hard and go far and beyond,\nworking overtime, constantly learn new things and this takes a lot of energy, but after my\nworking hours end, my home, my second and more important work starts... \" (S40)35 (25) 54.7%\nSexism\u201cIn technical discussions, people feel that women cannot do it better so they make\ncomments which are makes you uncomfortable\" (S23)14 (3) 21.9%\nLack of Recognition \u201cLack of praise\" (S38). Not been recognized by the job\" (S63) 2 (2) 3.1%\nLack of Peer Parity\u201cWorking in a place where there is a dominant number of male colleagues, inclusion in all\ndiscussions might not be uniform across\" (S43)9 14.1%\nImpostor Syndrome\u201cWhen it comes to failure, the failures are easily owned and personalised by a women\nand they on resign their own compared to men\" (S57)2 (1) 3.1%\nGlass Ceiling\u201cGlass roof, only a few women as leaders\" (S38). \u201cWhen women try to achieve more things\nthey are called ambitious in a negative way. Whereas men are expected to. \" (S11)26 (19) 40.6%\nProve-it Again\u201cAs a woman I need to work harder to achieve the same as a man. I need to show\ncompetence and to be 100% right all the time. \" (S25)9 14.1%\nMaternal Wall\u201cSome people treat you differently because you just had a kid, giving you less work [..]\nand framing you inside a box\" (S79).4 (1) 6.3%\nThe total per challenge is not the sum of the respondents since the participants often provided an answer that was categorized into more than one challenge .\nStrict to the physical location (*)\nGlass Ceiling (*)\nWork-Life Balance\n Issues (*)\nProve-it Again\nLack of  \nRecognition (*)\nMaternal W all (*)\nPressure to stretch  in extra hours  Lack of parental support (*)\nWomen are supervised in important tasks\nLack of transparency about the laddering criteriaWomen results are evaluated as OK, never as excelent  Men lift only their counterparts to top layerNo praises (*)\nInferior career growth opportunities (*)Pay inequality between genders (*)\nImpostor\nSyndrome (*)Moms requested to step down after maternity leave (*)  \nWomen personalize failures, feel ashamed and inferior (*)Lack of well-being support (*)\nBenevolent Sexism  Hostile Sexism (*)\nSexism (*)Moms receive less responsibilities because have kids  \nNeed to show competence all the time  \nLack of role models  \nLack of Peer ParityHard to have collaborate socially\nFigure 1: The challenges reported by women who participated in our study. Those marked with an asterisk (*) were reported\nas a challenge that ultimately can lead women to leave the company.\nwhile \u201ccorporate politics are played by men\u201d (S21) and men lift\nonly their counterparts to top layer .\n3.1.7 Prove-it Again. effect is a bias that occurs when a member\nof a group that does not align with stereotypes is measured at a\nstricter standard than those who do align with the stereotypes\nand, consequently, has to constantly provide more evidence to\ndemonstrate competence [7].The participants mentioned that women need to show com-\npetence all the time :\u201cput extra effort to be heard when there is\ncompetition between men\u201d (S84) and having \u201c no room to slip [up]\"\n(S41). Lastly, women feel they need to prove themselves when re-\nceiving an important task, [as] they are supervised by another\nperson to guarantee they do it correctly (S65).\n\nICSE-SEIS\u201922, May 21\u201329, 2022, Pittsburgh, PA, USA Bianca Trinkenreich, Ricardo Britto, Marco A. Gerosa, and Igor Steinmacher\n3.1.8 Maternal Wall. describes the experience of mothers whose\ncoworkers perceive and judge them as having made one of two\nchoices: either they continue to work and neglect their family, mak-\ning the mother less likable, or the mother prioritizes family over\nwork, making them less reliable in the workplace [ 75]. Our par-\nticipants reported that women who are mothers receive [fewer]\nresponsibilities because they have kids , as they are believed to\nnot be able to handle much work. One of them reported \u201csurprising\ncolleagues that [they] are able to handle it all\u201d (S7). In addition, one\nof the reasons that cause women to leave is that \u201cwhen returning\nfrom maternity leave, not enough support is provided or generally\nthe woman is asked to step down from the role \u201d(S38).\n3.1.9 A segmented look at the challenges perceived by women. In\naddition to the categorization described above, we took a deeper\nlook into the results to understand the prevailing reports of chal-\nlenges among our respondents and across different demographics.\nWe avoid using the numerical prevalence of evidence to indicate the\nimportance or criticality of any challenge. However, when present-\ning the results, we use supplementary and corroborative counting\nof the responses to triangulate the qualitative analysis [ 29]. The\nmajority of respondents reported challenges related to Work-Life\nBalance Issues (54.7%), Glass Ceiling (40.6%), and Sexism (21.9%).\nFigure 2 illustrates those three categories of challenges for each\ndemographic.\nWe used the most representative demographic subgroup (see\nTable 1) to present the percentages, which reflect the number of par-\nticipants who mentioned any difficulties that were classified under\neach category of challenge. Most of the respondents who reported\nchallenges related to work-life balance issues are married and\nlive in India, with proportions higher than 80%. No demographic\nwas so prevalent for glass ceiling and sexism, demonstrating that\nboth challenges were reported by a broader subgroup.\nWe also calculated the odds ratio for each of the three most\nreported challenges, considering the demographics detailed in Sec-\ntion 2.3. Table 3 presents the results of the odds ratio for each\ncategory of challenge. According to our sample, women with more\nexperience in the software industry have higher odds (3.62x) than\nthose with less experience to report challenges related to work-life\nbalance issues . The odds that married women report challenges\nrelated to work-life balance issues are 5.08x higher than for\nsingle or divorced women.\nWhen analyzing the intersectionality of the demographics, we\nlearned that all of the 20 women who have more than 10 years of\nexperience in the software industry and reported challenges that\nwere categorized into work-life balance issues are married or\nlive in a domestic relationship with children. Regarding the glass\nceiling , we also observed that more than the half of the women who\nreported this challenge have more than 10 years of experience in\nthe software industry, are married or live in a domestic relationship,\nand live with children.\nWe found eight categories of challenges, with the most men-\ntioned ones categorized into work-life balance issues, glass ceil-\ning, and sexism. Women from our sample with more experience\nin the software industry and who were married were more likely\nto report challenges related to work-life balance issues.3.2 RQ2: What are possible actions to mitigate\nthe identified challenges, from the\nwomen\u2019s perspectives?\nWe now present the actions recommended by the participants to\nhelp mitigate the challenges and retain more women in the com-\npany. Our analysis revealed six categories that explain the actions\nsuggested by women, which we present in Fig. 3.\nTable 4 presents the number of participants whose responses fit\nin each category. Most of the respondents suggested the company\nHire More Women (35.7%), Support Work-Life Balance (30.0%),\nandEmbrace Eqality (28.6%). We used the most representative\ndemographic subgroup (see Table 1) to present the percentages,\nwhich reflect the number of participants who mentioned any diffi-\nculties that were classified under each category of suggestion. In\nthe following, we present our findings organized by category.\n3.2.1 Embrace Equality. Using the definition provided by UNESCO:\n\u201cGender equality exists when all genders enjoy the same status and\nhave equal conditions, treatment, and opportunities for realizing\ntheir full potential, human rights and for contributing to and benefit-\ning from economic, social, cultural and political development. \u201d [ 65].\nIn terms of cultural improvements, the participants suggested\nthe company train all managers in soft skills to have more\nempathy and avoid burnout in their teams, so they can also\nrespect and give voice to women .\nIn terms of process improvements, participants called for more\nequality in terms of payment, opportunities, and challenges. Pro-\nviding \u201cequal payment between genders\u201d (S28), \u201cequal opportunities\nwithout considering whether it is a women who is applying\u201d (S88),\nand\u201cgiving [women] equal challenges like [those] given to the male\nemployees which allow them to venture into more of learning and\nbecome confident\u201d (S54).\nFinally, our participants asked to \u201cnot allocate women only\nin procedural tasks , but include [them] in projects in which they\nfeel [they are a] part [of the team], responsible and that can challenge\ntheir skills\u201d (S62). This can give them equal opportunities and break\nthe glass ceiling.\n3.2.2 Support Women\u2019s Career Growth. To break the glass ceiling,\nthe participants mentioned the need to encourage women to\nadvance in their career ,\u201cmoving ahead in other streams apart\nfrom people management roles as well and having more women in\ntechnical leadership roles where very few women seem to step in\u201d\n(S30).\nMentoring can \u201chelp younger talents to identify themselves and\ngive them confidence and more prospects of continuing their career in\nthe company\u201d (S65). Prepare women to advance in career laddering\nbymentoring by other women who are role models , which can\nhappen during \u201cprograms for women in leadership roles\u201d ,\u201cshowing\nthem how to grow, by teaching the skills that will help them get\nrecognized in the crowd and make her feel valued\u201d (S42).\n3.2.3 Hire More Women. To hire more women, our participants\nsuggested changes to the job opportunities the company offers and\nto the recruitment process, and to invest in marketing \u02d9Regarding\n\nAn Empirical Investigation on the Challenges Faced by Women in the Software Industry: A Case Study ICSE-SEIS\u201922, May 21\u201329, 2022, Pittsburgh, PA, USA\nTable 3: Odds ratios per personal characteristic\nMore Experienced\nvs. Less ExperiencedMore Years in Company\nvs. Less Years in CompanyOlder vs.\nYoungerMarried\nvs. SingleChild vs.\nno child\nWork-Life Balance Issues 3.17** 1.09 2.51 5.08** 3.29\nGlass Ceiling 0.48 1.29 0.38 0.76 1.46\nSexism 0.46 0.34 0.47 0.37 2.13\nSignificance codes: * \ud835\udc5d<0.10, **\ud835\udc5d<0.05***\ud835\udc5d<0.01.\nNote: Odds ratio >1 means that the first segment has greater chances of reporting the challenge than the second. Ratio <1 means the opposite. The challenges were coded from the open question.\nGlass Ceiling (*)\nWork-Life Balance\n Issues (*)\n Sexism (*)\nLive with  \nchildren  \n71.4%  \n(25 out of 35)  54.7% (35 out of 64)\nMarried or in a\ndomestic relationship\n82.9%\n(29 out of 35)\n> 10 years of experience\n in the software industry\n57.1%\n(20 out of 35)\nage < 35  \nyears old  \n57.1%  \n(20 out of 35)\nLive with  \nchildren  \n69.2%  \n(18 out of 26)  40.6% (26 out of 64)\nMarried or in a\ndomestic relationship\n73.1%\n(19 out of 26)\n> 10 years of experience\n in the software industry\n73.1%\n(19 out of 26)\nage < 35  \nyears old  \n34.6%  \n(9 out of 26)\nLive with  \nchildren  \n50.0%  \n(7 out of 14)  21.9% (14 out of 64)\nMarried or in a\ndomestic relationship\n64.3%\n(9 out of 14)\n> 10 years of experience\n in the software industry\n57.1%\n(8 out of 14)\nage < 35  \nyears old  \n35.7%  \n(5 out of 14)\n5-10 years  \nin company  \n42.9%  \n(15 out of 35)\n5-10 years  \nin Ericsson  \n46.2%  \n(12 out of 26)\n5-10 years  \nin Ericsson  \n35.7%  \n(5 out of 14)\nFigure 2: Subgroup analysis of the top three categories of challenges. The opacity of the icons represents the percentage of each\ncategory of challenge. Darker means a higher and lighter a lower percentage. The percentage below each challenge represents\nthe number of respondents who reported that challenge. Some respondents provided answers about challenges that accounted\nfor more than one category.\nTable 4: Representative examples of answers to the suggestions\u2019 open question, number and percentage of women whose\nanswer were coded for each category\nSuggestion Representative examples #% (n=70)\nEmbrace Equality\u2018Speaking gender-diversity alone will not be suffice, it should also be reflected in the equal payouts\nof deserving female candidates\" (S28)20 28.6%\nSupport Women\u2019s\nCareer Growth\u201cPromoting women to senior jobs and leadership would help younger talents to identify\nthemselves with the company, giving them confidence and more prospects of continuing their\ncareer in the company\" (S65)14 20.0%\nHire More\nWomen\u201cActive search for female talents\" (S39) Conduct women-only drives to hire fresh talent from girls\ncolleges. \" (S59) \u201cPublicize openings in workshops that are focused on women in market\" (S63)25 35.7%\nPromote Women\u2019s\nGroups and Events\nWomen\u201cVirtual meetings, debates.. \" (S66) \u201cdiversity events, so minorities to feel more valued. \" (S40) 3 4.3%\nEmpower Women\u201cBe more active on social media and do external open talks with woman from Ericsson talking\nabout their work. \" (S10) \u201cDeserving women should be recognized and rewarded\" (S28)7 10.0%\nSupport\nWork-Life Balance\u2018Flexible work hours, and to focus on ensuring work-life balance. Workaholics tend to breach the\nlatter, not just their own, but the team\u2019s too in a collaborative environment. \" (S43)\n\u2018Enable women taking a break from career due to motherhood to return to the workforce. That is\nwhere we loose them. \" (S2)21 30.0%\nThe total per suggestion of improvement is not the sum of the respondents since the participants often provided an answer that was categorized into more than one suggestion .\nthe job opportunities, they suggest the company make them at-\ntractive to women\u2019s needs , create more part-time positions, and\nreserve positions prioritized for internal candidates and women.Regarding the action related to change to the recruitment\nprocess , besides having more women as recruiters , the sugges-\ntions included transparency about the required skills, advertising\n\nICSE-SEIS\u201922, May 21\u201329, 2022, Pittsburgh, PA, USA Bianca Trinkenreich, Ricardo Britto, Marco A. Gerosa, and Igor Steinmacher\nEmpower womenHave more women in (technical) leadership\nSupport work-life\nbalanceDiscourage extra hours\nDo not allocate women only in procedural tasks\nEncourage women to advance in careerEnsure equal payment, opportunities and challenges\nEmbrace equality\nMentoring by other women who are role modelsTrain all managers on soft skills to have more empathy and avoid burnout\nSupport women's  \ncareer growth\nPromote women's\ngroups and eventsPromote interaction between womenPublish women's success in social media and external events\nRecognize and reward women's achievements\nInvest in programs to attract girls to STEMHave more women recruiting for open positionsRespect and give voice to womenImplement sabbatical policies\nArrange women's support groupsParenthood support  Improve flexibility of location and time  \nMake the job opportunities attractive to women's needs\nChange the recruitment process and marketing\nGlass Ceiling (*)\nWork-Life Balance\n Issues (*)\nProve-it Again\nLack of  \nRecognition (*)\nMaternal W all (*)\nImpostor\nSyndrome (*)\nSexism (*)\nLack of Peer Parity\nHire more women\nFigure 3: Strategies suggested by women for the company to increase women in software development teams\njob openings to women\u2019s groups and events, and raising awareness\nabout how the company supports women\u2019s growth. Finally, the sug-\ngestions included base-level actions like investing in programs\nto attract girls to STEM , and being \u201cactive in the social media\nthat are accessed by the audience (e.g., Snap/Instagram)\u201d (S90) so\nthey would be \u201csecuring more talent women to join\u201d (S38) and \u201cfrom\na fresher level\u201d (S58).\n3.2.4 Promote Women\u2019s Groups and Events. Considering that many\nteams still have only a few women, our participants mentioned that\nthe lack of parity can be mitigated by having women\u2019s support\ngroups and events for \u201cinteraction between women from dif-\nferent departments \u201d(S81). The events were suggested to target\nnot only women, but \u201cto celebrate differences and diversity (gender,\ncultural, age), so that minorities feel more valued\u201d (S40).\n3.2.5 Empower Women. Empowerment is a strong strategy to fight\nthe impostor syndrome [ 17] and one of the strategies to foster it\nis recognition [ 44]. The study participants recommended recog-\nnition and achievements\u2019 rewards . Moreover, since women\u2019s\nempowerment refers to enhancement of their power and position\nin society, some participants suggested that \u201csharing the stories of\n[the company\u2019s] women can encourage and motivate women em-\nployees in achieving the same\u201d (S49). Morever, empowerment could\nbe achieved by \u201cpublishing women\u2019s success stories in social\nmedia\u201d (S47) and external events .\n3.2.6 Support Work-Life Balance. Sabbaticals are paid leaves for\npersonal and professional development reasons [ 50] to promote\nwell-being, and are also beneficial for the company, as they increase\nfuture productivity [ 18]. The participants suggested to implement\nsabbatical policies so they can \u201ctake a break from [their] career\u201d\n(S2) to rest, dedicate some time to their family, and acquire new\nknowledge.\nAnother suggestion was to \u201cdiscourage extra hours , as the\nworkaholics tend to breach the latter, not just their own, but the\nteam\u2019s too in a collaborative environment\u201d (S43).\nMaternity leaves usually relate to each country\u2019s law. Some\ncountries mandate a long maternity leave, while others mandate a\nshorter one [ 25]. The participants protested that \u201cmaternity leaves\nshould not be considered an impediment for a woman to grow\u201d (S54)and asked for the company to assist maternity by implementing\nown rules to extend the paid leave to 1 year, even \u201cbeyond local\nlaws of the country\u201d (S22).\nParticipants called for actions to embrace equality and help\nreduce the sexist culture inside the company, and to mitigate\nthe biases that create maternity wall and prove-it-again effects.\nInitiatives to support women\u2019s growth were suggested to start\nbreaking the glass ceiling. Hiring more women and organizing\nwomen\u2019s groups could foster peer parity, and women\u2019s empower-\nment could reduce impostor syndrome and provide recognition.\nSabbaticals and discouraging long work hours were mentioned\nas ways to improve the work-life balance.\n4 DISCUSSION\nIn this section, we present a more in-depth discussion of our results\nin the context of the literature.\nWork-Life Balance Issues faced by mothers. Work and family\nare the two most important domains in a person\u2019s life and their in-\nterface has been the object of study for researchers worldwide [ 70].\nAs women assume the role of working professional in addition to\ntheir traditional role of homemaker, they are under great pressure\nto balance their work and personal lives [ 70]. The societal role\nexpectations, women\u2019s career ambitions, and the nature of the IT\nindustry challenges the way women manage their professional and\npersonal lives [ 30]. The COVID-19 pandemic and the need to work\nfrom home cast new light on these issues. While it brought more\nflexibility to many workers (which is the case of the company stud-\nied), it also brought new challenges [ 23,60]. For a great share of the\npopulation, it became hard to separate personal and professional\nlife. Women felt this more than men, given the aforementioned\nsocietal expectations[43].\nWork-life balance is a challenge that happens in and beyond the\nIT industry. In Japan, work-life balance is a general challenge, and\nthe low numbers of women in medicine reflect the societal belief\nthat careers and motherhood do not mix [ 61]. In contrast, Scandi-\nnavia has similar numbers of men and women physicians, which\nhas coincided with the emergence of progressive work\u2013life policies,\n\nAn Empirical Investigation on the Challenges Faced by Women in the Software Industry: A Case Study ICSE-SEIS\u201922, May 21\u201329, 2022, Pittsburgh, PA, USA\nthe belief that women can combine motherhood and employment,\nand changing expectations of work-life balance. This shows that it\nis possible and that the mindset in the software industry needs to\nchange.\nThe lack of parent support is one of the major challenges that\nIndian companies within the IT sector have been trying to navigate\nover the past decade to ensure a gender inclusive workplace [ 59].\nThis is reinforced by our work,in which women provided sugges-\ntions on how to improve parental policies to support families\nand mitigate this challenge, as we showed is Section 3.2. Sponsor-\ning child care, preferentially in the office and specially for young\nchildren, providing adequate maternity leave beyond the relevant\ncountry\u2019s laws, and also providing more flexibility in work hours\nand location were some of the suggestions for the company to take\nin order to mitigate the challenges of work-life balance issues re-\nlated to motherhood. This is harder to implement in many cases due\nto the countries\u2019 legislation and the local culture, which influence\nhow organizational policies are defined.\nPrepare women to break the glass ceiling. Analogous to the\nIT industry, women\u2019s barriers in the medical profession and their\nability to rise to leadership positions are also influenced by social\nand cultural context [ 61]. Similar to software teams, where women\nare instrumental to reducing community smells [ 15], in interna-\ntional relations the collaboration between women delegates and\nwomen civil society groups positively impacts and brings more\ndurable peace when negotiating peace agreements [ 39]. By analyz-\ning the career trajectories of women executives across a variety of\nsectors, Glass and Cook [ 26] concluded that while attaining promo-\ntion to leadership is not easy, serving in a high position can be even\nmore challenging. Although women can be more likely than men\nto be empowered to high-risk leadership positions, they often lack\nthe support or authority to accomplish their strategic goals. As a\nresult, women leaders often experience shorter tenures compared\nto their peers who are men [26].\nThe respondents provided suggestions to support their career\ngrowth to mitigate this challenge, including having women to\ninspire, encourage and mentor other women, as we showed is Sec-\ntion 3.2. Providing training for mentors on topics such as speaking\nup on behalf of women who are being disrespected in meetings,\nmanaging bias in the workplace, and raising awareness of micro-\naggressions at work are some examples of what should be included\nas part of standard training and preparation for mentors [ 24]. The\nmentoring program can start by having a different woman leader\neach month discuss her career trajectory and the benefits and chal-\nlenges of holding her job. Women could share their techniques\nfor managing time, balancing family and career demands, mak-\ning themselves heard by men, and highlighting how they learn\nnew skills on a regular basis [ 79]. Besides joining ongoing support\ngroups, women can be assigned to formal mentors for one-on-one\nregular meetings [38].\nCombining synergistic suggestions. One option for compa-\nnies looking to improve women\u2019s participation is to combine strate-\ngies that are synergistic. The company can start by implementing\nsimple, but structured actions combining ideas from more than one\nstrategy. For example, by publishing success stories of women on\nmedia, the company can empower women and also attract and hire\nmore women . Another action that combines synergistic strategiesis toarrange women-only groups and analyze messages to imple-\nment feasible changes to problems that are being actively discussed\nand could potentially cause women to leave, as when women report\nfacing hostile sexism. The literature reports that women experi-\nence computing environments differently due to sexism and racism,\nboth historically and as part of the current culture [ 6,45,46,69],\npotentially leading them to feel unwelcome and lacking of sense of\nbelonging [63], and ultimately to leave [21].\nSome problems come from beyond the company gates. Even\nin a company like Ericsson, which cares about Diversity & Inclusion,\n\u201cuntying the mooring ropes\" of socio-cultural problems is difficult.\nHistorically, the social differences influenced by gender roles (i.e.,\nthe roles that men and women are expected to occupy based on\ntheir sex) may be amplified because of the gendered division of\nhousework and child care tasks, especially for mothers of young\nchildren. Impostor syndrome [ 5,42,78], Sexism [ 12,14,53,67],\nLack of Peer Parity [ 13,56], Prove-it-Again [ 36], Glass Ceiling [ 14]\nand Work-Life Balance issues [ 42,43] were challenges reported by\nwomen from the present study and also reported by both women in\nother software development contexts and in F/OSS. Some problems\nsurpass the organization and are related to the local culture of the\nemployees and managers. There are problems that go beyond the\ncompany\u2019s gates and bump into the society, which many times\ncontributes to this cultural legacy. One example is the \u201ctrailing\nspouse\", when a person who follows his or her life partner to an-\nother city because of a work assignment [ 10,31]. Moreover, during\nthe COVID-19 pandemic, a longer \u201cdouble-shift\u201d of paid and unpaid\nwork in a context of school closures and limited availability of care\nservices have contributed to an overall increase in stress, anxiety\naround job insecurity, and difficulty in maintaining work-life bal-\nance among women with children [ 1]. However, there is also space\nfor improvement in the organization, and Ericsson is committed\nto implementing the suggested changes to mitigate the challenges\nfaced by its women employees.\n4.1 Implications to the company\nWe presented the results to the managers of the studied suborga-\nnization and to the managers of Human Resources department.\nThe feedback was very positive regarding the usefulness of the\nresearch. Managers considered the results helpful for the company\nto understand the current situation and to decide about actions can\nmitigate the challenges that women currently face and avoid them\nleaving the company. For the suggestions that are already in place,\nsuch as publishing successful stories of women and support groups,\nthe company plans to expand and raise awareness to the employees.\nSexism is considered an unacceptable behavior to Ericsson. The\nmanagers of the studied suborganization already started to have\ncollective meetings with the team to spread the message and remind\nthat sexism is not tolerated by the company. Following, the com-\npany is planning recurrent meetings to plan strategies that address\nthe suggestions provided by the participants. In addition, Ericsson\nplans to raise awareness about the solutions that already exist (and\nmaybe women are not aware of) and additional actions that can\ncomplement the suggestions to mitigate the reported challenges.\n\nICSE-SEIS\u201922, May 21\u201329, 2022, Pittsburgh, PA, USA Bianca Trinkenreich, Ricardo Britto, Marco A. Gerosa, and Igor Steinmacher\n5 RELATED WORK\nAlthough diversity is a multidimensional concept that refers to the\nvariety of representations that exist within a group [ 2,76], gender\n(with a focus on women), is the most explored aspect of diversity in\nsoftware engineering literature [ 47,66]. The prevalence of gender\nas the most studied diversity aspect can be explained by the fact\nthat the technology professions are known to be male dominated,\ndespite the fact that programming was originally seen as a female\noccupation [ 8,9,20,34]. According to a longitudinal study that\nevaluated 50 years of data and the evolution of code contributions\nsince 1970, Zacchiroli [81] showed that woman developers\u2019 con-\ntributions remain low when compared to those of men. Although\nthe study found that men have always authored more open source\ncode than women, the gap has begun to narrow and women are\nslowly gaining space.\nThe biases and challenges faced by women in software develop-\nment teams have been investigated in different industry cases [ 14,\n52,54,78]. The Finish women from Wolff et al . [78] \u2019s study reported\nlack of self-efficacy, which is a possible predecessor of impostor\nsyndrome , also found in our study. Also similar to our results, the\nBrazilian women from Canedo et al . [14] \u2019s study also reported hos-\ntile sexism , including discrimination and bias, and benevolent\nsexism , when women do not receive the more complex tasks, and\nglass ceiling , as only few women perform a leadership role in their\nteam. Another study with Brazilian women during the COVID-19\npandemic [ 43] revealed that women faced even more work-life\nbalance issues , lacking support with housework and child care re-\nsponsibilities. As opposed to the glass ceiling reported by Canedo\net al. [14] \u2019s study and our results, the main challenge reported\nby the Zimbabwean women from [ 52]\u2019s study was lack of digital\nexposure and career guidance from young age. So far, the studies\npoint at generic aspects, focusing on understanding a broader, more\ncomprehensive picture of the challenges faced by women. In our\nwork, we evolve the findings by diagnosing an organization that is\ninvesting in programs to attract and retain women.\nWomen who contribute to F/OSS projects have reported some\nof the challenges also reported by women from the present study:\nwork-life balance issues [ 42], impostor syndrome [ 5,42], lack of\npeer parity [ 13,56], prove-it-again [ 36] and sexism [ 12,53,67].\nNon-inclusive communication is faced by F/OSS women in code\nreviews and mailing lists [ 5,55,58], and was reported as an as-\npect of the hostile sexism faced by women in the present study,\nwhich they described taking place during meetings. While in F/OSS\nwomen face bias against contributions when they explicitly iden-\ntify as women[ 13,71], in our study we found a lack of recognition.\nStereotypes manifest the common expectations about members\nof certain social groups. Both the descriptive (how women are)\nand prescriptive (how women should be) gender stereotypes and\nthe expectations they produce can compromise a woman\u2019s career\nprogress [ 32,33]. In F/OSS projects, women reported facing stereo-\ntyping that box them into specializations despite their manifest\nprotest [ 74] and being treated by men as if they were their mothers,\nasking for advice about how to dress and behave but refusing to\nenter into a technical dialogue [ 53]. While women in our study\nreported also facing stereotypes, for them it was part of the Ma-\nternity Wall and receiving fewer responsibilities because theyhad children. And whereas F/OSS women reported that they faced\nobstacles to finding a mentor, since upon discovering their mentee\u2019s\ngender, men mentors can treat the relationship as a dating opportu-\nnity [53], this was not reported by women from the present study.\n6 THREATS TO VALIDITY\nThere are some limitations related to our research results.\nInternal validity . The characteristics of our sample may have\ninfluenced our results. Although the company has office in several\nlocations, a great part of the responses (42 out of 64) were from\nwomen who live in India. Thus, the challenges and suggestions can\nreflect some of the specific socio-cultural problems and aspirations\nfor women from this country. The most prevalent nationality of\nemployees overall from the studied suborganization is Indian (55%).\nExternal Validity . The results are valid for the studied sub-\norganization of Ericsson and additional research is necessary to\ninvestigate the challenges and suggestions in other contexts.\nSurvival bias . Our results reflect the opinion of current em-\nployees. Therefore, to increase women\u2019s participation by fully un-\nderstanding the reasons they might leave, we acknowledge that\nadditional research is necessary to understand the point of view of\nthe women who left the company. To mitigate this threat, we asked\nthe participants about reasons that prompted a woman they know\nto leave the company.\nRecall bias. As our questions were open-ended, our results\ncould be impacted by either salience bias, where respondents focus\non definitions that are prominent or emotionally striking and not\nnecessarily all the factors that matter; or by memory bias, where\nparticipants answered questions based on what they can first recall.\nHowever, topics that are relevant to the respondent often emerge\nfrom the spontaneous answers.\nData Consistency . Consistency refers to ensuring that the re-\nsults consistently follow from the data and there is no inference\nthat cannot be supported after data analysis [ 48]. The group of\nresearchers performed the qualitative analysis of questionnaire\u2019s\nresponses. We had weekly meetings to discuss and adjust codes\nand categories until reaching agreement. In the meetings, we also\nchecked the consistency of our interpretations. All analysis was\nthoroughly grounded in the data collected and exhaustively dis-\ncussed amongst the whole team. The team includes researchers\nwith extensive experience in qualitative methods.\nTheoretical saturation . A potential limitation in qualitative\nstudies regards reaching theoretical saturation. From participants\nin this study with different backgrounds and perceptions about the\nstudied phenomenon, we received 64 responses for the challenges\nquestion and 70 for the strategies. The participants were diverse in\nterms of experience, tenure, age, family status. Therefore, although\ntheoretical saturation cannot be claimed, we believe that we ob-\ntained a consistent and comprehensive account of the phenomenon\nfor the studied case. After analyzing the 40\ud835\udc61\u210eresponse of challenge\nand the 29\ud835\udc61\u210eresponse of suggestion we did not find any new cate-\ngories, using the existing categories for the following 24 challenges\nand 41 suggestions.\n\n",
    "is_processed": true,
    "process_error": null,
    "content_length": 58741,
    "local_pdf_path": "data/pdfs/An Empirical Investigation on the Challenges Faced by Women in the Software Industry_ A Case Study_f182e1a8.pdf"
  },
  "arxiv_ba71bb70c488d27d52da58237e8b46b6": {
    "title": "A framework to evaluate the viability of robotic process automation for business process activities",
    "url": "http://arxiv.org/pdf/2007.10900v2",
    "source": "arxiv",
    "authors": [
      "Christian Wellmann",
      "Matthias Stierle",
      "Sebastian Dunzer",
      "Martin Matzner"
    ],
    "published_date": "2020-07-21T15:47:25+00:00",
    "summary": "Robotic process automation (RPA) is a technology for centralized automation\nof business processes. RPA automates user interaction with graphical user\ninterfaces, whereby it promises efficiency gains and a reduction of human\nnegligence during process execution. To harness these benefits, organizations\nface the challenge of classifying process activities as viable automation\ncandidates for RPA. Therefore, this work aims to support practitioners in\nevaluating RPA automation candidates. We design a framework that consists of\nthirteen criteria grouped into five perspectives which offer different\nevaluation aspects. These criteria leverage a profound understanding of the\nprocess step. We demonstrate and evaluate the framework by applying it to a\nreal-life data set.",
    "categories": [
      "cs.SE"
    ],
    "entry_id": "http://arxiv.org/abs/2007.10900v2",
    "meta": {
      "content_type": "academic_paper",
      "is_curated": true,
      "source_quality": 8
    },
    "content_type": "academic_paper",
    "text": "arXiv:2007.10900v2  [cs.SE]  9 Sep 2020A framework to evaluate the viability of robotic\nprocess automation for business process\nactivities\nChristian Wellmann1, Matthias Stierle1, Sebastian Dunzer1, and Martin\nMatzner1\nFriedrich-Alexander-Universit\u00a8 at Erlangen-N\u00a8 urnberg, Institute of Information\nSystems, N\u00a8 urnberg, Germany\n{christian.wellmann, matthias.stierle,sebastian.dunze r,\nmartin.matzner }@fau.de\nhttp://is.rw.fau.eu\nAbstract. Robotic process automation (RPA) is a technology for cen-\ntralized automation of business processes. RPA automates u ser interac-\ntion with graphical user interfaces, whereby it promises e\ufb03 ciency gains\nand a reduction of human negligence during process executio n. To har-\nness these bene\ufb01ts, organizations face the challenge of cla ssifying process\nactivities as viable automation candidates for RPA. Theref ore, this work\naims to support practitioners in evaluating RPA automation candidates.\nWe design a framework that consists of thirteen criteria gro uped into\n\ufb01ve perspectives which o\ufb00er di\ufb00erent evaluation aspects. T hese criteria\nleverage a profound understanding of the process step. We de monstrate\nand evaluate the framework by applying it to a real-life data set.\nKeywords: RPA support \u00b7viability assessment \u00b7process activity eval-\nuation\u00b7process characteristics.\nThis is an accepted manuscript for the RPA Forum at theInt. Conference\non Business Process Management (BPM 2020) . The \ufb01nal authenticated version\nis available online at https://doi.org/10.1007/978-3-030-58779-6 14.\n1 Introduction\nThe state of technology is continuously advancing, resulting in shor ter intervals\nto scrutinize whether tasks can be automated or rely on human exe cution [1].\nThe recent rise of robotic process automation (RPA) challenges th is status quo\nonce more and further blurs the boundaries of human computer int eraction [22].\nRPA automates repetitive and monotonous tasks by con\ufb01guring so ftware robots\nto mimic the actions of the user on the presentation layer [2]. Organiz ations are\nhoping for RPA to lead to an increase in time for employees to focus on value-\nadding activities and to cut costs [18] through eliminating time spent in teracting\nwith information systems and data transfer [32]. Furthermore, co mpanies expect\n\n2 C. Wellmann et al.\nRPA to improve the quality of their work, eliminate human negligence an d in-\ncrease reaction time around the clock [9]. Primarily driven by changing market\ndynamics and global competition, companies are forced to cut cost s through the\nimplementation of new technologies like RPA, especially when they prom ise a\nquick and high return on investment [1].\nWhile the bene\ufb01ts for organizations in applying RPA seem evident, the ques-\ntion remains as to why there are currently only few success stories of RPA adop-\ntion.Oneofthebiggestchallengesidenti\ufb01edforasuccessfulRPAim plementation\nis the selection of suitable processes or process activities for RPA [1 3,32,1]. The\nmethods available to date mostly o\ufb00er high-level decision-making sup port with\nthe focus set on pro\ufb01tability rather than assessing the RPA viability of processes\nor tasks [5,22,33].\nThe objective of this work is to o\ufb00er practitioners a process chara cteristic\nevaluation framework including a set of criteria and exemplary evalua tion met-\nrics.TounderstandtheparametersofRPA,thefollowingresearc hquestionneeds\nto be answered:\nWhat are the characteristics of a process activity, or a set o f process activities,\nthat facilitate viable robotic process automation?\nBy answering the question, this work contributes to broadening th e under-\nstanding in the selection of process activities for RPA. Furthermor e, it serves as\na basis for the creation of a framework that examines the process activity from\ndi\ufb00erent perspectives for its suitability for RPA. In addition, the ap plication of\nthe framework highlights challenges when assessing the criteria and opens up\nnew research opportunities.\nThis study is structured as follows: In Section 2, the term robotic p rocess\nautomation is de\ufb01ned and the results of a literature review are pres ented as\na concept matrix. Further, the existing methods for process or p rocess activity\nselection are comparedto derive the similarities and di\ufb00erences. In S ection 3, the\nprocess characteristic evaluation framework is presented. Sect ion 4 outlines the\nevaluation approach, the data set and the pre-processing of the process before\ntheframeworkisappliedandvalidated.Thecontributions,limitations andfuture\nresearch are summarized in Section 5.\n2 Background\n2.1 Robotic Process Automation (RPA)\nWhile the interest in RPA is still steadily increasing [29], there is no well ac -\ncepted de\ufb01nition found in literature. Despite the arguable lack of de \ufb01nition, cer-\ntain characteristics describing the term Robotic Process Automat ion are found\nthroughout the literature.\nRPA incorporates di\ufb00erent tools and methodologies [9,23,27,1] aiming t o au-\ntomate repetitive and structured service tasks that were previo usly performed\nby humans [2,21,1]. This is achieved by the application of software algor ithms\nknown as software robots or bots, which are imitating the execution \ufb02ow of\n\nA framework for RPA viability assessment 3\nhumans on the front-end [2,11,16,24,26,1]. Just as a human user, ro bots can in-\nteract with the user interface through mouse clicks, key board int eractions and\ninterpretation of text and graphics [26], as well as log into multiple app lications\nto extract, process and enter structured or semi-structured data from di\ufb00erent\nsources [33]. RPA usually does not require de\ufb01ned interfaces as the software sits\non top of information systems and accesses applications only throu gh the pre-\nsentation layer [2,35], thus the back-end systems remain unchange d [20,1]. As a\nresult the robots perform activities in a non-invasive manner [16] w ithout the\nneed of application programming interfaces (API) to transfer and process data\n[33].\nDepending on the con\ufb01gurationapproachfor softwarerobots,lit tle tono pro-\ngrammingknowledgeisrequiredtoimplement andmanagetheorchest rationand\nexecutionoftherobotsoftenreferredtoas low-code development [13,16,20,26,25].\nAlthough RPAtypicallyfavorsless complexand cognitivetasks,adva ncesin ma-\nchine learning can extend the range of RPA application in the future [3 ,33].\nIn this work, we de\ufb01ne RPA as an automation technology which perfo rms\nwork on the presentation layer, can be set up by a business user, a nd is managed\non a centralized platform.\n2.2 Process characteristics of automatable activities\nIn order to develop the framework, the question - What are the characteristics\nof a process activity, or a set of process activities, that ar e suitable for robotic\nprocess automation? - must \ufb01rst be answered. To obtain a comprehensive list of\npotential process characteristic evaluation criteria, a literature review following\nthe guidelines proposed by [34] is conducted. For an exhaustive rev iew, sources\nare searched for in the databases Scopus, Google Scholar, and IE EE Xplore Dig-\nital library. The identi\ufb01ed criteria are then compiled, checked for re dundancy\nand listed in a concept matrix (Table 1) that relates the criteria with t he source\narticles and visualizes the acceptance and relevance through the n umber of men-\ntions. In particular, we used the criteria presented by Wanner et a l. [33] as a\nstarting point and extended the list through several iterations.\nIdealcandidateprocessesforautomationmustbestandardized [2,3,4,5,7,9,10,11,12,13,14,15,16,17,19,21,20,22,24,25,26,28,29,30,31,32,33,36 ,37,38].\nTherefore,theprocessortaskneedstobestrictlyde\ufb01nedands tructured[3,15,17,24,33,37].\nAhighdegreeofstandardizationbeforeautomationisnecessaryt oresultinalow\namount of process variations and outcomes [33]. No or low subject ive judgment\nor interpretation skills [7,17,32,37] are required for decision making as the pro-\ncess follows a rule-based \ufb02ow [5,7,13,14,16,19,24,26,29,32,33,37,38]. Well-s uited\ntasks for standardized processes are also mentioned to be munda ne, simple and\nmonotonous [7,9,31].\nIncombinationwithahighdegreeofstandardization,theexecution frequency\nof a process or task has a big impact on the automation potential. In favor of\nRPA suitability, tasks need to be performed repetitively and in high tr ansaction\nvolumes[7,9,10,13,14,15,16,17,19,22,24,25,26,29,31,32,33,37].Besidesthev olume\nof transactions it is mentioned that the transaction of a substant ial amount of\ndata implies an aptitude for RPA [37].\n\n4 C. Wellmann et al.\nFurthermore, the maturity of a process is an indicator as to wheth er it ful\ufb01lls\nfundamental requirements for an automation e\ufb00ort. Maturity de scribes the fre-\nquency of changes to the logical execution \ufb02ow of the process [5,32 ] and further,\nthat the process and its tasks are speci\ufb01ed, predictable, stable a nd measur-\nable [13,15,22,29,32]. Contrary to standardization, the failure rate d escribes the\namount of deviations from the de\ufb01ned process \ufb02ow. Candidate pro cesses suited\nfor RPA show little or no amount of exceptions when tasks are being e xecuted\n[5,10,17,32,33] and do not require human intervention. Additionally, th e ratio\nof process tasks that undergo an unusual process \ufb02ow or inhibit t he structured\n\ufb02ow to completion is limited or zero [5,33].\nArticlesCharacteristics\nStandardization\nFrequency\nNumber of systems\nStructuredness of data\nMaturity\nProneness to human error\nFailure rate\nStability\nValue\nHandover of work\nExecution time\n[10] \u2022\u2022 \u2022\u2022\u2022\n[3] \u2022 \u2022\n[9] \u2022\u2022\u2022 \u2022\n[22] \u2022\u2022 \u2022\n[24] \u2022\u2022 \u2022\u2022\n[26] \u2022\u2022\u2022 \u2022\u2022\n[5] \u2022 \u2022\u2022 \u2022\n[7] \u2022\u2022\u2022\u2022\n[14] \u2022\u2022\u2022\n[15] \u2022\u2022\u2022\u2022\u2022\n[16] \u2022\u2022\u2022 \u2022\n[17] \u2022\u2022\u2022 \u2022\u2022\n[19] \u2022\u2022\u2022\u2022 \u2022\n[25] \u2022\u2022\u2022\u2022\n[29] \u2022\u2022\u2022\u2022\u2022\u2022 \u2022\n[31] \u2022\u2022\u2022\n[33] \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022 \u2022\u2022\n[37] \u2022\u2022\u2022 \u2022 \u2022\n[38] \u2022 \u2022\n[13] \u2022\u2022 \u2022\u2022\n[32] \u2022\u2022\u2022\u2022\u2022 \u2022\nTotal 20181798754321\nTable 1. Concept matrix with dimensions [34]\nWith the objective to further minimize the exceptions, stability of th e sys-\ntems in use and the process outcome is crucial. For an execution follo wing the\n\nA framework for RPA viability assessment 5\nprede\ufb01ned rules, the stability of user interfaces and the interact ion between dif-\nferent systems is essential [26]. Ideal candidate tasks for RPA ha ve as a result a\nlimited number of exceptions and high predictability of their outcomes to avoid\nuncertainties and disruptions [10,33].\nThe speed of tasks that require access and interaction with multiple systems\ncan be increased immensely (e.g. data entry between systems). In 17 out of 21\nexaminedpapers,tasksincludingtheaccesstodi\ufb00erentsystemsa rementionedto\nbesuitableforRPA(seeTable1).Whenevermultiplesystemsneedto beaccessed\nbyauser,themanuale\ufb00ortishighandalsore\ufb02ectedbythetimecon sumptionfor\nthis task. A software robot can work within the di\ufb00erent systems \ufb02 awlessly and\nexecute the tasks more rapidly, enabling not only the extraction of information\nbut also the triggering of events, when a task is completed [3,9,16,17,2 5].\nIn order for process activities to be performed between multiple sy stems,\nthe data needs to be in a structured and digital form. When data is s tructured\n[5,7,15,19,24,25,29,32,33,38], the software robot can then successfu lly interpret\nthe given input and follow the execution \ufb02ow of the process activities .\nApart from process and process activity characteristics, literat ure mentions\nthat proneness to human errors is also an indicator for RPA potent ial. This\nassumption is based on the fact, that with increasing volume of task s, humans\nwill more likely cause exceptions by false entry or incorrect data man ipulation\nthan a program would [9,13,16,17,29,37].\nMoreover, a process or task can be judged by its impact or value to the\nbusiness. This is where literature does not provide a clear outline due to the\nsmall amount of mentions. While some argue that automation potent ial exists\nfor processes with a low degree of business value [9], others state that processes\nwith a low execution frequency but a high business value are suitable c andidates\nfor automation [10,37].\nFocusing on the voluminous and repetitive processes, the number o f users\ninvolved in the execution re\ufb02ect another perspective on RPA suitab ility. Kokina\nand Blanchet [19] indicate potential bene\ufb01ts where severalpeople areperforming\nthe same processes, when these are repetitive and require no or lo w subjective\njudgment. A di\ufb00erent perspective highlights the handovers of wor k between dif-\nferent stakeholder across departments as a factor to consider [33].\nLast, the execution time of a process is a criteria to assess the suit ability\nof processes for RPA [33]. Decreasing the time spent with repetitive and highly\ntransactional jobs, increases time for employees to focus on mor e value-adding\ntasks [3].\n3 Process characteristics evaluation framework\nTo support practitioners in evaluating the viability of RPA for proces s activities,\nwe summarized the \ufb01ndings of our literature review in a framework.\nTable 2 visualizes the process characteristics evaluation framewor k (PCEF).\nWepresent\ufb01veperspectives\u2013task,time,data,system,andhum an\u2013thatcontain\nseveral characteristics that analysts can use to evaluate a proc ess accordingly.\n\n6 C. Wellmann et al.\nWe present examples for evaluation of the criteria but the list is cert ainly not\nexhaustive. We decided to exclude valueas a criteria from the framework as it\nis implicitly covered by other criteria such as frequency and urgency .\nPerspective Criteria Exemplary Evaluation\nTaskStandardization Number of di\ufb00erent activities\nNumber of variations to execution \ufb02ow in business\nMaturity Number of deviation cases over time\nRatio of deviation cases over time\nNumber of deviation cases over time\nRatio of deviation cases over time\nDeterminism Number of manual interactions\nTime to solve manual interaction\nFailure rate Number of unsuccessful terminations\nNumber of manual interactions\nNumber of rework loops\nTimeFrequency Number of executions\nDuration Average time to task completion\nUrgency Average reaction time\nData Structuredness Consistent use of data objects\nSystemInterfaces Number of execution steps\nTime spent on application interface\nStability Number of exceptions\nNumber of systems Number of systems involved\n(e.g. CRM, ERP)\nHumanResources Number of users performing same task\nNumber of users involved in process\nProneness to human\nerrorNumber of exceptions\nTime to solve exception\nTable 2. Process characteristics evaluation framework\n\nA framework for RPA viability assessment 7\nTask perspective The task perspective refers to the execution of process ac-\ntivities. Its criteria are standardization, maturity, determinism, a nd failure rate.\nFirst, standardization refers to a process\u2019s degree of structur e. In standard-\nized processes, every process element is unambiguous, and the ex ecution order\nremains the same in each process instance. As a result, stakeholde rs receive\nthe same outcome from a standardized process [20,22]. Thus, we e xamine the\nexecution order and the number of process variants to measure a process\u2019s stan-\ndardization. We can, for instance, analyze predecessors and suc cessors of the\nprocess of interest. Ideally, the order of execution remains the s ame and equals\nto the desired process \ufb02ow.\nMaturity indicates that no frequent changes to the process \ufb02ow a re observ-\nable. Therefore, processes need to be speci\ufb01ed and predictable o ver a period in\ntime [5,22]. Mature processes usually terminate successfully and sho w a compa-\nrably low number of variants [32,15]. The evaluation focuses on the n umber of\nprocess variants and the di\ufb00erence between the ideal and variant process paths.\nDeterminism is one of the most distinctive criteria to assess the viabilit y\nof RPA. Deterministic activities consist of logical execution steps wit hout any\nform of cognitive assessment [7,17,32,37]. This is a fundamental requ irement\nfor software robots since human judgment aggravates automat ion. To ful\ufb01ll the\ncriterion, logical and rule-based steps su\ufb03ce to describe a proces s. Hence, the\nevaluation examines manual interactions and execution time.\nLast, the failure rate relates to self loops to repair previous execu tions and a\nnon-recoverable unsuccessful termination. A low failure rate leve rages automa-\ntion. The failure rate subsequently focuses on the amount of devia tions from the\nideal process \ufb02ow caused by failures, and their respective causes [5,10,17,32,33].\nA high failure rate might correspond to poor standardization, matu rity or de-\nterminism as the causes for exceptions.\nTime perspective The criteria listed under the time perspective focus on the\nduration and frequency of processes and process steps.\nFirst of all, the frequency describes the absolute number a proces s step oc-\ncurs over time. The execution frequency is high when tasks are rep eated daily\nand in high transaction volumes [7,9]. The criterion measures the numb er of an\nactivity\u2019s occurrences in a certain period.\nAdditionally, the framework includes the duration which expresses t he time\nrequired to execute a process or an activity. The duration needed to execute a\nprocess or an activity is a quanti\ufb01able indicator of the time-saving po tential.\nThe \ufb01nal time-based criterion of the framework is urgency which de scribes\nhow critical the immediate execution of a process step is. The delaye d execu-\ntion may cause an increasing overall duration, or may hinder progre ss. Software\nrobots are working 24/7, unlike users with relatively short time fram es. For this\nreason,the evaluation focuses on the time needed to reactto exe cute such urgent\ntasks.\n\n8 C. Wellmann et al.\nData perspective In many processes, information is processed in multiple\nsystems. Therefore, the data perspective resembles the struc turedness of data.\nIf a robot shall process data, the data source must be digital [25]. Moreover,\nthe data must at least be semi-structured to enable automation [5 ]. When a\nprocess involves handling data, users may perform simple operation s to extract\nit from the source and enter it into a system [15,19,24,33,38]. This is a cr ucial\nrequirement for the successful interpretation and execution of process steps. To\nevaluate this criterion the data source is analyzed. Typically struct ured data\nis in semi-structured forms like spreadsheets, websites, or emails. Unstructured\nand hardly accessible data impedes RPA.\nSystem perspective The fourth perspective in the framework is related to the\nunderlying systems. The perspective poses the interaction with int erfaces, and\nthe stability of information systems.\nDue to our preceding research we added the criterion interface to our frame-\nwork. The criterion interface is evaluated by identifying whether th e task could\nbe solvedusingsoftwarerobots.Here,the time spentin an applicat ion\u2019sinterface\nand the number of required execution steps serve as indicators.\nAnother system-related criterion is the stability. Ideally, systems and appli-\ncations involved in process automation are stable. During process e xecution,\nall operations on the user interface perform accordingly, and use rs only seldom\nexperience interruptions [10,26,33]. A stable operating system also r elates to\nthis criterion. It guarantees the absence of system related exce ptions during au-\ntomation. For analyzing system stability, we propose the number of soft- and\nhardware exceptions. Important in practice is to distinguish betwe en exceptions\ncaused by the systems or applications themselves and external fa ctors such as\ncapacity errors or connection.\nThe last system-related criterion in the framework is the number of systems.\nIt deals with process parts or activities that interact with multiple inf orma-\ntion systems. Consequently, the interaction between systems is n ecessary, but\nno value is added when performed by a person [16,17,25]. In fact, ro bots outper-\nform humans in atomic operations, like copy and paste [3,9]. Thus, aut omation\ncandidate tasks transfer information from one to other systems . The potential\nof more involved systems is higher, if these are running stably.\nHuman perspective The last perspective deals with humans computer inter-\naction focusing on the human. The perspective comes with two pecu liarities,\nresources and proneness to human error.\nThe framework includes resources as criterion to highlight the numb er of\nusers involved in the process. Especially frequent activities require resources to\ndeal with the volume ofwork. This criteria can be assessedfrom two view points.\nFirst, based on the number of users performing the same task. Se cond, multiple\nusers contribute to an activity\u2019s instance. [19,33]. To assess the re source savings,\nwe utilize the count of users performing the same task, and the num ber of users\ninvolved in one task instance.\n\nA framework for RPA viability assessment 9\nThe last aspect in the PCEF is the proneness to human errors as a cr i-\nterion. Humans tend to erroneous behavior when executing monot onous and\nvoluminous tasks which results in such errors that solely relate to hu man nature\n[9,13,16,17,29,37]. Eliminating such mistakes with business rules or robot s yields\nto additional savings regarding costs and time. Measuring the erro r proneness\nrelies on the number of human mistakes and the required time to \ufb01x th ose.\n4 Evaluation\nThe evaluation focuses on event logs generated through PAIS. Ev ent logs reveal\ninsights about the business process and its execution. We aim at an o bjective\nevaluation by using a publicly available data-set to show the applicability of the\nPCEF [8]. We determine process characteristics with Process Mining S oftware1.\nHence, we test the framework for its applicability in a practical envir onment.\nThe candidate process describes a P2P process of a multinational c oatings\nand paints enterprise. Due to its administrative character, it is a su itable can-\ndidate for automation. In this case, RPA minimizes manual work and in creases\ne\ufb03ciency at the enterprise\u2019s bottom line. The candidate process co vers the steps\nfrom creating a purchase order to the clearance of the invoice. A p urchase order\ncontains at least one purchase order item. An item stores attribut es describing\nthe resources involved, value of events and anonymized company in formation.\nIn total, the data set includes more than 1.5 million events, and 251,73 4\npurchaseorderitems(cases)in76,349purchaseorders.Toillustr atethestructure\nof the event log, Table 3 visualizes an event log from the data set.\nTo analyse the framework,we focus on the paths related to Item Category: 3-\nway match, invoice before GR . We further drill down selecting the most common\nvariants ( \u02dc90%) in 2018. These \ufb01lters result in 197,010 cases with 136 process\nvariants.\nExamining the event log reveals that traces including the manual act ivity\n\u2019Change Quantity\u2019 take a month longer on average.\nThus, we select \u2019Change Quantity\u2019 as our process step of interest , and apply\nour framework to evaluate the activity. Note that we consider the deletion of a\npurchase order item and the reoccurrence of \u2018Change Quantity\u2019 a s incompliant.\nStandardization. The criterion examines a process\u2019s degree of structure, and it\nrelates to a low number of overall variants.\nOur analysis of \u2018Change Quantity\u2019 reveals that it has \ufb01ve valid predec es-\nsors covering 95% of all incoming process paths, and two valid succe ssors that\ncover 94% of all outgoing traces. Additionally, we examine the activit y\u2019s process\nsegment in di\ufb00erent business units.\nEvery business unit conducts the activity in the same context. Con sequently,\nwe identify a logical and structured process \ufb02ow. The assessment shows that\nthe process is rather standardized, since 95% of all preceding and 93% of all\nfollowing activities are compliant and follow a certain pattern.\n1https://www.celonis.com\n\n10 C. Wellmann et al.\nTable 3. Exemplary event with contextual attributes from the event l og\nAttribute Value\nCase ID 2000000000 00001\nActivity Record Goods Receipt\nResource user 000\nComplete Timestamp 2018/03/06 07:44:00.000\nVariant Variant 65\nVariant index 65\n(case) Company companyID 0000\n(case) Document Type EC Purchase order\n(case) GR-Based Inv. Verif. false\n(case) Goods Receipt true\n(case) Item 1\n(case) Item Category 3-way match, invoice before GR\n(case) Item Type Standard\n(case) Name vendor 0000\n(case) Purch. Doc. Category name Purchase order\n(case) Purchasing Document 2000000000\n(case) Source sourceSystemID 0000\n(case) Spend area text CAPEX & SOCS\n(case) Spend classi\ufb01cation text NPR\n(case) Sub spend area text Facility Management\n(case) Vendor vendorID 0000\nCumulative net worth (EUR) 298.0\nUser user 000\nMaturity. The maturity expresses the number of compliant process variants\nwhich establish over time. In total there are 25 variants containing the activ-\nity. Out of these 25 variants, 22 are following compliant pre- and suc essors while\nthree are incompliant. There are 2 variants reworking the activity a nd one which\ncauses the deletion of purchase order items.\nDeterminism. To assess the criterion, we must know the steps done on the user\ninterface and the respective throughput time of steps need to be evaluated. The\nevent log does not include information about the performance of th e activity\n\u2019Change Quantity\u2019 on the presentation layer. Therefore, the crit erion can not be\nevaluated for this data set.\nFailure Rate. In this process, the execution fails when a self-loop occurs or the\nprocess ends with the activity \u2018Delete PurchaseOrder Item\u2019. Rewor king \u2018Change\nQuantity\u2019 occurs in 3,91%, and the process determination with orde r item dele-\ntion happens in 1,42%. Since we only consider the outcome of one activ ity, we\nignore the full process context, since we cannot determine which c ases actually\nterminated and which are still running.\nThe resulting failure rate of the process is 5,33%.\nFrequency. The average number of \u2019Change Quantity\u2019 occurrences is 31 times\na day. Although the execution of \u2019Change Quantity\u2019 varies month by month, it\n\n",
    "is_processed": true,
    "process_error": null,
    "content_length": 25895,
    "local_pdf_path": "data/pdfs/A framework to evaluate the viability of robotic process automation for business process activities_7e8b46b6.pdf"
  },
  "arxiv_a48e690fe79dfcde7c3ed39075d66651": {
    "title": "A New Framework of Software Obfuscation Evaluation Criteria",
    "url": "http://arxiv.org/pdf/2502.14093v1",
    "source": "arxiv",
    "authors": [
      "Bjorn De Sutter"
    ],
    "published_date": "2025-02-19T20:45:47+00:00",
    "summary": "In the domain of practical software protection against man-at-the-end attacks\nsuch as software reverse engineering and tampering, much of the scientific\nliterature is plagued by the use of subpar methods to evaluate the protections'\nstrength and even by the absence of such evaluations. Several criteria have\nbeen proposed in the past to assess the strength of protections, such as\npotency, resilience, stealth, and cost. We analyze their evolving definitions\nand uses. We formulate a number of critiques, from which we conclude that the\nexisting definitions are unsatisfactory and need to be revised. We present a\nnew framework of software protection evaluation criteria: relevance,\neffectiveness (or efficacy), robustness, concealment, stubbornness,\nsensitivity, predictability, and cost.",
    "categories": [
      "cs.SE",
      "cs.CR"
    ],
    "entry_id": "http://arxiv.org/abs/2502.14093v1",
    "meta": {
      "content_type": "academic_paper",
      "is_curated": true,
      "source_quality": 8
    },
    "content_type": "academic_paper",
    "text": "arXiv:2502.14093v1  [cs.SE]  19 Feb 2025A NewFramework ofSo/f_tware ObfuscationEvaluation Criteria\nBjornDe Sutter\nbjorn.desutter@ugent.be\nGhent University\nGhent,Belgium\nABSTRACT\nInthedomainofpracticalsoftwareprotectionagainst man- at-the-\nend attacks such as software reverse engineering and tamper ing,\nmuch of the scienti\ufb01c literature is plagued by the use of subp ar\nmethods to evaluate theprotections\u2019 strength and even by th e ab-\nsence of such evaluations. Several criteria have been propo sed in\nthe past to assess the strength of protections, such as poten cy, re-\nsilience, stealth, and cost. We analyze their evolving de\ufb01n itions\nanduses.Weformulateanumberofcritiques,fromwhichweco n-\ncludethattheexistingde\ufb01nitionsareunsatisfactoryandn eedtobe\nrevised.Wepresentanewframeworkofsoftwareprotectione valu-\nationcriteria:relevance,e\ufb00ectiveness(ore\ufb03cacy),robu stness,con-\ncealment, stubbornness,sensitivity, predictability,an d cost.\nCCS CONCEPTS\n\u2022Securityandprivacy \u2192Softwarereverseengineering .\nKEYWORDS\nPotency, resilience, stealth,obfuscation,attacks,prog ramanalysis\n1 INTRODUCTION\nDuringthepastthreedecades,manysoftwareobfuscation,t amper-\nproo\ufb01ng, and anti-analysis techniques have been presented that\naim to hinder reverse engineering and softwaretampering to pre-\nvent unauthorizeduse[40,82,92].\nTheprogressinsuchsoftwareprotections(SPs)hastrigger edan\narms race in which many new techniques for deobfuscation, ta m-\npering, and analysis have been proposed. When used o\ufb00ensive ly,\nthesetechniquesarecollectivelycalled man-at-the-end (MATE)at-\ntacks, because the adversaries using them have full control over\nthe systems on which they run, analyze, and alter the softwar e\nunder attack. Their tools include emulators, debuggers, di sassem-\nblers,customoperatingsystems,fuzzers,symbolicexecut ion,sand-\nboxes, and instrumentation among a wide range of static and d y-\nnamic analysis and tampering tools. These give them white-b ox\naccesstothesoftwareinternals,includingtheirinternal execution\nstate.\nIn the MATE attack model, and with the current state-of-the-\nart in practical SP, complete prevention of attacks is impos sible.\nWith enoughtimeand resourcestoexploittheirwhite-boxac cess,\nadversaries can always succeed.The goal of MATE SP is hence t o\nmake the adversary\u2019s return on investment negative, by dela ying\ntheidenti\ufb01cation ofattacks and bylimiting theirexploita tion.\nThese goals are much fuzzier than the goals in some other se-\ncurity domains such as cryptography, which builds on precis ely\nde\ufb01ned mathematical foundations to protect against man-in -the-\nmiddle attacks.1Because of this fuzziness, and because MATE\n1Whilecryptographictechniquesandwell-de\ufb01ned,cryptogr aphically-soundconcepts\nhave also been developed in the domain of obfuscation, the re sults are still far fromattackershavesomanyalternativeattackstrategiesandte chniques\nat their disposal, it is di\ufb03cult to measure the strength of SP s and\ntomakefoundedstatements aboutthem.\nAs observed at the 2019Dagstuhl Seminar on SP Decision Sup-\nportandEvaluationMethodologies[39]andinarecentsurve y[40],\nthe \ufb01eld of MATE SP research su\ufb00ers from a lack of standardize d\nevaluationmethodologiesandpractices.Thesurveyobserv edthat\n\u202225% \u02c6=125/495 of the papers with SP implementations re-\nportno strength measurements at all.\n\u202254% \u02c6=133/248ofthegoodwareobfuscationpapersthatde-\nploySPsonsamplesdonotevaluatethoseSPs\u2019strengthby\nassessing how analysis methodsfare against them.\n\u2022Obfuscationresearch oftendoesnotassess resilience.\n\u2022The costs of applying SPs are measured much more fre-\nquentlythantheir strengths.\n\u2022Potency is measured much moreoftenthanresilience.\nAlthoughtherehaslongbeenacommonunderstandingthatthe\nrelevant criteriaforevaluating obfuscationtechniquesi ncludepo-\ntency, resilience, stealth, and cost [27, 28], there is no un iversally\nagreed and applicablemethodtode\ufb01ne, qualify,or quantify them.\nInstead,non-compatiblede\ufb01nitionsandinterpretations h avebeen\nproposed and used in the literature. We believe that this lac k of\nconsistency contributes to today\u2019s unsatisfactory evalua tion prac-\ntices in MATE SP research and that the time has come to revisit\ntheessential qualitycriteria ofsoftwareobfuscationtec hniques.\nIn this paper, our aim is to study how the concepts of potency,\nresilience, and stealth have been considered inpast resear ch, how\ntheyhaveevolvedovertime,andwhereconfusionaboutthemm ay\nhavearisenthatmayhave beenacontributingfactortotheis sues\nmentioned above. For doing so, we will pinpoint issues with t he\ndi\ufb00erent de\ufb01nitions and interpretations of thoseconcepts thatwe\nobserved in past research, and we will sketch a new framework\nthatcanhelptobetterframethoseconcepts,andprovideadv iceas\ntohowtoconsider themin futureresearch.\nSections 2\u20135discuss four di\ufb00erent approaches tode\ufb01ne and i n-\nterprettheconceptsofpotency,resilience, and stealth,a nd formu-\nlate critiques on them. Section 6 proposes an alternative fr ame-\nwork of evaluation criteria. We provide further discussion in Sec-\ntion7.Finally, Section8draws conclusions.\n2 COLLBERG, THOMBORSON, AND LOW\nIn1997and1998Collberg,Thomborson,andLow(CTL) propose d\nthreecriteria toevaluate obfuscatingtransformations [2 7,28].\n2.1 De\ufb01nitions\n2.1.1 Potency. In 1997, CTL [27] introduced the term potency to\ndenotethedegreetowhichanobfuscationconfusesa humanreader\nreadyforwidespreadgeneraluseinpractice.Theyarethere foreoutside the scopeof\nthiswork,which focuses onpractical,general-purpose sof twareobfuscation.\n\nBjornDe Su/t_ter\ntryingtounderstandagivenprogram,i.e., toquantifyhowt heob-\nfuscatedprogramismoreobscure,complex,orunreadableth anthe\noriginal program. They de\ufb01ned the potency that is obtained o n a\ngivenprogramastheratiobetweenacomplexitymetriccompu ted\nonthatprogram after and beforetheobfuscation[27].\nThey proposed considering software complexity metrics suc h\nas program length [59], cyclomatic complexity [79], nestin g com-\nplexity[61],data\ufb02owcomplexity[85],fan-in/outcomplex ity[62],\ndata structure complexity [81], and OO Metric [23]. CTL then de-\nrived and suggested that obfuscations should aim to directl y im-\npact these metrics, by increasing program size and introduc ing\nnew classes and methods, by introducing new predicates and i n-\ncreasingnestinglevelsofconditionalandloopingconstru cts,etc.[27].\nIn line with the suggestion, various other complexity metri cs\nhave beenusedinSPresearch sincethen,such asQMOOD under-\nstandability [8, 46]. Various more advanced forms of comple xity\nmetricshavebeenproposed,someofwhicharespeci\ufb01cforeva luat-\ning obfuscations,e.g., based on entropy [54],others more g eneral,\nsuch as the cost of mental simulation [83]. Several authors h ave\nlaterrevisitedtheideaofcombiningmanydi\ufb00erentmetrics [3,20].\n2.1.2 Resilience. CTLobservedthatitistrivialtoincreasepotency\ninwaysthatwillnotconfuseahumanreader,e.g.,byinjecti ngcode\nthat can immediately be identi\ufb01ed as dead. They then present ed\ntheadditionalqualitycriterionof resilience todi\ufb00erentiate useless\ntransformations and useless impacts on complexity metrics from\nuseful ones. In their proposal [27], resilience \u201cmeasures h ow well\natransformationholdsunderattackfromanautomaticdeobf usca-\ntor.\u201d\nIt does so in terms of two measures. The programmer e\ufb00ort is\n\u201ctheamountoftimerequiredtoconstructanautomaticdeobf usca-\ntor that is able to e\ufb00ectively reduce [the obfuscation\u2019s] po tency.\u201d\nThedeobfuscator e\ufb00ort is \u201cthe execution time and space required\nbysuchanautomaticdeobfuscatortoe\ufb00ectivelyreduce[the obfus-\ncation\u2019s] potency.\u201d They scaled programmer e\ufb00ort in terms o f the\nscopeoftheanalysesandtransformationsunderlyingthede obfus-\ncator, which can be local, global, interprocedural, or inte rprocess.\nThe deobfuscator e\ufb00ort is based on the computational comple x-\nity of the underlying analysis: polynomial or exponential. Based\non these properties, resilience is measured on a scale of trivialto\nfull,plusthelevel one-waythatwasbasedonthethenrealistic as-\nsumption that some information about the original program c an\nnever be recovered from the obfuscated program, such as iden ti-\n\ufb01ers names (of variables,classes, functions, etc.) and cod elayout.\n2.1.3 Stealth. Althoughresilienttransformationsmaynotbesus-\nceptible to attacks by automated deobfuscation, they may st ill be\nsusceptible to attacks by humans. In 1998, CTL [28] hence add ed\nthestealthcriterion, which denoted \u201cHow well does obfuscated\ncode blend in with the original code?\u201d They initially did not for-\nmalizethiscriterionbeyondstatingthatobfuscatedcodes houldre-\nsembleoriginalcodeasmuchaspossible,pointingoutthats tealth\nobviouslyisahighlycontext-sensitivemetric.Forexampl e,theyar-\nguedthatgraph-based opaquepredicateswillbestealthyin many\nJava programs as thoseofteninvolve pointer-rich datastru ctures.\n2.1.4 Cost. Finally,CTLarguedthattheimpactofobfuscationson\nexecutiontimeandspaceshouldbeassessed[27].Likesteal th,costis a context-sensitive metric: injecting code into an inner loop or\natthetopmostprogramlevelwillhavearadicallydi\ufb00erenti mpact.\n2.2 Critique\nCTL\u2019s de\ufb01nitions of potency,resilience, and stealth donot satisfy.\n2.2.1 ComplexityMetricsUnfitforObfuscatedCode. Thevalidity\nof software complexity metrics for code comprehension is qu es-\ntionable.Feitelsonarguesthatmostmetricsarebasedonin tuition\ninsteadofsystematicempiricalvalidationandthattheyfa iltoade-\nquatelyquantifycomprehension di\ufb03culty[45].Themostpop ular\nmetrics of code length and cyclometic complexity do not capt ure\nthatthecodereader\u2019spriorexperienceandbackgroundknow ledge\nalsocontributesigni\ufb01cantly[33,59,79].Othermetricssu chascog-\nnitive functional size [107] do take into account how the hum an\nbrainperceives di\ufb00erent codestructures and patterns, but onlyto\nalimitedextent.Ifcomplexitymetricstomodelcomprehens iondif-\n\ufb01culty of regular software are already contested, expandin g their\nuse to assess the potency on obfuscated code is even more con-\ntroversial. With their observation that the proposed metri cs can\ntriviallybeincreased with transformationsthatlack anyu tilityas\nobfuscations, CTL themselves admit that complexity metric s can-\nnotbereused as is forassessing thequalitiesof obfuscated code.\nWhen Foket et al. [46] used validated complexity metrics for\nobject-orientedsoftware,theyhadtoadmitthattheirusew asprob-\nlematic.Additionalqualitativeanalysis was neededtoens ure that\nthe quantitative metrics results were correctly interpret ed and to\navoid drawinginvalid conclusions.\nFeitelson also assessed the importance of meaningful varia ble\nnames for program comprehension [45], and found that their i m-\npactoncomprehensiondi\ufb03cultyvariesfromprogramtoprogr am.\nInobfuscatedcode,oneshouldnotexpectto\ufb01ndmeaningful v ari-\nablenames,atleastnotwithoutusingmachinelearningtech niques\nto reconstruct them [5, 101]. This di\ufb00erence alone puts in do ubt\nwhether software complexity metrics developed on regular s oft-\nwarecanbereused as is forobfuscatedcode.\n2.2.2 UnclearHowtoComputeComplexityMetrics. Thede\ufb01nition\nofpotencydoesnotspecifywhichsoftwarefragments tomeas ure.\nFirst, the de\ufb01nition is vague about the program representat ion\nonwhichtocomputethecomplexitymetrics.Shouldoneusegr ound-\ntruth representations from the forward engineering proces s (e.g.,\nsourcecode,IRcodeusedinacompiler,assemblycode,binar ycode\nwith full symbol and relocation information) or representa tions\nbuilt during the reverse engineering process (e.g., IR code built\nby a disassembler, IR obtained by code lifting, or source cod e ob-\ntained after decompilation)? Which representations are mo re rel-\nevant: the ones being transformed to deploy the obfuscation s, or\ntheones onwhich adversaries might get their hands?\nFor managed languages such as Java, this question might not\nbethatimportant.ThesemanticgapbetweentheJavasourcec ode\nand the distributed bytecode is relatively small [10] and a r epre-\nsentationtocomputemetrics on(such asa callgraph andmeth od\nCFGs) can be built mechanistically from the distributed byt ecode.\nFor stripped binaries, the reconstruction of a suitable rep resenta-\ntion is much more complex. For example, when control \ufb02ow and\ndesignobfuscationssuchasthosebyVandenBroecketal.[10 0]are\n\nA NewFrameworkof So/f_tware Obfuscation Evaluation Criteria\ndeployed,thedi\ufb00erencebetweenwhattheobfuscatorknowst obe\nthe functions and what the disassembler thinks to be the poss ible\nfunctions is huge. Each disassembler, possibly even each ve rsion,\ncon\ufb01guration, and customization by means of scripts or plug -ins\nwill yield di\ufb00erent CFGs and di\ufb00erent functions. In other wo rds,\nthere is no one representation on which attackers can get the ir\nhands. Even if all disassemblers would behave the same, do yo u\ncomputethecontrolcomplexitymetricsontheassembly code ,on\nthelow-levelIRliftedfromtheassembly,onthehigh-level IRbuilt\non top, or on the decompiled source code? These are open ques-\ntions. Some work even skips disassembly and decompilation e n-\ntirely, e.g., by interpreting executable \ufb01les as bitstream s and then\napplying image processing machine learning techniques on t hose\nbitstreams to classify malware [77, 84] and to classify used obfus-\ncations [86].\nSecondly, on what part of the software should the metrics be\ncomputed? Although adversaries might initially not know wh ich\nparttostudy,theyhavemanywaystozoominonthemostreleva nt\nparts, thus only requiring deeper study of parts of the progr am.\nBut which parts exactly? And what about the parts they prune\nfrom their search space? Obfuscation can be useful in hinder ing\nthat pruning [29, 89], rather than in hindering the understa nding\nofthecodethatactuallyembedstheassetstheadversariesa reafter.\nOn whichpartsofthecodeshouldthemetricsthenbecomputed ?\n2.2.3 Fuzzy and ConfusingBoundary betweenAutomated andHu -\nmanAnalysis. Thede\ufb01nitionsbyCTLattempttomakeaclearsep-\narationbetweenautomatedanalysisanddeobfuscationonth eone\nhand and human analysis on the other. We think this is not war-\nranted.Inpractice,reverseengineersoftenmakeuseofint eractive\ntoolsthat mix automatedand human analysis, such as interac tive\ndisassemblersanddecompilersofwhichthebuilt-inheuris ticscan\nbe overridden on demand by their users. Moreover, they alway s\nperform their manual tasks on data producedby automatedtoo ls:\nNo one starts studying the bits of a binary executable manual ly.\nThere is ample evidence for this in the literature [22, 40, 96 , 103,\n114].\nMoreover, by binding automation to deobfuscation in the ter m\nresilienceandbybindinghumanactivitiestoconfusioninp otency,\nCTL beg the question of where to place automated attacks that\ndo not deobfuscate code, such as automatic secret extractio n at-\ntacks [7, 43]. Banescu et al. use the term resilience to denot e the\nimpactofSPsonthetimethatsymbolicexecutionengines nee dto\nextractasecret[6,7],eventhoughtheseengines makenoatt empt\nat producing deobfuscated code. This is a clear example of ho w\nhard it is touseCTL\u2019s terms resilience and potencyconsiste ntly.\n2.2.4 ToolAvailability and Sharing over Time. Thedependence of\nresilience on programmer e\ufb00ort neglects that once someone p ub-\nlishes ananalysis toolordeobfuscator,everyone canreuse it.This\ncertainly hasanimpactonthepracticalvalueof obfuscatio ns.For\nexample,inexperimentswithprofessionalpentesters[22] ,itmat-\nteredalottothemthatQEMUwasnotabletocorrectlysimulat ebi-\nnarieswithanti-debugging[2],andthatvalgrindhadtobea dapted\ntosupporttracesizes beyond 2GiB.\nTool availability raises an interesting question for acade mics\nthat can be illustrated with a well-known example: Intel\u2019s P in in-\nstrumentation tool only works on the x86 architectures, wit h nosimilar tool being available for ARM these days. Then does th at\nmeanthatdynamicanalysis ofARMcodeisfundamentallyhard er\nthan dynamic analysis of x86? For an academic studying rever se\nengineering,thatseemsintuitivelywrong,eventhough,fo raprac-\nticingreverse engineer, it maybeactuallytrue.\n2.2.5 Narrow Definitionof Programmer E\ufb00ort. Using only one di-\nmension to estimate the e\ufb00ort required to program an analysi s is\n\ufb02awed. In addition to the scope, at least the sensitivity [41 ] and\npolyvariance [55] of the analysis should also be considered . How-\never,itisnotclearwhethermorepreciseanalysesarealway smore\ndi\ufb03cult to implement than less precise ones. It is hence not c lear\nhow to rank di\ufb00erent forms of precision in terms of programme r\ne\ufb00ort.Thenagain,ifaframeworkwereavailabletoinstanti atevari-\nousforms(i.e., di\ufb00erent scopesanddi\ufb00erent sensitivitie s) ofacus-\ntom analysis with a simple con\ufb01guration, the programmer e\ufb00o rt\nwouldnolonger bedependent onthem.\n2.2.6 Narrow Scope of Deobfuscation. Resilience was de\ufb01ned in\nterms of deobfuscation, meaning \u201creturning the obfuscated code\nintoaformthatisaseasilyunderstandableastheoriginals ource\u201d.\nPure deobfuscation is rarely used in practice. Instead, adv ersaries\noftentrytobypass SPs and work aroundthem [22].\nMoreover,thelocal,global,andinterproceduralprogramm eref-\nfortlevels proposedbyCTL[27] arestrongly biasedtoward s tatic\nanalyses and static program representations such as call gr aphs\nand CFGs, as opposed to dynamic representations such as trac es\nthatarealso usedfor dynamic deobfuscation[78,112].Shou ldwe\nhence not use other aspects to rate the e\ufb00ort required to obta in\ndynamic information with a certain precision? Some dynamic ap-\nproaches, such as the bit-level tracking by Yadegari et al. [ 111],\nare clearly more complex to implement and executethan the si m-\npler taint-tracking approaches proposed by Faingnaert et a l. [43]\northealternativefromLietal.[70],soitseemsthatamore\ufb02 exible\nschemeis necessary toratedeobfuscationtechniques.\n2.2.7 Asset and A/t_tack Goal Independence. The de\ufb01nitions of po-\ntencyandresilienceareassetindependent.Theyqualifyan dquan-\ntifyhowconfusingobfuscationsare,ingeneral,forhumanr eaders,\nand how susceptible they are to an adversary\u2019s countermeasu res.\nTheirformulationdoesnottakeinto accountthatadversari es aim\ntoviolatespeci\ufb01csecurityrequirementsonspeci\ufb01cassets ,suchas\nthecon\ufb01dentialityorintegrity of speci\ufb01ccodefragments.\nTheliteratureisclearonthefactthatforassessingthestr ength\nof obfuscations, both the adversary\u2019s goal and the deployed soft-\nware analysis methods need to be considered. Schrittwieser et al.\ndistinguish four di\ufb00erent goals: \ufb01nding the location of dat a, \ufb01nd-\ning the location of program functionality, extraction of co de frag-\nments,andunderstandingtheprogram[92].Thelattercanbe inter-\npretedbroadly.Forexample, determining invariants ofapr ogram,\ndetermining preconditionsfortheexecutionofsomefragme nt, or\nobtainingconcise summaries ofitsfunctionalitycanallbe consid-\nered program understanding goals.Schrittwieser et al.als o distin-\nguish four classes of software analysis methods that obfusc ations\nmight aim to mitigate: pattern matching, automatic static a naly-\nsis, automatic dynamic analysis, and human analysis. While one\ncouldarguethatdi\ufb00erentsoftwaremetricsshouldbeusedde pend-\ning on the type of assets to be protected and on the considered\n\nBjornDe Su/t_ter\nattack goals and used analysis methods, as has been done in th e\npast [3],itis all butclear which complexitymetrics tousew hen.\nFurthermore, the proposed code arti\ufb01ciality metric for ste alth\nonlyis applicableinthefaceofspeci\ufb01cattacks,namelytho secon-\nsidering n-grams orrelated syntactical codeproperties,b utmean-\ningless forothercodeand data location\ufb01nding attacks.\n2.2.8 LayeringisMissinginAction. NowheredoCTL\u2019sde\ufb01nitions\nstress the need to evaluate the marginal strength of obfusca tions\nwhentheyarecomposedandlayeredontopofeachother,despi te\nthefact thatlayering obfuscationsis thebest practice[26 ,71,82].\nBecause the obfuscation (singular) being evaluated could c on-\nsist of a compositionof multipletransformations (plural) , the def-\ninitions by CTL support layering and compositions and are te ch-\nnically \ufb01ne. However, to help the community, we do think that\ntheconceptsoflayeringandcomposabilityneedtobeputfor ward\nexplicitly,and potentialpitfallsorconsequences deserv e tobedis-\ncussed, if only because layering increases the relevance of other\ncritiques, such as thosediscussed in Section 2.2.2. When on ly one\nobfuscationdeployed inisolationis being evaluated,thes emantic\ngapbetweenthedi\ufb00erentrepresentationsonwhichdefender sand\nattackerscancomputetherelevantmetricsmightbesmallen ough\nthat we do not need toworry aboutwhich representation to com -\nputeit.Butonceobfuscationsarecomposed,thesemanticga pcan\ngrow quickly and the question of how to computethe metrics be -\ncomes much more di\ufb03cult again. De Sutter et al. discuss this i n\nmore detail where they observe the lack of layered SP evaluat ion\nin research [40].\n2.2.9 MachineLearningChangedtheNatureoftheGame. Thecon-\ncept of one-way resilience no longer applies in this day and a ge\nof machine learning as it did in the previous millennium. Eve n if\nmachine learning techniqueso\ufb00er noguaranteeofreconstru cting\ntheoriginalidenti\ufb01ernamesortheoriginalcodelayout,th eyhave\nbeen proven capable of reconstructing meaningful, useful n ames\nand layouts that help human reverse engineers [5, 101]. Howe ver,\none-way resilience might still be meaningful when obfuscat ions\nrely onone-way functions,such as hash functions [99, 110].\n2.2.10 Lack of Sensitivity. CTL neglect the sensitivity of potency,\nresilience, and stealth with respect to features of the prog ram be-\ning obfuscated. An example of an obfuscation that can be high ly\nsensitiveto(local)programfeaturesisthesource-leveli njectionof\nmixed Boolean arithmetic expressions that compute constan t val-\nues [117]. If the variables used in the expressions happen to have\nconstantvalues,orareuninitialized,compilerscanoptim izeaway\n(part of) the obfuscation.2Another example is bogus control \ufb02ow\nand boguscodeinserted bymeans of,e.g., opaquepredicates .The\ne\ufb00ect on complexity there depends entirely on which data dep en-\ndenciesandwhichcontroldependencieshappentobeimpacte dby\nthe bogus code. In general, combining obfuscation with prog ram\noptimizationis known tobea di\ufb03cultproblem [58].\nThis sensitivity is an issue for at least two practical reaso ns.\nFirst, if theimpact of an obfuscationis sensitive to featur es of the\nprogram being obfuscated, a mechanism is needed to assess th at\n2Sourcecodegivescompilersmuchricherinformationthanad versariesgetfromabi-\nnary.Thefactthatacompilercandeduce somepropertyhence doesnot implyanad-\nversarycandoso,i.e.,thattheobfuscationfailstohideth epropertyforanadversary.impactevery timetheobfuscationisconsidered asacandida tefor\ndeployment.Predictivetechniquesoractualmeasurements canbe\nused for this. The latter is not really feasible, however, gi ven the\nlargedesignspacethatneedstobeexplored[9],andtheform erhas\nsigni\ufb01cant limitations today[19].Secondly,programs evo lve over\ntime. So even when users of an obfuscation tool have somehow\nobtainedasuitablecompositionofobfuscationsfortheir s oftware\nv1.0,ifthatcompositionissensitive toprogramfeatures, theywill\nneed to reassess its suitabilityfor later versions. Clearl y, the user-\nfriendliness of obfuscatorsand/or their need toinclude pr edictive\ncapabilities depends on the sensitivity of the supported ob fusca-\ntionswith respecttoprogram features.\nCTL also neglect the sensitivity of an obfuscation to its con -\n\ufb01guration parameters. If an obfuscation\u2019s impact is sensit ive to\nthem, this again impacts the user-friendliness of obfuscat ors and\nthe need to include prediction mechanisms, because the para me-\nterswill need tobeoptimized.One couldarguethatif two con \ufb01g-\nurations of some obfuscation have signi\ufb01cantly di\ufb00erent im pacts,\nthentheyshouldbetreatedastwodi\ufb00erentobfuscations.Al though\ndocumenting obfuscations as such may make an obfuscation to ol\nmore transparent, it does not make the obfuscation selectio n and\noptimizationproblemsanyeasier.Forthesereasons,these nsitivity\nofobfuscations shouldbeconsidered a primequalitycriter ion.\n2.2.11 Learnability Neglected. De\ufb01ning stealth as the arti\ufb01ciality\nof transformed code compared to original code neglects that ad-\nversaries canlearntosingleoutobfuscatedfragmentseven ifthey\naresimilartooriginal code.Ifanobfuscationis implement edwith\nexactlythesameinstructionsequenceevery timeitis deplo yed,it\ndoes not matter that this sequence also occurs a few times in t he\noriginal code:Patternmatchers willquicklyachieve 100%r ecall.\n3 NAGRAAND COLLBERG\nIn2009,NagraandCollberg(NC)rede\ufb01nedpotencyandstealt h[82].\n3.1 UpdatedDe\ufb01nitions\nNC now de\ufb01ned potency in relation to a program\u2019s property tha t\nsome adversary might try to reveal, and in relation to analys es\nthat can be used to reveal that property. First, they paraphr ased\nthe meaning of an e\ufb00ective obfuscating transformation as one that\n\u201cmakesitharder toperformthenecessaryanalyses thatreve al the\nsecret property on the obfuscated program than it is on the or igi-\nnal.\u201d\nGivenaspeci\ufb01cprogram,aspeci\ufb01cpropertythereof,andsom e\nspeci\ufb01c analysis that can reveal that propertyon the origin al pro-\ngram, an obfuscation is considered e\ufb00ectiveif the analysis can no\nlonger reveal an equivalent property on the obfuscated prog ram\norrequiresmoreresourcestodoso.Theobfuscationisconsi dered\nine\ufb00ective iftheanalysis canstillreveal anequivalentpropertyus-\ningthesameamountofresources and defectiveif theanalysis can\nreveal an equivalentpropertyusing less resources.\nIntheir de\ufb01nition, the term\u201cequivalent\u201d \u2248was notde\ufb01ned for-\nmally. Although in many cases an adversary aims for revealin g a\npropertyexactly, NC argued that there canalso becases in wh ich\nanadversary is happy withan approximation.Scenarios inwh ich\napproximationmaysu\ufb03ceincludedataorcodelocalizationa ttacks,\ninwhichitcansu\ufb03ceifatoolprunesmostofthesearchspacet hat\n\nA NewFrameworkof So/f_tware Obfuscation Evaluation Criteria\ntheattackerhas toexploremanually,orcryptographickey e xtrac-\ntion, in which it can su\ufb03ce if an analysis tool can severely pr une\nthesearch spacefora brute-forceattack.\nTheanalysisconsideredinthede\ufb01nitionneednotnecessari lybe\na single analysis. It can in fact be a sequence of analyses and (de-\nobfuscating) transformations; such as when analyses revea l prop-\nerties thatare useful todeobfuscatethe code,and theprope rtyul-\ntimatelytargeted bytheadversary is thedeobfuscatedcode .\nBasedontheabovede\ufb01nition,NC thende\ufb01ned potentobfuscat-\ningtransformations intermsofa speci\ufb01cprogram,aspeci\ufb01cprop-\nerty,and a setof analyses .Anobfuscationis potentif itis e\ufb00ective\nagainst at least one of the analyses and not defective agains t any\nof them: \u201ca potent obfuscating transformation makes at leas t one\nanalysis harder toperform,and no analyses easier.\u201d\nNComittedresilience asaseparate,complementaryquality cri-\nterion. The reason is, of course, that the above rede\ufb01nition of po-\ntency already incorporatestheoriginal conceptof resilie nce.\nFor stealth, NC distinguish between local stealth andstegano-\ngraphicstealth [82].Atransformationissteganographicallystealthy\nif anadversary\u2019s detectorfunction cannot determine if a pr ogram\nhas been transformed with it or not. A transformation is loca lly\nstealthyiftheadversary\u2019slocatorfunctioncannottellth elocations\nwherethetransformationhas beenapplied.\nFormally,theyproposetode\ufb01nethelocal/steganographics tealth\nof an obfuscation with respect to a considered class of progr ams\nandaconsideredlocator/detectorfunctionasthemaximumo fthe\nexpectedfalsepositiverateandtheexpectedfalsenegativ e rateof\nthat functionover allprograms in theclassafter obfuscati on.\nWithrespecttodetectorandlocatorfunctions,thereexist squite\na bit of research on automatic techniques for the classi\ufb01cat ion of\nsoftwareasobfuscatedversus unobfuscatedandfortheauto matic\ndeterminationofthedeployed obfuscationsandobfuscator s.Such\ntechniquesareinvariablybasedontheobservationofsoftw arefea-\nturesthatform\ufb01ngerprintsofobfuscationswhosepresence canbe\nconsidered as indicatorsof (a lack of)stealth [115].\nSchrittwieseretal.[93]usedcomplexitymetricsas\ufb01ngerp rints.\nRaubitzeketal.[88]convertbinarycodebytestograyscale values\nand usesingular valuedecompositiontouncover patternscr eated\nbydi\ufb00erent obfuscationtechniquesinimages. Jianget al.[ 64]use\nthe number of di\ufb00erent types of instructions in basic blocks and\na basic block adjacency matrix of function control \ufb02ow graph s as\nfeatures, as well as thenumber of string constants in basic b locks.\nBacci et al. [4] and Wang and Rountev [106] use strings and byt e-\ncode n-grams as features. Kim et al. [68] use opcode distribu tion.\nTo\ufb01ghi-Shirazi et al. [98] obtain symbolic expressions fro m dis-\nassembled function bodies through symbolic execution and t hen\nuse the words in them and their frequencies as features in a ba g-\nof-words approach. Tian et al. [97] represent functions by t heir\nso-called reduced shortest paths. Zhao et al. [116] use asse mbly\ninstruction embeddings based on skip-grams, convolutiona l neu-\nralnetworks(CNNs) togeneratebasicblockembeddingsfrom the\ninstruction embeddings, and long-short-term memory netwo rks\n(LSTM)toencodethesemanticsofbasicblocksandtheirrela tions\ninto features. Kanzaki, Monden, and Collberg proposed a cod e ar-\nti\ufb01cialitymetric basedonan N-gram instructions model[67 ].These features are all used in classi\ufb01ers, of which the model s\nserve to quantify stealth in the sense that an obfuscation ca n be\nconsideredmorestealthyif themodelsperformmorepoorlyo nit.\n3.2 Critique\nThe rede\ufb01nition of potency answered many of the critiques fr om\nSection 2.2. However, it still lacks in numerous ways. Some c ri-\ntiquesstillapply,suchasthoseonlayering(2.2.8),sensi tivity(2.2.10),\nand learnability(2.2.11). Additionalcritiques arethefo llowing.\n3.2.1 AllAnalysesTreatedEqually. Inthede\ufb01nitionofapotentob-\nfuscation,thecharacteristicsoftheanalysesagainstwhi chitmust\nbee\ufb00ectiveandmustnotbedefectivearenotconsidered.Sup pose\nthat an obfuscation is defective with respect to one analysi s be-\ncauseitdecreasesitscomputationtimeonaprogramfrom10s to5s,\nwhilebeinge\ufb00ectiveforanotheranalysis becauseitincrea ses that\nanalysis\u2019computationtimefrom2sto8s.Iftheadversaryha sboth\nanalysesavailable,theirminimalexecutiontimeincrease dfrom2s\nto5swiththeobfuscation;theircombinedtimeincreasedfr om12s\nto13s.So shouldthatbeconsidered apotentobfuscatingtra nsfor-\nmation?Accordingtothecurrent de\ufb01nition, it is not.\nThe new de\ufb01nition of potent transformations implicitly tre ats\nall considered analyses equallyimportantto mitigate, as i f attack-\ners have an oracle at their disposal that tells them which of a ll\npotentially useful analyses they should use given a concret e pro-\ngram they need to analyze. This worst-case scenario assumpt ion\ncande\ufb01nitelyberelevantinariskmanagementapproach[9]t oen-\nsurethat potentiallyrelevant attack strategies arenot ov erlooked.\nHowever,forevaluatingthepracticalstrengthofobfuscat ions,one\nclearlyneedstoconsiderwhichanalysesadversariesaremo relikely\ntodeploy.Tosomeextent,thisrelatestostealth:Whenadep loyed\nobfuscationisnotstealthy,thismightenableattackersto selectthe\nmostappropriateanalyses, oreven tocustomizethem.\nOnemightarguethatonecancounterthiscritiquebyselecti ng\nnotasetofindividualprogramanalysistechniquestoevalu atepo-\ntency,butasetofmulti-stepattackstrategies,inwhichea ch strat-\negyconsistsofpre-passanalysisthatis\ufb01rstdeployedtose lectthe\nmostappropriateactualanalysistechniquetogoafterthet argeted\nproperty,afterwhichthattechniqueisthenused.However, thisre-\nformulationwouldonlyshifttheproblemfromtheactualana lysis\ntechniques tothepre-pass analyses, ratherthansolve it.\nIn computer security, in general, a clear distinction is mad e be-\ntween security assessments and risk assessments. The forme r fo-\ncus solelyon thetechnical identi\ufb01cation of vulnerabiliti es and ex-\nploits,while the latter also considers the likelihood that attackers\nknow about an existing vulnerability and corresponding exp loit,\nthelikelihoodthattheattackersarewillingtousethatexp loit,and\nthepotentialdamagethatsuchexploitationwouldhaveonth evic-\ntimandtheirbusiness.Theproposedde\ufb01nitionsofpotenttr ansfor-\nmationsandstealthprovidenoguidanceonhowtoincorporat eor\nevaluatethe likelihoodthatadversaries willchoosecusto manaly-\nses, or how di\ufb03cult it is for them to do so, i.e., how attackers can\ndecideonthemost\ufb01t-for-purposeanalysis.\n3.2.2 Comparing Obfuscations. One shortcoming of NC\u2019s de\ufb01ni-\ntion of potency is that it does not allow one to compare di\ufb00ere nt\nobfuscatingtransformations,e.g., todetermine which one ismore\n\nBjornDe Su/t_ter\npotentforsomeprogram,against which analyses. They infac t ac-\nknowledge that, and refer to the work by Dalla Preda et al. for a\nsolution[34].Section4willfocusonthis solution.\n3.2.3 AdHocFormulas. NC\u2019sformulasforcomputingstealthcom-\nputethemaximumoffalsepositiveandfalsenegativerates. Wedo\nnotseewhythiswouldbeadvisableoverusingmorestandardi zed\nmetrics such as recall, precision, or the F1 metric. Many aut hors\nseem to agree with us. In the post-2009 literature on obfusca tion\ndetection techniques, including a 2016paper co-authored b yColl-\nberg[67],nota single paperuses theformulasproposedbyNC .\n3.2.4 ResilienceMissinginAction. Withtherede\ufb01nitionofpotency,\ntheoriginaldistinctionbetweenpotencyandresilienceha sbecome\nmoot.Their uni\ufb01cation de\ufb01nitely o\ufb00ers advantages, such as mov-\ningawayfromthearti\ufb01cialdistinctionbetweenconfusingh umans\nperforming manual work and confusing toolsthat automatean al-\nyses (and deobfuscating transformations). However, it als o comes\nwith major disadvantages. As observed by De Sutter et al., ma ny\npublications in the domain of software obfuscations featur e sub-\npar evaluations [40]. Particularly relevant for this work a re their\nobservations that few papers that present novel obfuscatio n tech-\nniques evaluate thoseobfuscations against real-world att acks and\nagainstadversariesthatadapttheirattackstrategiestot hefactthat\ncertainobfuscationshavebeendeployed,asis commonlythe case\nin thecat-and-mousegame ofSP, and as has been observedin hu -\nman experiments byH\u00e4nsch et al.[60].\nDeSutteretal.advocatetodi\ufb00erentiatebetweenpotencyan dre-\nsilience because authors of obfuscation papers are recomme nded\nto consider at least two classes of attacks against which to e val-\nuate the strength of their obfuscation techniques. In their vision,\nattacks on the assets being protected with some obfuscation de-\ntermine its potency, and attacks on the SP itself determine i ts re-\nsilience. The distinction between potency and resilience i s then\nstill pretty vague, but the continued usage of the two terms c an\nhelp to raise awareness about the best practices of SP evalua tion\nmethodologies.\n3.2.5 ConfusionaboutPotencyandResilience. Theseupdateddef-\ninitions have notbeenpickedupbymanycolleagues.Instead , the\noriginal de\ufb01nitions of potency and resilience are still oft en used,\nand sometimes inconsistently, as we mentioned in Section 2. 2.3.\nPerhaps this shouldcomeasno surprise:In2017,8years afte rthe\nrede\ufb01nition of potency that abandons resilience in his book [82],\nCollberg himself co-authored the work of Banescu et al. [6] t hat\nstill uses resilience when assessing thecapabilityof symb olic exe-\ncutiontoextractsecrets instead ofdeobfuscatingcode.\n3.2.6 LayeringNeglected,ofProtectionsandAnalyses. Layeringof\nSPs, and hence assessing the marginal strength of SPs, is sti ll ne-\nglected. So is the combination of analyses. In practice, att ackers\nrarelyrelyonasingleanalysis methodorasingleattackste p.The\nde\ufb01nitions ofNC donotre\ufb02ect this. Onecouldarguethatitis the\nresponsibility of the individual researchers to consider a nalyses\nthat are combinations of code analysis techniques rather th an in-\ndividual ones. We believe that anyone de\ufb01ning the aspects to be\nevaluated should stress the usefulness of this and discuss, in gen-\neral, theoptions todoso.3.2.7 Narrow Scope of Stealth. The updated de\ufb01nition of stealth\nbasedontheaccuracyofdetectorand locatorfunctions inst ead of\non the similarity between transformed code and original app lica-\ntioncodeiscertainlyanimprovement.Whentheresultsoflo cator\nand detector functions are merely used as data inputs to late r at-\ntacksteps,measuringtheiraccuracyonobfuscatedcodecan su\ufb03ce\ntoevaluatetheobfuscation\u2019sstealth.\nWhentheirresultsareusedascontrolinputs,i.e.,tomakes trate-\ngicdecisionsonwhichattackstepstoapplynextoronhowtoc on-\n\ufb01gurethenextattacksteps,measuringtheiraccuracyissti lluseful.\nInsuchcases,however,onehastoraisethequestionifthere might\nbe other ways to enable the same decisions. For example, mayb e\nanadversaryonlyneedstoknowwhichobfuscationtoolhasbe en\nused to make a strategic decision. Or maybe they need to know a\nspeci\ufb01c con\ufb01guration parameter with which an obfuscation w as\nappliedinsomelocationtomakea strategic decision?\nBy relying only on obfuscation locator and detector functio ns,\none cannot assess to what extent other \ufb01ngerprints of deploy ed\nprotectionscanberevealed thatenable strategic decision s.\n4 DALLA PREDA AND GIACOBAZZI\nDalla Preda and Giacobazzi, with a variety of collaborators , have\nworked extensively on theoretical foundations to make obfu sca-\ntions comparable, namely through the lens of abstract interpreta-\ntion(AI). In their view, attackers are limited in what they want t o\nanalyze and in their resources, so they model them as a speci\ufb01 c\nabstraction. The attacker then coincides with the consider ed ana-\nlyzer.\nDiscussingalltheformalfoundationsoftheirworkandpres ent-\ningtheirformalde\ufb01nitionsisnotfeasibleinthispaper,as itwould\nrequiretoolonganintroductiontoabstractinterpretatio nandthe-\noreticalresultsachieved inthatdomain.Unlikethede\ufb01nit ionsdis-\ncussedinprevioussections,theirresultsintheformofmat hemati-\ncalproofsandequationsarenotintuitiveandhardtointerp retfor\nnon-experts. We therefore summarize their main conclusion s and\nhowtheir work has evolved inan informal manner.\n4.1 De\ufb01nitions based on Completeness\nInitially, the study of AI to de\ufb01ne potency [30, 31] was based on\nthe idea that the statement \u201cobfuscation makes programs inc om-\nprehensibleforobservers\u201dcanberephrasedas\u201cobfuscatio nmakes\nprograms incomplete for abstract interpreters\u201d [48]. The p otency\nisthereforede\ufb01nedintermsofthe completeness ofAIswithwhich\nattackers might try to reveal properties of a program that th e de-\nfender is trying toprevent withobfuscations.\nAnanalysis ofa program modeledas an AIis incompleteif the\nanalysis produces an imprecise result. An imprecise result occurs\nwhenananalysisproducessome validresultthatislessprec isethan\nanothervalidresultthattheanalysiscanrepresent .Forexample,con-\nsideravaluesetanalysisthatcomputesandpropagatesinte rvalsof\ntheform [/u1D44E,/u1D44F]foranyrealvaluesof /u1D44Eand/u1D44Fwith/u1D44E\u2264/u1D44F.Ifsuchan\nanalysis reports that some variable in a program can hold val ues\nin the range [0,10], while it can actually only hold values in the\nrange[1,5],theanalysis hasproven tobeincompleteforthatpro-\ngram. Importantly, incompleteness depends on both the prog ram\n\nA NewFrameworkof So/f_tware Obfuscation Evaluation Criteria\nand the analysis. Some concrete analysis, and variations th ereof,\ncan becompleteonone programand incompleteonanother one.\nThe mentioned authors de\ufb01ne the potency of an obfuscation\nin terms of its impact on completeness: Which analyses becom e\nincompleteonwhich programs bydeploying an obfuscation?\nAnalyses modeled as AIs operate on abstract domains. The do-\nmains themselves consist of lattices, but all possibledoma ins also\nform a lattice, meaning that they are ordered in terms of the r el-\native precision of the properties that they can represent an d po-\ntentially deduce from programs. And hence so are the analyse s:\nSomecanrepresentmoreprecisepropertiesthanothers,som ecan\ndeducemoreprecisepropertiesthanothers,and hence somea nal-\nyses can deduce certain properties on more programs than oth er\nanalyses.\nInolderwork[34\u201336],anobfuscationisconsideredpotentw hen\nthere is a property that is not preserved, i.e., when some AI t hat\ncouldcomputethatpropertyontheoriginalprogramcannolo nger\ncompute it after obfuscation. Di\ufb00erent obfuscations can th en be\ncompared basedonthemostprecisepropertiesthey preserve .\nIn 2012\u20132017,potencywas rede\ufb01ned in termsof speci\ufb01canaly -\nses thatareusedtoreveal certainproperties[50,51].Thep otency\nofanobfuscationwithrespecttoaspeci\ufb01canalysis, progra m,and\nproperty is then determined by whether or not the completene ss\nof the analysis on the program is impacted. If the analysis ca n no\nlonger compute the property on the obfuscated program, the o b-\nfuscation is considered to bepotent.Importantly,even if t heanal-\nysis can still extract the property, the obfuscation might s till be\nuseful.Althoughtheobfuscationthencannotcounterthats peci\ufb01c\nanalysis, it might be able to counter simpler variants there of. To\nassess thisutility,the potencyrange ofanobfuscationwasde\ufb01ned\nintermsofitsimpactonthecompletenessofcompressedvers ions\nof theanalysis, with \u201ccompressed\u201d meaning \u201cless precise\u201d.\nIn 2018, Bruni at al. [13, 14] proposed an alternative method\ntoassess obfuscationsthataim tocountermodelcheckingat tacks\nbased on abstraction re\ufb01nement, such as CEGAR [25]. In such a t-\ntacks,amodelcheckeriterativelytriestocheckthevalidi tyofmod-\nels, startingwith avery abstractdomainthatcanlead toaco nclu-\nsionquickly.Whenaconclusiveresultcannotbereachedwit hthe\ndomainusedinoneiteration,amoreprecisere\ufb01neddomainis cho-\nsen,andanewattemptismadeinanextiteration.Thestrengt hof\nanobfuscationisthende\ufb01nedastheextenttowhichitcanpre vent\nthecheckerfromcomingtoavalidconclusioninfastearlyro unds\nwithveryAIs.Interestingly, theauthorsillustratethatm anyexist-\ning data \ufb02ow analyses, such as liveness analysis, constant p ropa-\ngation, and available expression analysis, can be reformul ated as\nmodel-checking problems, thus widening the applicability of this\nmethod.\nInfollow-upresearch in2022,Brunietal.[15]presentAIre pair\nstrategies toautomaticallyre\ufb01nedomainstomaketheAI(lo cally)\ncomplete for a given program, with the goal of enabling progr am\nveri\ufb01cationmethodstostartwithanyabstractdomain.Ifth einitial\ndomainis tooabstracttoavoid falsealarms,it canbere\ufb01ned with\nthis strategy to produce complete results. The user of an AI t hen\nnolongerneedstochoosethedomainbeforehandtoyieldopti mal\nformal veri\ufb01cation results. In our eyes, this comes close to how\nreverseengineersadapttheirstrategiesandanalysesandh owthey\nmove ontomorecomplexones if their initial,basic attempts fail.In 2022\u20132023, Campion et al. introduce the notion of /u1D716-partial\nincompleteness[17,18].Anabstractinterpretercanbe /u1D716-partialin-\ncompletewithrespecttoagivenprogramandagiven(setof)i nput\nvalues, meaning that the imprecision of the AI result is boun ded\nby/u1D716, thatis, thedistance betweentheresults oftheabstractio nof\nthe concrete semantics (e.g., [1,5]in the value set analysis exam-\npleabove) and theresultoftheAIonthegiven input(e.g., [0,10])\nis at most /u1D716. For this, they de\ufb01ne distance metrics on the abstract\ndomains.Theyarguethattheabilitytoquantifytheamounto fim-\nprecisioninducedintheAIbyanobfuscatingtransformatio ncould\nbeused tomeasure thepotencyofsuch a transformation.\nInterestingly, they concede that, in general, one cannot au to-\nmatetheprocedureofdecidingwhethertheAIofagivenprogr am\non a given input satis\ufb01es a given precision bound /u1D716. Still, the no-\ntions of/u1D716-partial incompleteness and bounded distance between\nactual properties and obtained analysis results can also op en op-\nportunitiestoreasonaboutthestrengthofanalysesthaton lyhave\ntocomputeapproximateresults(seeSection3.1).Tothebes tofour\nknowledge, this directionhas notyet beenexplored.\nIn 2025,Giacobazzi and Ranzato [53] showed that the program\npropertyofhavingthebestpossibleAIisnottrivialand,in general,\nhard to achieve. Among others, they showed the impossibilit y of\nachieving the best correct abstraction property through mi nimal\nabstraction re\ufb01nements or simpli\ufb01cations of the abstract d omain.\nThis putsinto questiontheunderlying assumptionof someof the\ndiscussed de\ufb01nitions of potency that are based on which anal ysis\ncanstillreveal which properties.\nA strength of several works is that they not only allow to rea-\nsonaboutthestrengthofobfuscations,butalsoincludetec hniques\nto automatically derive obfuscations to counter the analys es de-\n\ufb01ned in terms of AI [34\u201338, 49]. This includes obfuscations t hat\ntarget control \ufb02ow analysis, data \ufb02ow analysis, model check ing,\nand more.\n4.2 De\ufb01nitions based on Adequacy\nIn 2023, Giacobazzi et al. [52] proposed to complement (and e ven\nreplace) completeness as the basis for assessing potency wi thad-\nequacy.They observethat\u201ccompleteness characterizationsdonot\nreally deal with the loss of precision due to the choice of the ab-\nstractobservation,sincetheycharacterizeonlywhethert hereisan\nextralossofprecisionduetothecomputationonobserved/a bstracted\ndata (compared with the observation of the concretely compu ted\nresult).\u201dInotherwords,completenessisameasureofthemi smatch\nbetween the computations in a given program and the chosen ab -\nstractdomain(lattice) in which theprogram is interpreted ,rather\nthanmeasuringhowgoodthatdomainisforrevealing theprop er-\nties inwhich an attacker/analyst is actuallyinterested.\nConsiderthetrivial \u22a4abstractionthatabstractsallconcreteval-\nuesto\u22a4.Itslatticeconsistsofoneelement \u22a4.Theresultofsuchan\nAIonanyprogramproduces \u22a4,whichisbyconstructionthemost\npreciseoutcomethatcanbepresentedinthelattice,sosuch anAI\nis byconstructioncomplete.Butit is completelyuseless: i ts result\ncomesdownto\u201cIdon\u2019tknow.\u201dInotherwords,theproducedres ult\nistheleastpreciseresultthattheattacker/analystcanbe interested\nin,despite theinterpretation being complete.\n\nBjornDe Su/t_ter\nNotice that such an element \u22a4is indispensable in many analy-\nses:Foranundecidableanalysistobesound,itneedstobeca pable\nof responding \u201cI don\u2019t know\u201d, for which the used lattice incl udes\n\u22a4.\nThe adequacy of an AI for a given program is then de\ufb01ned as\ntheabilityoftheinterpretationtoproduceanalysisresul tsforthat\nprogram that contain strictly more information than \u22a4. The rela-\ntive adequacy of an AI for a program, i.e., adequacy with resp ect\ntosomeotherelement /u1D70Fofthelattice,isthende\ufb01nedastheability\ntoproducea resultthatis strictlymoreprecisethan /u1D70F.\nThe link with potency then is that an obfuscation can be con-\nsidered potent with respect to some analysis and some progra m\nif it can make the analysis become inadequate on the obfuscat ed\nprogram whileit wasadequateontheoriginal program.\n4.3 Critique\n4.3.1 PracticalApplicabillity. WhiletheuseofAItheorytoevalu-\nate thestrength of practical obfuscations against practic alattacks\nhasbeendiscussed,suchasobfuscationstomitigatedisass emblers\nand slicing [51], it remains mostly a theoretical subject, o f which\nthepracticalapplicabilityisunclear.AlthoughtheAIwor kforthe\nevaluation of model checking by Bruni et al. [13, 14] might ha ve\nthe potential for wider applicability, a recent 571-paper l iterature\nreview on evaluation methodologies in SP research [40] obse rves\nthat software obfuscation and deobfuscation researchers d o not\nhave a strong appetite for this form of analysis: Model check ing\nwas one of the least popular attack methods, used in only 4% of\nthe papersthat used concrete attackmethods toevaluate obf usca-\ntions.\n4.3.2 A/t_tacksSuccess/FailureinsteadofDelay. Inthe\ufb01eldofprac-\nticalMATESP,itisunderstoodthatMATEattackscannotbeco m-\npletely prevented. Given enough time and e\ufb00ort, adversarie s will\nalways be able to get what they want. The main goals of obfus-\ncation therefore are to delay attacks, to increase their cos ts, and\nto decrease their return-on-investment. In contrast, the e xisting\nresearch on AI and obfuscation focuses by and large on evalua t-\ning whether or not some property can be revealed with some in-\nterpretation/analysis and whether this can be prevented wi th an\nobfuscation. In other words, this research focuses on scena rios in\nwhich thedefender tries tomakeattacksfail rather thantry ing to\ndelaythem.Althoughthecomplexityofdi\ufb00erent AIs is compa red\nin some works to compare the strength of di\ufb00erent obfuscatio ns,\nthelinkbetweenactualattackdelayandanalysiscomplexit yisnot\nmade. This research hence seems tomiss thepointofMATESP.\n4.3.3 Soundness. Research on AI and obfuscation only considers\nsound analyses. This is \ufb01ne in many program analysis scenari os,\nsuch as program veri\ufb01cation. In the MATE attack model, by con -\ntrast, attackers use any analysis, sound or unsound, that al lows\nthem to reach their goal. All dynamic analyses, e.g., are uns ound.\nIn this regard, this research again completelymisses thepo int.\n4.3.4 ProgramUnderstandingOnly. In2008,Giacobazzi[48]stated\n\u201cThe lack of completeness of the observer is therefore the co rre-\nsponding of its poor understanding of program semantics\u201d. T his\npinpointsanimportantlimitation:Thisresearch,atleast inthe\ufb01rst\norder,targetssoftwarecomprehension.Itneglectstheoth erMATEattackgoalsonobfuscatedsoftware.Inadditionto codecomprehen-\nsion,Schrittwieser et al.[92]identi\ufb01ed \ufb01ndingthelocation ofdata ,\n\ufb01ndingthelocationofprogramfunctionality ,andextraction ofcode\nfragments as importantattacker targets. NC also claim that an ad-\nversary targeting anobfuscatedprogramtypicallygoes thr ough a\nlocate-alter-testcycle[82].Neglectinglocation\ufb01nding attacksisa\nclearlimitationof AIresearch intothemeaning of potency.\n4.3.5 Defender vs. A/t_tacker Perspective. In much if not all of the\ncitedresearch,theperspectiveoftheorydevelopmentisth atofde-\nfenders that know which property of which program fragments\nthey want to hide with obfuscations. The defenders hence kno w\nwhich analyses to consider for their assessment of the obfus ca-\ntions\u2019 strength. Attackers, on the contrary, often do not kn ow a\nprioriwhichpropertytheyareafter.Inparticularindataa ndfunc-\ntionalitylocation\ufb01ndingattacks,theattackersbyde\ufb01nit iondonot\nknow thefragments ofwhich they want toreveal properties.\nMoreover, as defenders know which properties they want to\nhide, they can reason about the possible re\ufb01nements of analy ses\nthat undo the impact of the chosen obfuscations. Attackers t hat\ntryto\ufb01ndcodeordataorthattrytounderstandaprogramdono t\nknowaprioriwhichpropertiestheyareafter.Sohowcanthey de-\nploysimilarre\ufb01nementstrategies?Iftheycannot,thenwhy should\ndefenders worryaboutthecapabilities ofre\ufb01nement strate gies?\nFor most of its history, research on AI and obfuscation did no t\naddressthequestionofhowdi\ufb03cultitisforanattackertoch oose\nthebest or simplest suitableAI for their attack. Only in 202 5,Gia-\ncobazzietal.startedtoaddress thisissue,concedingthat thismay\nindeed be di\ufb03cult [53]. This puts in doubt the relevance of us ing\ncompletenessoradequacyofthebestpossibleabstractions foreval-\nuatingobfuscationstrength. Inoureyes, thedefender shou ldcare\nmostly, if not only, about the analyses that an attacker will possi-\nblyorlikelyuse,ratherthanontheoreticallybetter,buti npractice\nunlikelytobeused,attackmethods.\nAn example might make this critique concrete. Consider inte r-\nprocedural constant propagation [16], and a scenario in whi ch a\ncontext-insensitive variant of the analysis is not precise enough\nto reveal some interesting program property, while some /u1D458-depth\ncontext-sensitive variant is precise enough for some /u1D458. Undoubt-\nedly,the context-sensitive variant, which will beslower a nd have\na larger memory footprint, should be considered the most com -\nplex.Thereexistcountlessvariationsoftheanalysiswith complexi-\ntiesinbetweenthosetwovariants,namelyvariationsthata nalyze\nonly speci\ufb01c parts of the program in a context-sensitive man ner\nwhilehandlingtherestinacontext-insensitiveway.Intui tively,the\nvariantthatrequirestheleastcontext-sensitivityshoul dbeconsid-\neredthesimplestone.Now,whilethedefendermightknowwhe re\ncontext-sensitivityisusefulandwherenot,hencebeingab letode-\ntermine the simplest completeanalysis for their program at hand,\nhowis anattacker supposedtodetermine this variant?In par ticu-\nlarwhenan attackerdoesnot yet know therelevant propertie sto\nbe revealed, this seems inconceivable. So what is the releva nce of\nthatbestand simplest completevariant?\nOne might think that attackers would go with the simplest or\nfastest analysis \ufb01rst and switch to more precise and slower o nes\nonlywhentheinitialonesfail.So,\ufb01rstrun,e.g.,acontext -insensitive\nanalysis across the entire program (which should be cheap), then\n\nA NewFrameworkof So/f_tware Obfuscation Evaluation Criteria\nusewhateverinformationtheyextractedtotargetacontext -sensitive\nanalysis tothemostlikely locationoftheprogram.\nThis is probably often how attackers work, but certainly not\nalways. A counterexample is a crypto key extraction attack, for\nwhichCeccatoetal.performedexperimentswithprofession alpen\ntesters[22].Themostexperiencedamongthemskippedstati canal-\nysisentirely,assumingthatthedeployedSPswouldmaketha ttoo\nhard,sotheyusedonlydynamictechniquesfromthestart.In other\nwords,theyoptedforamorecomplexanalysismethodoverasi m-\nplerone, even thougha simpleronewouldhave workedperfect ly\nwellonanunobfuscatedprogram.\nInanycase,eveniftheattackersdostartwiththesimplesta naly-\nsesandre\ufb01nethemastheyobtainadditionalinformation,we think\nitisrelevanttoconsiderthee\ufb00ortrequiredtoextractthat informa-\ntion and how precise it would need be, e.g., to pinpoint the mo st\nlikelylocationintheprogramwheremoreprecisionisneede d.We\nshouldnot assumethatthere\ufb01nement comesfor free.\nOn this topic,thereexists quitesomework onon-demand data\n\ufb02ow analysis or demand-drive data \ufb02ow analysis. Such analys es\nare designed to be more e\ufb03cient than blindly running the most\ncomplexanalysis variantsonawholeprogram.Thoseon-dema nd\nanalyses, which adapt on-the-\ufb02y are more complex than analy ses\nfor which an a priori determination was made about which loca -\ntions in the program require a higher form of sensitivity. So the\nconsideration of such analyses does not solvethe issue that AI re-\nsearch startstoomuch from thedefender\u2019s perspective.\nThe work by Bruni et al. cited above [15] is highly related. In\nthatwork,it is alsoassumed thattheuserwillruna simplean aly-\nsis\ufb01rst,andtheniterativelyrunevermorere\ufb01nedversions thereof.\nAllofthate\ufb00ortshouldbeconsideredwhenevaluatingpoten cyor\nresilience, however, not just the complexity of the \ufb01nal ana lysis\nversion. Maybe the journey is not more important than the des ti-\nnation, butitde\ufb01nitely is as important.\n5 ATTACK TOOLMETRICS\nA practical approach to evaluate the potencyof obfuscation s is to\nmeasuretheirimpactonactualattacktools.Onecancompare how\nmuchresourcesatoolrequiresonvanillaandobfuscatedpro grams,\nandhowwelltheresultsobtainedonthevanillaprogramsapp rox-\nimatethoseontheoriginal ones.\n5.1 ExampleUsagein Literature\nExamples are Foket et al. [46] comparing points-to set sizes com-\nputed byWALA [104] onobfuscated Java programs, Linn and De-\nbray[72]countinghowmanyinstructionsnolongergetdisas sem-\nbled correctlyby objdump[56] and IDA Pro [63],Vanden Broec k\net al. [100] counting how many CFG edges are no longer drawn\ncorrectlyin CFGs displayed bytheIDA Pro disassembler [63] and\nhowmanytimescodeisduplicatedinCFGsreconstructedwith Bi-\nnaryNinja[1],andCozzaetal.[32]countinghowmanyinvari ants\namong PLC (progammable logic controller) register values c an be\nuncovered byDaikon [42].Whensuch metrics canbecategoriz ed\nastrueandfalsepositivesandnegatives, qualitymeasures suchas\nrecall,precision, accuracy,F1-score, etc.areoftenused [87].\nPapers that contribute deobfuscation techniques (e.g., [1 1, 73,\n94, 113]) obviously evaluate the resilience of obfuscation s. Theydo so by reporting the aforementioned quality measures for t heir\ncontributedtechniquesonsamplesets,andbycomparingthe sim-\nilarity of the deobfuscated code to the obfuscated code. The same\nholdsforpapersthatcontributeobfuscationtechniquesan devalu-\natethem against known deobfuscationmethods(e.g., [80,91 ]).\nIn their work on obfuscation strategies for industrial cont rol\nsystems, Cozza et al. [32] use two metrics to quantify resili ence\nalong two dimensions. First, they consider the number of inv ari-\nantsestablishingconnectionsbetweengenuineandspuriou sregis-\nters.GenuinePLCregistersaretheonesthatactuallycontr olphys-\nicalprocesses,whilespuriousregistersaretheonesthats eemtobe\nusedforsuchcontrol(becauseoftheobfuscation)butareno t.The\nideaisthatsuchinvariants complicatetheattacker\u2019sabil itytodis-\ncern between those two types of registers and their trueand f ake\nusage. Thesecond metric is the number of aggregations (clus ters)\nofPLC registers associatedwithphysicaldevices belongin gtothe\nsamephysicalprocess.Theseaggregations supposedlymake itdif-\n\ufb01cult for the attacker to separate genuine from spurious phy sical\nprocesses handled by the same PLC. Cozza et al. use Daikon [42 ]\ntoextracttheinvariants from their usecase applications.\n5.2 Critique\n5.2.1 Ad hoc Nature. Most tool-based metrics are ad hoc. For ex-\nample,VandenBroecketal.usedtwoentirelydi\ufb00erentmetri csfor\nevaluating the impact of the same obfuscations on two disass em-\nblers,becausethosetwotoolsdi\ufb00erinthewayinwhichtheyr econ-\nstructfunctions and their CFGs [100].For IDA Pro, which ass igns\neachbasicblockstoexactlyonefunction,theyreporthowtr ueand\nfakecontrol\ufb02owtransfers arecorrectlyinterpretedanddi splayed\nin the CFGs. For Binary Ninja, which assigns each basic block to\neveryfunctionfromwhichtheblockisreachablethroughint rapro-\nceduralcontrol\ufb02owtransferidioms,theyreporttheamount ofre-\nsultingcodeduplicationinthecreated CFGs.\nBecause of their ad hoc nature, it is questionable whether th e\nconclusionsdrawnfromthemeasurementsaremoregenerally valid,\ni.e.,beyondthespeci\ufb01ctoolsandtoolversionsthathavebe eneval-\nuated.Suchanswerscanonlybeansweredwhensu\ufb03cientinsig ht\ninto theinternal operationof thetoolsused is available, e ither on\nthe side of the authors of the publications or on the side of th eir\nreaders.Thelatterrequiresthatthepaperscontainsu\ufb03cie ntinfor-\nmation.This is de\ufb01nitely notalways thecase[40].\nImportantly,notonlyis thenatureofthetool-basedmetric sof-\nten ad hoc, so is the deployment and con\ufb01guration of the tools .\nFor example, Van den Broeck et al. evaluated the use of IDA Pro\nwitha number of simpleplugins thathelpedthetooltooverco me\nsome of its most basic shortcomings resulting from the fact t hat\nitwas not developed tohandle theforms of codeproducedbyth e\nevaluated obfuscation[100]. In otherwords, Vanden Broeck et al.\nevaluated theuse of thetoolin oneof the possibleways in whi ch\nattackers might use it after adapting their mode of operatio n to\ntheexistenceofthenovelobfuscation.Thisisagoodpracti ce[40].\nTheir plugins only covered a tiny fraction of the adaptation s that\nanattackermightmake,however, sohowgenerallyapplicabl eare\ntheir results?Again, this questionneeds toberaised.\n\nBjornDe Su/t_ter\nAstandardizedreverseengineeringanalysistoolbox,with acom-\nmonlyacceptedsetofanalysis toolsandcommonlyacceptedm ea-\nsurement criteria might help to overcome the potentially li mited\nvalidity of ad hoc metrics. At least it could lead to some stan dard-\nization of evaluation methods, in particular when also the b ench-\nmark programs would be standardized. As observed in literat ure,\nhowever, no standardizationis currentlyforming [40].\nAttempts have recently been made to create a reusable and ex-\npandable toolboxand models to evaluate the strength of SPs [ 44].\nItisunclearwhethersuchatoolboxcouldeverbeconsidered com-\nplete. For one, we do not think that there exists such a thing a s\na complete tool: attackers can use unsound techniques, and s ome\ntechniquesworkbetterinsomecasesthanothers.Toremains ound\norsoundish,manydi\ufb00erent heuristicsandtechniquescanbe used\nby tools. To optimize user-friendliness, additional heuri stics and\ntechniquescanbeused.Alloftheseworkbetterinsomescena rios\nthan in others, and importantly, they may not all be compatib le.\nThe already cited work Van den Broeck et al. is exemplary [100 ].\nBecause the policies of adding basic blocks to functions di\ufb00 er so\nmuch among the most popular disassemblers, some metrics sim -\nplyareirrelevant and/ormeaningless forsomeofthem.\nThe problem goes deeper even, because it is hard to come up\nwith metrics that are relevant to as many scenarios as possib le.\nFor example, if a disassembler does not reconstruct functio ns cor-\nrectly, how does one measure the quality of that reconstruct ion?\nAfter having given this question much thought, we did not \ufb01nd a\ngood answer. To some extent, this issue is the same as with the -\noretic complexity metrics: They may be relevant and validat ed in\nonescenario(unobfuscatedcode),butthisdoesnotimplyth eirrel-\nevance and validityin otherscenarios (obfuscatedcode).\nA standard evaluation tool suite will certainly bene\ufb01t our d o-\nmain. The Common Criteria for certifying smart cards is a goo d\nexample of similar standardization [75]. For the more philo sophi-\ncal/theoretical question of how to de\ufb01ne potency, which is a non-\nfunctional feature, this will su\ufb03ce, however. First, as dis cussed at\nseveral points already, attackers re\ufb01ne their strategies a s they go:\nhow to take into account the e\ufb00ort/di\ufb03culty/success of the m ost\nlikely re\ufb01nement strategies? Secondly, not all possible cu stomiza-\ntions/re\ufb01nements of analyses can be included? How to take th at\ninto account? All in all, we do not think a complete tool is pos si-\nble,andhencethede\ufb01nitionorframingoftheevaluationcon cepts\nneeds to handle that limitation. Even if a completetoolboxw ould\never beachievable, until weget there, we needa back-up.\n5.2.2 Narrow Scope. As Ceccato et al. observed [22], there exist\nmultipeoptionstoovercomeSPs,deobfuscationbeingonlyo neof\nthem, and likely the hardest. While this does not diminish th erel-\nevance of theexisting studies of automateddeobfuscation, it does\nputintoquestionthefocusofresilience ondeobfuscation, andthe\ncorresponding neglecting of alternatives to defeat SPs by b ypass-\ning them, overcoming them, or building workarounds. Ceccat o et\nal.\u2019s taxonomydescribes thesealternative strategies.\n5.2.3 A/t_tackOversimplification. Anotherwayattacksareoftennar-\nrowed down to deobfuscation, and therefore oversimpli\ufb01ed, is in\ntheir neglect of how to locate the code to be deobfuscated. On e\nclassofpapersthatsu\ufb00ersfromthisispapersfocusingonde obfus-\ncation of mixed Boolean-arithmetic (MBA) expressions. The vastmajorityofthosepapers,suchas[73],onlystudythedeobfu scation\nof symbolic MBA expressions but sidestep the problem of how t o\nidentify deobfuscatableexpressions inbinaries.\nDe Sutter et al. [40] also observed that most obfuscation pub li-\ncationsonlyconsideroneindividualanalysis methodinthe irtool-\nbasedevaluation,iftheyhaveoneatall.Clearly,guidance isneeded\ntowardsconsideringreal-worldattacksinwhichmultiplem ethods\nare combined. Recently, tools and models for doing so have be en\nproposed[44],which maybea \ufb01rststepin this direction.\n5.2.4 UnvalidatedMetrics. Justasmanysoftwarecomplexitymet-\nricshavenotbeenvalidatedonobfuscatedcode(seeSection 2.2.1),\nnoneoftheadhoctool-basedmetricshavebeenvalidated,i. e.,the\nrelation between those metrics and actual attack e\ufb00ort or su ccess\nrate has not been determined. For example, Van den Broeck et\nal. [100] count how many edges are drawn by IDA Pro in func-\ntions\u2019 control \ufb02ow graphs, but is it really relevant whether or not\nan edge that IDA Pro knows about and records in its database of\nCFGs, is drawn on screen or not? This has not been validated at\nall.\nThis criticism is harsh, as it is probably not feasible to val idate\nall relevant metrics with empirical experiments because th oseare\ntooexpensive. Authorsreportingtool-basedmetricsshoul dhence\nprobablybeforgiven. Still,it is a threattovalidity.\n5.2.5 BuggyandIncompleteTools. Besidestheimpactoftoolavail-\nability(seeSection2.2.4)andoftheirlimitationsandpec uliarheuris-\ntics (see Sections 2.2.2 and 5.2.1), an additional issue is t hat soft-\nware analysis tools invariably have bugs. Commercial prote ction\ntools sometimes exploit these, e.g., by injecting instruct ions into\nabinary thatcausecertaintoolstocrash.Academic analysi s tools\nareobviouslyalsooftenbuggyinthesensethattheirimplem enta-\ntion will typically be incomplete. As research tools, their authors\nmightvery well havecutsomecorners tomakethetoolswork on\ntheir usecases and benchmarks, butnotbeyond them.\nObviously, SP strength evaluations should be transparent w ith\nrespect to results depending on bugs or completeness issues with\nthe used tools. Although we know of no papers published in top\nconferences or journals that violate this requirement over tly, we\nhavereviewed(andblockedfrompublications)papersmakin gthis\nmistakemultipletimesinthepast.Sowethinkthisissuedes erves\nexplicithandling intheguidelines.\n5.2.6 ConfusionaboutPotencyandResilience. Theuseoftheterm\nresilience by Cozza et al. does not correspond to CTL\u2019s origi nal\nde\ufb01nition, as it does not target automated deobfuscation. T his is\nin line with what was already mentioned in Section 2.2.3, nam ely\nthatresearchers sometimesclaimtoevaluate,assess,orpr edictre-\nsilience because they study automated techniques, but in fa ct do\nnot study deobfuscation techniques [6, 7], so whether they r eally\nstudy potency or resilience is up for discussion. In this cas e, the\nquestionis whether computinginvariants canbe seen as deob fus-\ncation.Clearlytheexisting de\ufb01nitions areconfusing.\nTosomeextent,this seems unavoidable,becausesomeanalys is\ncan be used as part of deobfuscation, but also exist outside t hat\ncontext.Anotherexampleisthecomputationofpoints-tose tsizes,\nas done by Foket et al. [46]. Computing points-to sets (a.k.a . as\nclass analysis [57]) is necessary to compute precise call gr aphs of\n\n",
    "is_processed": true,
    "process_error": null,
    "content_length": 65521,
    "local_pdf_path": "data/pdfs/A New Framework of Software Obfuscation Evaluation Criteria_75d66651.pdf"
  },
  "arxiv_7f583f7c4e2568630aacbbbe4d2bdc8f": {
    "title": "Towards Understanding Barriers and Mitigation Strategies of Software Engineers with Non-traditional Educational and Occupational Backgrounds",
    "url": "http://arxiv.org/pdf/2204.04318v1",
    "source": "arxiv",
    "authors": [
      "Tavian Barnes",
      "Ken Jen Lee",
      "Cristina Tavares",
      "Gema Rodr\u00edguez-P\u00e9rez",
      "Meiyappan Nagappan"
    ],
    "published_date": "2022-04-08T22:51:19+00:00",
    "summary": "The traditional path to a software engineering career involves a\npost-secondary diploma in Software Engineering, Computer Science, or a related\nfield. However, many software engineers take a non-traditional path to their\ncareer, starting from other industries or fields of study. This paper proposes\na study on barriers faced by software engineers with non-traditional\neducational and occupational backgrounds, and possible mitigation strategies\nfor those barriers. We propose a two-stage methodology, consisting of an\nexploratory study, followed by a validation study. The exploratory study will\ninvolve a grounded-theory-based qualitative analysis of relevant Reddit data to\nyield a framework around the barriers and possible mitigation strategies. These\nfindings will then be validated using a survey in the validation study. Making\nsoftware engineering more accessible to those with non-traditional backgrounds\nwill not only bring about the benefits of functional diversity, but also serves\nas a ...",
    "categories": [
      "cs.SE",
      "cs.CY",
      "D.2; K.4.2"
    ],
    "entry_id": "http://arxiv.org/abs/2204.04318v1",
    "meta": {
      "content_type": "academic_paper",
      "is_curated": true,
      "source_quality": 8
    },
    "content_type": "academic_paper",
    "text": "Towards Understanding Barriers and Mitigation Strategies of\nSoftware Engineers with Non-traditional Educational and\nOccupational Backgrounds\u2217\nTavian Barnes\u2020\nKen Jen Lee\u2020\nCristina Tavares\u2020\ntbarnes@uwaterloo.ca\nkenjen.lee@uwaterloo.ca\ncristina.tavares@uwaterloo.ca\nUniversity of Waterloo\nWaterloo, Ontario, CanadaGema Rodr\u00edguez-P\u00e9rez\ngema.rodriguezperez@ubc.ca\nUniversity of British Columbia\nKelowna, British Columbia, CanadaMeiyappan Nagappan\nmei.nagappan@uwaterloo.ca\nUniversity of Waterloo\nWaterloo, Ontario, Canada\nABSTRACT\nThe traditional path to a software engineering career involves a\npost-secondary diploma in Software Engineering, Computer Sci-\nence, or a related field. However, many software engineers take a\nnon-traditional path to their career, starting from other industries\nor fields of study. This paper proposes a study on barriers faced\nby software engineers with non-traditional educational and occu-\npational backgrounds, and possible mitigation strategies for those\nbarriers. We propose a two-stage methodology, consisting of an\nexploratory study, followed by a validation study. The exploratory\nstudy will involve a grounded-theory-based qualitative analysis of\nrelevant Reddit data to yield a framework around the barriers and\npossible mitigation strategies. These findings will then be validated\nusing a survey in the validation study. Making software engineer-\ning more accessible to those with non-traditional backgrounds will\nnot only bring about the benefits of functional diversity, but also\nserves as a method of filling in the labour shortages of the software\nengineering industry.\nCCS CONCEPTS\n\u2022Social and professional topics \u2192Computing profession .\nKEYWORDS\nnon-traditional backgrounds, barriers, mitigation strategies, career\nswitch, software engineering career\n1 INTRODUCTION\nThe software engineering (SE) industry has seen significant annual\ngrowth in North America over the last decade [ 7,27]. Even though\nthe number of Computer Science (CS) and SE degrees has been\nincreasing as well [ 14,15], there is still a shortage of software engi-\nneers [ 18,26]. This surplus in labour demand brought to attention\npaths into a SE career that are alternatives to the traditional path,\ni.e., via a university degree in CS or SE related areas [ 56]. However,\n\u2217This study was accepted at the MSR 2022 Registered Reports Track as a Continuity\nAcceptance (CA).\n\u2020Equal contributors by alphabetical order\nMSR\u201922, May 2022, Pittsburgh, PA, USA\n2022. ACM ISBN 978-x-xxxx-xxxx-x/YY/MM. . . $15.00\nhttps://doi.org/10.1145/nnnnnnn.nnnnnnnthere is little understanding on how viable and effective it is for\nsomeone with a non-traditional educational and/or occupational\nbackground to switch into a SE career. For the purposes of this\nwork, a software engineer has a traditional background if they com-\npleted a post-secondary program in SE, CS, or a closely related field,\nthen begin their career as a software engineer. A non-traditional\nbackground then applies to software engineers who did not follow\nthis traditional career path, including anyone who switched into\nSE from another career, who first studied another field before SE,\nor who taught themselves SE.\nAs such, this work aims to contribute a first step towards under-\nstanding the barriers faced by those with a non-traditional occupa-\ntional and/or educational background trying to switch into a SE career,\nand explore possible mitigation strategies for these barriers . Having\nan understanding of the barriers and mitigation strategies serve an\nessential step in making SE careers more accessible to those with a\nnon-traditional background. This could not only have implications\nfor filling in the current labour shortage, but also contribute to\nhaving a more diverse SE community. While not a form of social\ndiversity per se, academic background diversity is a form of func-\ntional diversity [ 23]. While not much research has been done on\neducational background diversity in CS/SE, prior works in other\nareas found various benefits. For instance, educational diversity\ncan aid in avoiding the \u201cgroupthink\u201d mindset [ 29]. Lorenzo and\nReeves also found educational background diversity having a statis-\ntically significant correlation with how innovative enterprises are\nacross eight countries (US, France, Germany, China, Brazil, India,\nSwitzerland, and Austria) [37].\n2 RESEARCH QUESTIONS\nThis paper aims to investigate the following research questions:\nRQ1 What are the perceived barriers faced by those with a non-\ntraditional educational and occupational background who are\neither software engineers, or trying to switch into a SE career?\nMotivation: Understanding what these barriers are could\nprovide valuable insights into how the SE industry is limited\nin its accessibility to those with diverse educational and\noccupational backgrounds currently.\nRQ2 What are mitigation strategies that could lower observed bar-\nriers to succeed?arXiv:2204.04318v1  [cs.SE]  8 Apr 2022\n\nMSR\u201922, May 2022, Pittsburgh, PA, USA Barnes, Lee and Tavares, et al.\nMotivation: Barriers are only half the story; a comprehen-\nsive understanding also includes exploring the mitigation\nstrategies currently employed by those facing these barri-\ners. Insights into RQ2 could have implications on how well\neach barrier is mitigated, how current mitigation strategies\ncan be facilitated by various parties, and the possibilities of\nempowering those with a non-traditional background with\nnew mitigation strategies that are not currently employed.\n3 RELEVANT WORK\n3.1 Understanding Diversity in CS/SE\nHarrison and Klein [ 23] define diversity as the \u201cdistribution of\ndifferences among the members of a unit concerning a common\nattribute.\u201d Much existing diversity research in SE focuses on social\nattributes like gender, age, and ethnicity, especially as these are\nprotected classes under United States anti-discrimination law [ 13].\nStudies have shown that software engineers face challenges and\nbarriers to developing activities in this field resulting from perceived\ndiversity related to these attributes [ 46]. Age-related barriers are\nparticularly relevant to software engineers with non-traditional\nacademic backgrounds, who tend to be older at the same career\nstage as their peers [ 16]. The perception that younger software\nengineers are better is pervasive throughout the industry and even\npopular media [ 4]. This discriminatory discourse tend to create\nchallenges to older software engineers to participate in open-source\nsoftware (OSS) projects [5, 42].\n3.2 Diversity in Educational and Occupational\nBackgrounds\nEducational background diversity refers to the different sets of\nknowledge, skills, and abilities that team members acquired in the\nfunction of their educational backgrounds. Thus, a team composed\nof people with diverse educational backgrounds can understand a\nproblem based on various combinations of information, insights,\nand perspectives [ 38]. Studies have shown that diverse educational\nbackgrounds may affect work outcomes and team behaviour in sev-\neral aspects, such as team creativity, team performance, and innova-\ntion [ 21,30,40,43]. However, high educational background levels\ncan lead to an excessive conflict of ideas that is time-consuming due\nto the need for reconciling knowledge, experiences, and different\nviews [ 38]. According to Kearney and Gebert, the formation of a\nteam with diverse functional and educational profiles is a way to\npromote the integration of crossed ideas and to present to the team\nnew perspectives and insights to solve a problem or execute a task\n[32]. Results of a study conducted by Guo et al. have demonstrated\nthat educational diversity may negatively affect team creativity,\nespecially when tasks are repetitive, defined, and predictable, and\npersonnel team variability is higher [ 10,21]. Cases of research have\nalso shown that educational diversity influences, at different levels,\nteam performance in the banking and financial sectors [45].\nFunctional background diversity refers to differences in the pro-\nfessional background among team members [ 6,10,44]. Research\nhas indicated that functional diversity is associated not only with\nthe promotion of creativity, innovation, performance, and problem-\nsolving ability but allowing a high capacity for incorporating newknowledge from a diverse domain [ 49,50]. Although diverse func-\ntional backgrounds offer teams various benefits, different views\nand perspectives might cause disagreements among team members,\nnegatively impacting teams [ 50]. Also, functional background di-\nversity may be negatively impacted by rising costs associated with\nthe time-consuming consensus process when integrating ideas [ 49].\n3.3 Career Switching\nWhile there does not exist much prior research on career transitions\nrelated to the software industry, research by Castro et al. on career\ntransitions by junior academics into Data Science is of particularly\nrelevance [ 9]. These junior academics faced career barriers within\nacademics, including career uncertainty and the lack of meaning\nand impact. These barriers, when paired with a failure to meet career\nexpectations, motivated a career switch. The transitioning process\nis facilitated by what Castro et al. referred to as career catalysts (e.g.,\n\u201cadapting one\u2019s mindset to new industries and roles\u201d). They also\ncaptured what junior academics did as part of the transition, which\ninclude activities like self-learning. Lastly, they explored how a\nsuccessful transition into Data Science allowed for an experience\nof career sustainability [9].\nIn contrast, this work looks to contribute a more high-level un-\nderstanding of the barriers faced by, and mitigation strategies used\nby, those with any non-traditional occupational and/or educational\nbackground (i.e., not just junior academics) transitioning into any\nrole related to SE (i.e., not just Data Science).\n4 METHODOLOGY\nFigure 1: A high-level overview of the methodology of this\nwork, which contains an exploratory study, followed by a\nvalidation study.\nTo answer our research questions, we will perform an exploratory\nstudy where we qualitatively analyze Reddit posts by our target\npopulation, i.e., those who are considering a SE career, as well as\nthose who have already started theirs, with non-traditional edu-\ncational or occupational backgrounds. This analysis will be based\non Hoda\u2019s Socio-Technical Grounded Theory (STGT) [ 25], and\nwill aim to uncover barriers and possible mitigation strategies. To\nvalidate the barriers and mitigation strategies gathered from the\nqualitative analysis, a survey will be designed and administered to\nour target population in a validation study. A high-level overview\nof our methodology is presented in Fig. 1. Below, we discuss the\nexploratory study and validation study in detail.\n\nTowards Understanding Barriers and Mitigation Strategies of Software Engineers with Non-traditional Educational and Occupational Backgrounds MSR\u201922, May 2022, Pittsburgh, PA, USA\n4.1 Exploratory Study\nThis study uses a qualitative analysis process that is inspired by\nthe STGT, which consists of two stages, the Basic Stage and the\nAdvanced Stage (Fig. 1). STGT, proposed by Hoda, is \u201can iterative\nand incremental research method for conducting socio-technical\nresearch using traditional and modern research techniques to gen-\nerate novel, useful, parsimonious, and modifiable theories\u201d [ 25].\nThis aligns very well with our study for two reasons. First is the\nsocio-technical nature of our topic, i.e., the barriers faced by those\nwho want to transfer into a SE career have both social and tech-\nnical aspects. Moreover, STGT is designed with a wide variety of\nresearch methodologies in mind, unlike many existing versions\nof Grounded Theory (GT), which are \u201cpredominantly applied as a\nqualitative method through traditional data collection techniques\nsuch as interviews and observation\u201d [ 25]. One aspect of this is\nSTGT\u2019s allowance for context-specific ontological stands, including\nnon-physical realities like Reddit, a virtual world.\nHowever, it is worth noting that several aspects of this study\u2019s\nprocedures deviate from STGT. First, while STGT takes inspiration\nfrom Glaserian, Strauss-Corbinian, and Constructivist versions of\nGT, [ 25] does not specify i) if research questions should be defined\nprior to starting the data collection and analysis phase, and ii) how, if\nat all, can Inter-Coder Reliability (ICR) statistics be used to verify the\nreliability of multiple coders\u2019 analysis. This work defined research\nquestions prior to the analysis, closer to Strauss-Corbinian GT, in\nwhich \u201ca question should be pre-set as it sets the boundaries around\nthe study area\u201d [ 12]. Moreover, the questions are structured in terms\nof barriers and mitigation strategies, which is a structure commonly\nused in existing SE research on various aspects of diversity (e.g.,\n[4,8,19,31,48]). This was done to strike \u201ca balance between being\nsufficiently informed versus overly influenced by existing works\u201d,\na Constructivist GT approach [ 25]. Regarding ICR statistics, we\ndescribe below the procedure we plan to use for incorporating\nKrippendorff\u2019s Alpha [ 33] to ensure reliability. Another aspect\ndeviating from the grounded theory approach is that this work has\npre-determined data sources (i.e., Reddit), instead of allowing for\nthe possibility of theoretically sampling from other unplanned data\nsources [ 25]. This decision to determine a fixed data source is made\nas a balance between manpower and budgetary constraints, and\nour belief that Reddit serves as a rich data source sufficient for a\nfirst step towards answering the research questions.\nEthics Considerations. Since this study involves the analysis\nof a publicly available archive of Reddit posts hosted by pushshift.io,\ncareful ethics considerations are needed. On this, Gold and Krinke\ndemonstrates the use of Menlo ethics principles within MSR re-\nsearch contexts in [ 20]. Since obtaining informed consent from\nReddit users whose content is analysed in this work is logistically\nimpossible, we will not present any direct quotations from the data.\nWe will anonymize the data by removing usernames and make it\nprivately available for any future researchers interested in replicat-\ning or building off of this work. This aligns with Hoda\u2019s suggestion\nto \u201cobscure identifiable information\u201d when using public data [25].\nWe describe the details of the procedure we plan to execute\nbelow.\n4.1.1 Basic Stage. This stage involves a lean literature review, basic\ndata collection and basic data analysis (Fig. 2).\nFigure 2: An overview of the Basic Stage. Steps that have\nbeen completed are shaded grey.\nLean Literature Review. The purpose of performing a lean\nliterature review is to \u201cidentify gaps and motivate the need for a\n\nMSR\u201922, May 2022, Pittsburgh, PA, USA Barnes, Lee and Tavares, et al.\nstudy\u201d [ 25]. Findings from our lean literature review have been pre-\nsented in Section 3 above, and revealed that there exists no study or\nframework that explores our research questions. This motivates our\nstudy, especially given the significance of our research questions,\nas explained in Section 1. To borrow Hoda\u2019s words, the topics ex-\nplored in this paper are \u201crelatively nascent, with no or few existing\ntheories\u201d [25].\nBasic Data Collection. We describe our basic data collection\nprocess from Reddit below.\nWe chose to use Reddit as our data source because it is i) widely\nused and is one of the top 20 most popular websites in the world\n[3], and ii) has subreddits, which are forums on Reddit for discus-\nsions on specific topics, with posts that are relevant to our research\nquestions. Reddit has seen increasing use by researchers to explore\nquestions related to the social sciences [ 3] and SE (e.g., [ 28]). Our\ndataset was collected from Reddit posts made in the three-year pe-\nriod from 2017 to 2019, using a publicly available archive of Reddit\nposts hosted by pushshift.io. We wanted to focus on data prior to\n2020 to avoid any confounding variables introduced by the global\npandemic. On the other hand, to select an appropriate start year,\ndue to the lack of a clear way of studying the trend of the SE world,\nwe instead observed trends in the use of programming languages\nas reported by Stack Overflow\u2019s annual survey. Particularly, 2017\nwas when the use of Python increased significantly from 25.9%\nin 2016 [ 52] to 32% in 2017 [ 53] among all survey responses. As\nsuch, we chose 2017 as the start year. We restricted the data to a set\nof seven subreddits, denoted by \u201c/r/\", where posts relevant to our\nstudy would be on-topic: /r/{ learnprogramming, AskProgramming,\ncscareerquestions, SoftwareEngineering, cscareerquestionsEU, Expe-\nriencedDevs, and codingbootcamp }. These subreddits were selected\nsince they were the most relevant ones out of the 1000 subred-\ndits with the most subscribers [ 1]. The resulting dataset contains\n312,022 posts in total.\nTo find potentially relevant posts within this dataset, we built a\nsimple keyword search engine. The search engine is written in 195\nlines of Rust and performs a full-text keyword search over the titles\nand post bodies of every Reddit post in the dataset. The search is\ncase-insensitive and respects word boundaries, but does not per-\nform any more advanced query processing such as stemming. We\ncompensated for this by explicitly including relevant pluralization\nand conjugations of our keywords. The source code of the search\nengine is available at https://github.com/tavianator/pheddit.\nUsing this search engine, we iteratively refined a set of search\nqueries that gave a large quantity of relevant documents. Starting\nfrom an initial set of queries, we worked through the resulting\nposts to determine whether we deemed them relevant, referring\nto and revising our inclusion and exclusion criteria as necessary,\nand whether they contained keywords that might be useful for\nfuture search queries. We describe this process in more details in\nthe following paragraphs.\nA Reddit post is included for qualitative analysis (i.e., consid-\nered relevant) if it meets the inclusion and exclusion criteria. To\ngenerate these criteria, we first individually gathered a total set\nof 52 posts using an initial set of keywords that we thought were\nrelevant to our research questions. These keywords included career ,\ncareer change ,self-taught ,switch software engineering ,back to school ,\nandcommunity college . The posts were also chosen to aid in theprocess of designing the inclusion and exclusion criteria, i.e., we\nhad posts that were obviously relevant or irrelevant, and posts that\nwere ambiguous. Then, as a group, we generated the inclusion and\nexclusion criteria by discussing the relevance of each post (Fig. ??).\nFigure 3: An overview of the inclusion and exclusion crite-\nria.\nIn general, our motivation is to cast a reasonably wide net when\ngathering the various barriers and mitigation strategies; i.e., we\ndo not want to have a narrow scope that artificially excludes the\nmessiness and complexity of the phenomenon studied. As such,\nother trickier cases (e.g., someone who started their university\neducation in CS and switched to an irrelevant area halfway through)\nwill be accessed on a case-by-case basis based on their contribution\ntowards our process of answering the research questions.\nBased on the initial set of posts, we performed a keyword expan-\nsion exercise as a group to generate a final set of keywords that\nreflects relevant concepts to our research questions.\nThe final set of keywords contains 12 words, including degree ,\ncareer ,programming ,school ,learn ,switch ,change ,college ,university ,\nadvice ,bootcamp ,self-taught . These keywords are used to search\nthe title and body content (i.e., excluding the comments and replies)\nof all posts in our data pool, resulting in 133,829 possibly relevant\nposts.\nBasic Data Analysis. This step involves an iterative process\nthat includes basic data analysis, basic memoing and theoretical\nsampling [25].\nBasic data analysis will involve two steps, namely open coding\nand constant comparison. In this study, we will be using NVivo\n12, a data analysis software commonly used in qualitative contexts\n(e.g., [ 39,54]), to aid with various steps in our qualitative analyses,\nincluding open coding and memoing. During open coding, coders\n\nTowards Understanding Barriers and Mitigation Strategies of Software Engineers with Non-traditional Educational and Occupational Backgrounds MSR\u201922, May 2022, Pittsburgh, PA, USA\n(i.e., the first three authors) will treat each comment or original\npost as a single unit of coding, a common practice for Reddit-based\nqualitative coding (e.g., [ 55]). The exact methods of coding used\ncould include descriptive coding (nouns summarizing the topic\nof a datum), in vivo coding (codes based on the actual language\nused in the data), process coding (using \u201c-ing\u201d words exclusively\nto represent actions suggested by a datum, including observable\nhuman actions, mental processes and conceptual ideas) and versus\ncoding (codes with a \u201cA vs B\u201d format) [ 47]. In terms of types of\ncodes, we expect to have codes on not just barriers and mitigation\nstrategies, but also observed demographic factors of commenters\nin relevant Reddit posts. E.g., if someone says they are trying a\ncareer switch at 40, we will code the age as 40. Importantly, a\npost will only be coded if it is judged as relevant based on the\ninclusion and exclusion criteria. To ensure an acceptable level of\nreliability between the three coders, intercoder-reliability (ICR) will\nbe measured at the initial stage of coding, as shown in Fig. 2.\nWe plan to use percentage agreement on which posts are con-\nsidered relevant (i.e., relevant/irrelevant). For relevant posts that\nare coded, we plan to use Krippendorff\u2019s Alpha [ 33] given its flexi-\nbility in regard to the number of coders, sample size etc. [ 24], its\nsuitability for our study\u2019s design [ 17] and its use in existing works\nthat qualitatively analyzed mined Reddit data [ 34,51]. Multiple\niterations of independent coding, comparisons across coders and\nrefinement of the coding process may be performed if necessary to\nachieve satisfactory ICR (see [ 34] for example), which, in our case,\nwould be an Alpha of 0.8 or larger [36].\nNext, constant comparison, which is \u201cthe process of constantly\ncomparing derived codes within the same source and across sources\nto identify key patterns in the data\u201d [ 25], will also be performed by\nthe researchers during the analysis to iteratively produce concepts,\nsub-categories (if suitable) and categories in increasing abstraction\nlevels. We will perform multiple rounds of individual- (for deeper\nreflections on the data) and group-based (for synthesizing every-\none\u2019s reflections) constant comparison in our study, which will be\ninterleaved with other parts of the basic data analysis stage.\nBasic memoing is a process where researchers document their\nthoughts, ideas and reflections on emerging concepts and their con-\nnections during qualitative analysis [ 25]. It will be used by the first\nthree authors who will be participating in the qualitative analysis\nprocess. Memos will be referenced when codes are compared and\ngrouped into categories and concepts.\nTheoretical sampling is an ongoing sampling process that in-\nvolves the intentional selection of data sources based on the data\u2019s\nspecific characteristics [ 25]. For this study, the pool of possibly\nrelevant posts will be randomly divided among us (the first three\nauthors) for individual sampling and coding after all initial disagree-\nments have been discussed and resolved, as described above. Rele-\nvant Reddit posts will be theoretically sampled such that they con-\ntribute meaningfully towards the qualitative analysis. This means\nchoosing relevant posts from the pool of possibly relevant posts\nthat offer new information instead of those that provide primarily\nrepeated information that have been analyzed from previous posts.\nWe will move on from the Basic Stage to the Advanced Stage\nupon the emergence of a few strong categories, as recommended\nby Hoda [25]. We describe the details of the Advanced Stage next.\nFigure 4: An overview of the Advanced Stage.\n4.1.2 Advanced Stage. The Advanced Stage involves targeted lit-\nerature review, theoretical saturation, and theory development\n(Fig. 4).\nTargeted Literature Review. This refers to \u201can in-depth re-\nview of literature targeting relevance to the emerging/emergent\ncategories and hypotheses\u201d [ 25]. Depending on the findings from\nthe analysis of the Basic Stage, we will periodically perform tar-\ngeted literature review in order to understand where our findings\nsituate among relevant works.\nTheoretical Saturation. This refers to when new data collected\nno longer generate or contribute significantly to the existing find-\nings (e.g., concepts, categories) [ 25]. Practically, we will define our\nanalysis as having reached theoretical saturation if during inde-\npendent coding, each of the three first authors come to a point of\nanalyzing three theoretically sampled Reddit posts that no longer\ncontribute significantly to existing findings. Moreover, a following\nvalidation study will be used as a form of triangulation to facilitate\nan understanding of the findings\u2019 trustworthiness [2].\nTheory Development. STGT provides researchers with a choice\nof two theory development approaches, Emergent Mode orStruc-\ntured Mode [25]. The Emergent mode is preferable when the basic\nstage reveals categories with emerging relationships, but without a\nclear theoretical structure. It involves targeted data collection and\nanalysis (where focus is paid almost exclusively to the most signif-\nicant categories), and theoretical structuring (where researchers\ncould explore how the emerging theory fits with theory genres\nand templates) [ 25]. The Structured mode is recommended for use\nwhen the Basic Stage yields categories with a relatively clear theo-\nretical structure. It involves structured data collection and analysis\n(where relationships between key categories are strengthened), and\ntheoretical integration (where categories are full integrated into\nthe overall structure of the framework). What we use will depend\non our findings from the Basic Stage. Regardless, the final outcome\nwill be a framework that serves to answer our research questions.\n4.2 Validation Study\nThe validation study will involve the design and administration of\na survey that aims to validate findings on barriers and mitigation\nstrategies from the exploratory study (Fig. 5).\nTargeted Audience. Participants will only be eligible to com-\nplete the survey if they are 18 and older, and have extensive expe-\nrience (a post-secondary degree or diploma or 3+ years of work\nexperience) in a field other than SE, and who\n\nMSR\u201922, May 2022, Pittsburgh, PA, USA Barnes, Lee and Tavares, et al.\nFigure 5: An overview of the Validation Study.\n\u2022currently work as a software engineer, OR\n\u2022are currently studying SE, OR\n\u2022previously worked in or studied SE, AFTER their experience\nin another field\nSurvey Design. The survey will ask participants about their de-\nmographics, educational background and occupational background.\nHowever, the core part of the survey will be about validating find-\nings from the exploratory study, which include barriers and mitiga-\ntion strategies. Regarding this, participants will be asked to:\n\u2022Rate how relevant each barrier from the exploratory study\nis in their experience using Likert scales ( 1=Not relevant at\nalland 5=Extremely relevant )\n\u2022List any other barriers they faced and mitigated strategies\nrelevant to them\n\u2022List mitigation strategies they used for each barrier from the\nexploratory study\n\u2022Rate how effective each mitigation strategy from the ex-\nploratory study is using Likert scales ( 1=Not effective at all\nand 5=Extremely effective )\nWe plan to ask participants to list possible mitigation strategy on\ntheir own before asking them to rate mitigation strategies found\nfrom the exploratory study to understand their perspective better\nwithout biasing them with the strategies found in the exploratory\nstudy.\nPilot study. Following STGT\u2019s recommendation for a prepa-\nration and piloting phase, we will conduct a pilot study by run-\nning three participants through the survey using a think-out-loud\nmethodology (see [ 22,35,41] for similar survey pilot methodolo-\ngies), and at least two researchers will be present for each partici-\npant when they fill in the survey. Feedback from these participants\nwill be used to improve the survey wording and structure.\nData collection. We will make the improved survey available to\nparticipants and collect responses from around 50 participants, as\nestimated from our budget for this work. We plan to recruit partici-\npants by advertising on relevant subreddits (e.g., /r/{ learnprogramming,\ncscareerquestionsEU }) and through snowball sampling via personal\nconnections. Each participant will receive a remuneration of CAD$\n10 for completing the survey.Data Analysis and Presentation. We will be analyzing to what\nextent are findings from the exploratory study validated, which will\nbe done mainly through descriptive statistics of close-ended ques-\ntions, and qualitative analysis of open-ended questions. Wherever\nappropriate, findings from our analysis of survey responses will\nalso be used to improve the framework from the exploratory study.\nWe will also present descriptive statistics about the demographics\nof the survey participants. No statistical tests will be used because\nthis validation study does not involve any experimental or control\nconditions but only serves to better understand how widespread\nbarriers and mitigation strategies from the exploratory study are.\nEthics Considerations. An approval from our institution\u2019s\nethics committee will be obtained before the pilot and actual de-\nployment of the survey.\n5 THREATS TO VALIDITY\nThe first threat to validity is the subjectivity involved in the Reddit\nquery building process. For instance, there might be important\nkeywords that are missing from our Reddit search query, especially\nsince it is not possible to objectively measure the completeness and\nquality of the keywords. To address this, we snowballed the group\nof keywords by starting with a set of keywords that we thought\nwere relevant to our research questions and expanded it as we\nbecame more familiar with the dataset. Moreover, the survey in\nthe validation study contributes towards a more comprehensive\nunderstanding by validating any findings and contributing new\nfindings that might have been missing from the exploratory study.\nAnother threat to our work\u2019s external validity is in terms of its\ngeographic generalizability. We expect most of the users whose\ncomments are posts in our dataset to be from the United States (US),\nsince the US accounted for 48.93% of all traffic to Reddit in the six\nmonths leading up to June 2021 [ 11]. We also expect participants\nfor our validation study to be mostly located in the North America.\nAs such, we do not claim to have findings that are generalizable\nacross all continents, but to mostly be valid in the context of North\nAmerica. Besides, findings from this work only serve as a first step\nexploration of the research questions, since they predominantly\nreflect barriers and mitigation strategies reported in the selected\nsubreddits. While Reddit is a rich source of data, future works by\nlarger research teams with more budget can better apply grounded\ntheory\u2019s theoretical sampling by preparing to branch into other\nunexpected data sources to explore other possible aspects of the\nresearch questions [25].\n6 POTENTIAL IMPLICATIONS\nWe hope that findings from this work can not only lead to a better\nunderstanding of the i) barriers and ii) mitigation strategies faced\nby those with non-traditional educational or occupational back-\nground in a career related to SE, but also iii) serve as a basis off of\nwhich discussions and research of possible solutions could be held.\nParticularly relevant to EMSE is this work\u2019s implications for future\nwork on possible SE processes and tools that can be designed based\non the mitigation strategies observed.\n\nTowards Understanding Barriers and Mitigation Strategies of Software Engineers with Non-traditional Educational and Occupational Backgrounds MSR\u201922, May 2022, Pittsburgh, PA, USA\n7 SUMMARY\nThis work aims to analyze barriers and mitigation strategies of soft-\nware engineers with non-traditional educational and occupational\nbackgrounds, an important aspect of SE that remains unexplored\ncurrently. The analysis is carried out in two steps. The first, an\nexploratory study, will involve the analysis of relevant Reddit data\nusing a grounded-theory-based approach towards emerging themes\nand patterns around barriers and mitigation strategies. The sec-\nond step is a validation study that will validate findings from the\nexploratory study via a survey that will be filled out by software\nengineers with non-traditional educational and occupational back-\ngrounds.\nREFERENCES\n[1] [n.d.]. Subreddit Stats. https://subredditstats.com/list/most-subscribers\n[2]Khaldoun M. Aldiabat and Carole-Lynne Le Navenec. 2018. Data Saturation: The\nMysterious Step in Grounded Theory Methodology. The Qualitative Report 23, 1\n(01 2018), 245\u2013261.\n[3]Ashley Amaya, Ruben Bach, Florian Keusch, and Frauke Kreuter. 2021. New data\nsources in social science research: things to know before working with reddit\ndata. Social science computer review 39, 5 (2021), 943\u2013960.\n[4]Sebastian Baltes, George Park, and Alexander Serebrenik. 2020. Is 40 the New 60?\nHow Popular Media Portrays the Employability of Older Software Developers.\nIEEE Software 37, 6 (2020), 26\u201331. https://doi.org/10.1109/MS.2020.3014178\n[5]Sebastian Baltes, George Park, and Alexander Serebrenik. 2020. Is 40 the new\n60? How popular media portrays the employability of older software developers.\nIEEE Software 37, 6 (2020), 26\u201331.\n[6]J. S Bunderson and K. M Sutcliffe. 2002. Comparing Alternative Conceptualiza-\ntions of Functional Diversity in Management Teams: Process and Performance\nEffects. Academy of Management journal 45, 5 (2002), 875\u2013893.\n[7]Statistics Canada. [n.d.]. Strong growth in operating revenue, software develop-\nment and computer service industries, 2019. https://www150.statcan.gc.ca/n1/\ndaily-quotidien/210304/dq210304d-eng.htm\n[8]Edna Dias Canedo, Fabiana Mendes, Anderson Cerqueira, Marcio Okimoto, Gus-\ntavo Pinto, and Rodrigo Bonifacio. 2021. Breaking one barrier at a time: how\nwomen developers cope in a men-dominated industry. In Brazilian Symposium\non Software Engineering . 378\u2013387.\n[9]Mayra Ruiz Castro, Beatrice Van der Heijden, and Emma L. Henderson. 2020. Cat-\nalysts in career transitions: Academic researchers transitioning into sustainable\ncareers in data science. Journal of Vocational Behavior 122 (Oct. 2020), 103479.\nhttps://doi.org/10.1016/j.jvb.2020.103479\n[10] J. Chen, Wei Yang Lim, B. Tan, and Hong Ling. 2018. The Role of Functional\nDiversity, Collective Team Identification, and Task Cohesion in Influencing Inno-\nvation Speed: Evidence From Software Development Teams. J. Glob. Inf. Manag.\n26 (2018), 163\u2013192.\n[11] J. Clement. [n.d.]. Distribution of Reddit.com traffic 2021, by country. https:\n//www.statista.com/statistics/325144/reddit-global-active-user-distribution/\n[12] Gerry Coleman and Rory O\u2019Connor. 2007. Using grounded theory to understand\nsoftware process improvement: A study of Irish software product companies.\nInformation and Software Technology 49, 6 (June 2007), 654\u2013667. https://doi.org/\n10.1016/j.infsof.2007.02.011\n[13] U.S. Equal Employment Opportunity Commission. [n.d.]. Prohibited Em-\nployment Policies/Practices. https://www.eeoc.gov/prohibited-employment-\npoliciespractices\n[14] DataUSA. [n.d.]. Computer Science Profile. https://datausa.io/profile/cip/\ncomputer-science-110701\n[15] DataUSA. [n.d.]. Computer Software Engineering Profile. https://datausa.io/\nprofile/cip/computer-software-engineering\n[16] Liz Eggleston. 2021. 2020 Coding Bootcamp Alumni Outcomes & Demographics\nReport. https://www.coursereport.com/reports/2020-coding-bootcamp-alumni-\noutcomes-demographics-report-during-covid-19\n[17] Guangchao Charles Feng. 2013. Intercoder reliability indices: disuse, misuse, and\nabuse. Quality & Quantity 48, 3 (Nov. 2013), 1803\u20131815. https://doi.org/10.1007/\ns11135-013-9956-8\n[18] Forbes. [n.d.]. Is There A Developer Shortage? Yes, But The Problem Is More\nComplicated Than It Looks. https://www.forbes.com/sites/forbestechcouncil/\n2021/06/08/is-there-a-developer-shortage-yes-but-the-problem-is-more-\ncomplicated-than-it-looks/?sh=6376767d3b8e\n[19] Denae Ford, Justin Smith, Philip J Guo, and Chris Parnin. 2016. Paradise un-\nplugged: Identifying barriers for female participation on stack overflow. In Pro-\nceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations\nof Software Engineering . 846\u2013857.[20] Nicolas E. Gold and Jens Krinke. 2021. Ethics in the mining of software reposito-\nries. Empirical Software Engineering 27, 1 (Nov. 2021). https://doi.org/10.1007/\ns10664-021-10057-7\n[21] Weixiao Guo, Chenjing Gan, and Duanxu Wang. 2021. When Does Educational\nLevel Diversity Foster Team Creativity? Exploring the Moderating Roles of Task\nand Personnel Variability. Frontiers in psychology 12 (2021), 585849\u2013585849.\n[22] Monika Gupta, Ashish Sureka, Srinivas Padmanabhuni, and Allahbaksh Mo-\nhammedali Asadullah. 2015. Identifying software process management chal-\nlenges: Survey of practitioners in a large global it company. In 2015 IEEE/ACM\n12th Working Conference on Mining Software Repositories . IEEE, 346\u2013356.\n[23] D. Harrison and K. Klein. 2007. What\u2019s the difference? Diversity constructs as\nseparation, variety, or disparity in organizations. Academy of Management Review\n32 (2007), 1199\u20131228.\n[24] Andrew F Hayes and Klaus Krippendorff. 2007. Answering the call for a standard\nreliability measure for coding data. Communication methods and measures 1, 1\n(2007), 77\u201389.\n[25] Rashina Hoda. 2021. Socio-Technical Grounded Theory for Software Engineering.\nIEEE Transactions on Software Engineering (2021), 1\u20131. https://doi.org/10.1109/\ntse.2021.3106280\n[26] Sonja Hyrynsalmi and Sami Hyrynsalmi. 2019. What motivates adult age women\nto make a career change to the software industry?. In 2019 IEEE International\nConference on Engineering, Technology and Innovation (ICE/ITMC) . IEEE, 1\u20138.\n[27] IBISWorld. [n.d.]. Software Publishing Industry in the US - Market Research\nReport. https://www.ibisworld.com/united-states/market-research-reports/\nsoftware-publishing-industry/\n[28] Tahira Iqbal, Moniba Khan, Kuldar Taveter, and Norbert Seyff. 2021. Mining\nReddit as a New Source for Software Requirements. In 2021 IEEE 29th International\nRequirements Engineering Conference (RE) . IEEE, 128\u2013138.\n[29] Irving L Janis. 1972. Victims of Groupthink: A psychological study of foreign-\npolicy decisions and fiascoes. The ANNALS of the American Academy of\nPolitical and Social Science 407, 1 (1972), 179\u2013180. https://doi.org/10.1177/\n000271627340700115\n[30] Karen A Jehn, Gregory B Northcraft, and Margaret A Neale. 1999. Why Differ-\nences Make a Difference: A Field Study of Diversity, Conflict, and Performance\nin Workgroups. Administrative science quarterly 44, 4 (1999), 741\u2013763.\n[31] Pawanpreet Kaur and Sumit Sharma. 2014. Agile software development in global\nsoftware engineering. International Journal of Computer Applications 97, 4 (2014).\n[32] Eric Kearney and Diether Gebert. 2009. Managing Diversity and Enhancing\nTeam Outcomes: The Promise of Transformational Leadership. Journal of applied\npsychology 94, 1 (2009), 77\u201389.\n[33] Klaus Krippendorff. 2011. Computing Krippendorff\u2019s alpha-reliability. https:\n//repository.upenn.edu/asc_papers/43\n[34] Priya Kumar, Anatoliy Gruzd, Caroline Haythornthwaite, Sarah Gilbert, Marc\nEsteve del Valle, and Drew Paulin. 2018. Learning in the wild: Coding Reddit for\nlearning and practice. In Proceedings of the 51st Hawaii International Conference\non System Sciences .\n[35] Thomas D LaToza, Gina Venolia, and Robert DeLine. 2006. Maintaining mental\nmodels: a study of developer work habits. In Proceedings of the 28th international\nconference on Software engineering . 492\u2013501.\n[36] Matthew Lombard, Jennifer Snyder-Duch, and Cheryl Campanella Bracken. 2002.\nContent Analysis in Mass Communication: Assessment and Reporting of Inter-\ncoder Reliability. Human Communication Research 28, 4 (Oct. 2002), 587\u2013604.\nhttps://doi.org/10.1111/j.1468-2958.2002.tb00826.x\n[37] Rocio Lorenzo and Martin Reeves. 2018. How and where diversity drives financial\nperformance. Harvard Business Review 30 (2018), 1\u20135.\n[38] Kun Luan, Chu-Ding Ling, and Xiao-Yun Xie. 2016. The nonlinear effects of\neducational diversity on team creativity. Asia Pacific journal of human resources\n54, 4 (2016), 465\u2013480.\n[39] Zainab Masood, Rashina Hoda, and Kelly Blincoe. 2020. How agile teams make\nself-assignment work: a grounded theory study. Empirical Software Engineering\n25, 6 (Sept. 2020), 4962\u20135005. https://doi.org/10.1007/s10664-020-09876-x\n[40] A. Mohammadi, A. Brostr\u00f6m, and C. Franzoni. 2017. Workforce Composition\nand Innovation: How Diversity in Employees\u2019 Ethnic and Educational Back-\ngrounds Facilitates Firm-Level Innovativeness: WORKFORCE COMPOSITION\nAND INNOVATION. The Journal of product innovation management 34, 4 (2017),\n406\u2013426.\n[41] Saikat Mondal and Banani Roy. 2022. Reproducibility Challenges and Their\nImpacts on Technical Q&A Websites: The Practitioners\u2019 Perspectives. In 15th\nInnovations in Software Engineering Conference (Gandhinagar, India) (ISEC 2022) .\nAssociation for Computing Machinery, New York, NY, USA, Article 11, 11 pages.\nhttps://doi.org/10.1145/3511430.3511439\n[42] Patrick Morrison, Rahul Pandita, Emerson Murphy-Hill, and Anne McLaugh-\nlin. 2016. Veteran developers\u2019 contributions and motivations: An open source\nperspective. In 2016 IEEE Symposium on Visual Languages and Human-Centric\nComputing (VL/HCC) . IEEE, 171\u2013179.\n[43] Katherine W Phillips, Elizabeth A Mannix, Margaret A Neale, and Deborah\nH. Gruenfeld. 2004. Diverse groups and information sharing: The effects of\ncongruent ties. Journal of experimental social psychology 40, 4 (2004), 497\u2013510.\n\nMSR\u201922, May 2022, Pittsburgh, PA, USA Barnes, Lee and Tavares, et al.\n[44] Andreas W Richter, Giles Hirst, Daan van Knippenberg, and Markus Baer. 2012.\nCreative Self-Efficacy and Individual Creativity in Team Contexts: Cross-Level\nInteractions With Team Informational Resources. Journal of Applied Psychology\n97, 6 (2012), 1282\u20131290. https://doi.org/10.1037/a0029359\n[45] Muhammad Rizwan, Mula Nazar Khan, Babar Nadeem, and Q Abbas. 2016. The\nimpact of workforce diversity towards employee performance: Evidence from\nbanking sector of Pakistan. American Journal of Marketing Research 2, 2 (2016),\n53\u201360.\n[46] Gema Rodr\u00edguez-P\u00e9rez, Reza Nadri, and Meiyappan Nagappan. 2021. Perceived\ndiversity in software engineering: a systematic literature review. Empirical\nsoftware engineering : an international journal 26, 5 (2021), 102\u2013102.\n[47] Johnny Salda\u00f1a. 2014. Coding and analysis strategies. In The Oxford handbook of\nqualitative research .\n[48] Sumit Sharma, Pawanpreet Kaur, and Upinder Kaur. 2015. Communication under-\nstandability enhancement in GSD. In 2015 International Conference on Futuristic\nTrends on Computational Analysis and Knowledge Management (ABLAZE) . IEEE,\n28\u201333.\n[49] Starlene M Simons and Kimberly N Rowland. 2011. Diversity and its impact on\norganizational performance: The influence of diversity constructions on expecta-\ntions and outcomes. Journal of technology management & innovation 6, 3 (2011),\n171\u2013183. http://dx.doi.org/10.4067/S0718-27242011000300013[50] Anit Somech. 2006. The Effects of Leadership Style and Team Process on Per-\nformance and Innovation in Functionally Heterogeneous Teams. Journal of\nmanagement 32, 1 (2006), 132\u2013157.\n[51] L Sparrow, Madeleine Antonellos, Martin Gibbs, and Michael Arnold. 2020. From\n\u2018Silly\u2019to \u2018Scumbag\u2019: Reddit Discussion of a Case of Groping in a Virtual Reality\nGame. In Proceedings of the 2020 DiGRA International Conference: Play Everywhere,\nThe Digital Games Research Association.\n[52] StackOverflow. [n.d.]. Stack Overflow Developer Survey Results 2016. https:\n//insights.stackoverflow.com/survey/2016#technology\n[53] Stackoverflow. [n.d.]. Stack Overflow Developer Survey Results 2017. https:\n//insights.stackoverflow.com/survey/2017#technology\n[54] Anastasiia Tkalich, Nils Brede Moe, and Rasmus Ulfsnes. 2021. Making Internal\nSoftware Startups Work: How to Innovate Like a Venture Builder?. In International\nConference on Software Business . Springer, 152\u2013167.\n[55] Marc Esteve Del Valle and Rik Smit. 2021. Moonwalking together: Tracing Red-\nditors\u2019 digital memory work on Michael Jackson. Convergence: The International\nJournal of Research into New Media Technologies 27, 6 (March 2021), 1811\u20131832.\nhttps://doi.org/10.1177/13548565211003878\n[56] Graham Wilson. 2017. Building a new mythology: The coding boot-camp phe-\nnomenon. ACM Inroads 8, 4 (2017), 66\u201371.\n\n",
    "is_processed": true,
    "process_error": null,
    "content_length": 45115,
    "local_pdf_path": "data/pdfs/Towards Understanding Barriers and Mitigation Strategies of Software Engineers with Non-traditional _4d2bdc8f.pdf"
  }
}